{"traceEvents": [{"ph": "M", "pid": 9440, "tid": 9440, "name": "process_name", "args": {"name": "MainProcess"}}, {"ph": "M", "pid": 9440, "tid": 27716, "name": "thread_name", "args": {"name": "MainThread"}}, {"pid": 9440, "tid": 27716, "ts": 723020491658.3, "ph": "X", "cat": "fee", "dur": 1.3, "name": "__init__ (<frozen importlib._bootstrap>:143)"}, {"pid": 9440, "tid": 27716, "ts": 723020491663.1, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020491669.5, "ph": "X", "cat": "fee", "dur": 5.4, "name": "_thread.allocate_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020491675.9, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_thread.allocate_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020491668.7, "ph": "X", "cat": "fee", "dur": 9.9, "name": "__init__ (<frozen importlib._bootstrap>:58)"}, {"pid": 9440, "tid": 27716, "ts": 723020491683.0, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020491662.2, "ph": "X", "cat": "fee", "dur": 21.5, "name": "_get_module_lock (<frozen importlib._bootstrap>:157)"}, {"pid": 9440, "tid": 27716, "ts": 723020491685.8, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_thread.get_ident"}, {"pid": 9440, "tid": 27716, "ts": 723020491685.1, "ph": "X", "cat": "fee", "dur": 5.9, "name": "acquire (<frozen importlib._bootstrap>:78)"}, {"pid": 9440, "tid": 27716, "ts": 723020491661.3, "ph": "X", "cat": "fee", "dur": 30.0, "name": "__enter__ (<frozen importlib._bootstrap>:147)"}, {"pid": 9440, "tid": 27716, "ts": 723020491692.7, "ph": "X", "cat": "fee", "dur": 0.6, "name": "dict.get"}, {"pid": 9440, "tid": 27716, "ts": 723020491695.4, "ph": "X", "cat": "fee", "dur": 0.7, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020491701.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020491701.0, "ph": "X", "cat": "fee", "dur": 1.3, "name": "__enter__ (<frozen importlib._bootstrap>:863)"}, {"pid": 9440, "tid": 27716, "ts": 723020491707.5, "ph": "X", "cat": "fee", "dur": 2.8, "name": "builtins.locals"}, {"pid": 9440, "tid": 27716, "ts": 723020491710.8, "ph": "X", "cat": "fee", "dur": 4.1, "name": "str.format"}, {"pid": 9440, "tid": 27716, "ts": 723020491715.8, "ph": "X", "cat": "fee", "dur": 1.3, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020491718.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "<lambda> (C:\\Users\\002CSC744\\PycharmProjects\\code_tracer\\venv\\lib\\site-packages\\_distutils_hack\\__init__.py:96)"}, {"pid": 9440, "tid": 27716, "ts": 723020491705.7, "ph": "X", "cat": "fee", "dur": 13.3, "name": "find_spec (C:\\Users\\002CSC744\\PycharmProjects\\code_tracer\\venv\\lib\\site-packages\\_distutils_hack\\__init__.py:89)"}, {"pid": 9440, "tid": 27716, "ts": 723020491721.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020491720.9, "ph": "X", "cat": "fee", "dur": 0.9, "name": "__exit__ (<frozen importlib._bootstrap>:867)"}, {"pid": 9440, "tid": 27716, "ts": 723020491723.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020491723.5, "ph": "X", "cat": "fee", "dur": 0.6, "name": "__enter__ (<frozen importlib._bootstrap>:863)"}, {"pid": 9440, "tid": 27716, "ts": 723020491727.0, "ph": "X", "cat": "fee", "dur": 1.2, "name": "find_spec (C:\\Users\\002CSC744\\PycharmProjects\\code_tracer\\venv\\lib\\site-packages\\_virtualenv.py:54)"}, {"pid": 9440, "tid": 27716, "ts": 723020491729.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020491728.9, "ph": "X", "cat": "fee", "dur": 0.6, "name": "__exit__ (<frozen importlib._bootstrap>:867)"}, {"pid": 9440, "tid": 27716, "ts": 723020491730.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020491730.5, "ph": "X", "cat": "fee", "dur": 0.6, "name": "__enter__ (<frozen importlib._bootstrap>:863)"}, {"pid": 9440, "tid": 27716, "ts": 723020491733.3, "ph": "X", "cat": "fee", "dur": 5.0, "name": "_imp.is_builtin"}, {"pid": 9440, "tid": 27716, "ts": 723020491732.7, "ph": "X", "cat": "fee", "dur": 5.9, "name": "find_spec (<frozen importlib._bootstrap>:725)"}, {"pid": 9440, "tid": 27716, "ts": 723020491739.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020491739.1, "ph": "X", "cat": "fee", "dur": 0.6, "name": "__exit__ (<frozen importlib._bootstrap>:867)"}, {"pid": 9440, "tid": 27716, "ts": 723020491740.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020491740.7, "ph": "X", "cat": "fee", "dur": 0.6, "name": "__enter__ (<frozen importlib._bootstrap>:863)"}, {"pid": 9440, "tid": 27716, "ts": 723020491742.9, "ph": "X", "cat": "fee", "dur": 1.2, "name": "_imp.is_frozen"}, {"pid": 9440, "tid": 27716, "ts": 723020491742.3, "ph": "X", "cat": "fee", "dur": 2.1, "name": "find_spec (<frozen importlib._bootstrap>:800)"}, {"pid": 9440, "tid": 27716, "ts": 723020491745.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020491744.8, "ph": "X", "cat": "fee", "dur": 0.6, "name": "__exit__ (<frozen importlib._bootstrap>:867)"}, {"pid": 9440, "tid": 27716, "ts": 723020491746.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020491746.4, "ph": "X", "cat": "fee", "dur": 0.6, "name": "__enter__ (<frozen importlib._bootstrap>:863)"}, {"pid": 9440, "tid": 27716, "ts": 723020491752.4, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020491762.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020491763.5, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.replace"}, {"pid": 9440, "tid": 27716, "ts": 723020491766.2, "ph": "X", "cat": "fee", "dur": 100.2, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020491765.1, "ph": "X", "cat": "fee", "dur": 102.1, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020491761.4, "ph": "X", "cat": "fee", "dur": 113.0, "name": "__init__ (<frozen zipimport>:63)"}, {"pid": 9440, "tid": 27716, "ts": 723020491892.0, "ph": "X", "cat": "fee", "dur": 87.8, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020491891.4, "ph": "X", "cat": "fee", "dur": 88.7, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020491890.7, "ph": "X", "cat": "fee", "dur": 90.7, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)"}, {"pid": 9440, "tid": 27716, "ts": 723020491889.9, "ph": "X", "cat": "fee", "dur": 92.4, "name": "_path_isdir (<frozen importlib._bootstrap_external>:159)"}, {"pid": 9440, "tid": 27716, "ts": 723020491988.9, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1465)"}, {"pid": 9440, "tid": 27716, "ts": 723020491989.5, "ph": "X", "cat": "fee", "dur": 0.4, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1465)"}, {"pid": 9440, "tid": 27716, "ts": 723020491990.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1465)"}, {"pid": 9440, "tid": 27716, "ts": 723020491988.1, "ph": "X", "cat": "fee", "dur": 4.0, "name": "list.extend"}, {"pid": 9440, "tid": 27716, "ts": 723020491993.9, "ph": "X", "cat": "fee", "dur": 0.5, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1465)"}, {"pid": 9440, "tid": 27716, "ts": 723020491994.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1465)"}, {"pid": 9440, "tid": 27716, "ts": 723020491995.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1465)"}, {"pid": 9440, "tid": 27716, "ts": 723020491993.5, "ph": "X", "cat": "fee", "dur": 2.3, "name": "list.extend"}, {"pid": 9440, "tid": 27716, "ts": 723020491997.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1465)"}, {"pid": 9440, "tid": 27716, "ts": 723020491997.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1465)"}, {"pid": 9440, "tid": 27716, "ts": 723020491996.7, "ph": "X", "cat": "fee", "dur": 1.6, "name": "list.extend"}, {"pid": 9440, "tid": 27716, "ts": 723020492000.8, "ph": "X", "cat": "fee", "dur": 2.9, "name": "nt._path_splitroot"}, {"pid": 9440, "tid": 27716, "ts": 723020492004.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.replace"}, {"pid": 9440, "tid": 27716, "ts": 723020492005.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492006.1, "ph": "X", "cat": "fee", "dur": 1.3, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492007.7, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492000.1, "ph": "X", "cat": "fee", "dur": 8.4, "name": "_path_isabs (<frozen importlib._bootstrap_external>:167)"}, {"pid": 9440, "tid": 27716, "ts": 723020491985.5, "ph": "X", "cat": "fee", "dur": 25.4, "name": "__init__ (<frozen importlib._bootstrap_external>:1459)"}, {"pid": 9440, "tid": 27716, "ts": 723020491889.2, "ph": "X", "cat": "fee", "dur": 122.5, "name": "path_hook_for_FileFinder (<frozen importlib._bootstrap_external>:1590)"}, {"pid": 9440, "tid": 27716, "ts": 723020491757.5, "ph": "X", "cat": "fee", "dur": 254.9, "name": "_path_hooks (<frozen importlib._bootstrap_external>:1317)"}, {"pid": 9440, "tid": 27716, "ts": 723020491753.9, "ph": "X", "cat": "fee", "dur": 260.3, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)"}, {"pid": 9440, "tid": 27716, "ts": 723020492015.1, "ph": "X", "cat": "fee", "dur": 0.8, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020492017.4, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020492019.4, "ph": "X", "cat": "fee", "dur": 62.6, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020492019.1, "ph": "X", "cat": "fee", "dur": 63.3, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020492086.8, "ph": "X", "cat": "fee", "dur": 152.0, "name": "nt.listdir"}, {"pid": 9440, "tid": 27716, "ts": 723020492240.8, "ph": "X", "cat": "fee", "dur": 1.1, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492243.4, "ph": "X", "cat": "fee", "dur": 0.8, "name": "str.partition"}, {"pid": 9440, "tid": 27716, "ts": 723020492244.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020492245.4, "ph": "X", "cat": "fee", "dur": 1.3, "name": "str.format"}, {"pid": 9440, "tid": 27716, "ts": 723020492248.0, "ph": "X", "cat": "fee", "dur": 0.4, "name": "set.add"}, {"pid": 9440, "tid": 27716, "ts": 723020492249.5, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492251.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020492250.9, "ph": "X", "cat": "fee", "dur": 1.3, "name": "<setcomp> (<frozen importlib._bootstrap_external>:1578)"}, {"pid": 9440, "tid": 27716, "ts": 723020492085.8, "ph": "X", "cat": "fee", "dur": 167.1, "name": "_fill_cache (<frozen importlib._bootstrap_external>:1549)"}, {"pid": 9440, "tid": 27716, "ts": 723020492254.2, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)"}, {"pid": 9440, "tid": 27716, "ts": 723020492257.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492261.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492262.0, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492262.7, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492267.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492267.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492268.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492272.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492274.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492275.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492273.8, "ph": "X", "cat": "fee", "dur": 1.4, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492275.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492276.2, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492256.9, "ph": "X", "cat": "fee", "dur": 20.1, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492278.6, "ph": "X", "cat": "fee", "dur": 0.9, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492280.9, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492282.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492283.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492283.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492285.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492285.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492286.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492286.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492287.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492287.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492287.0, "ph": "X", "cat": "fee", "dur": 0.9, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492288.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492288.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492280.7, "ph": "X", "cat": "fee", "dur": 8.4, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492289.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492291.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492292.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492293.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492293.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492294.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492294.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492295.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492295.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492296.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492296.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492296.2, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492297.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492297.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492291.0, "ph": "X", "cat": "fee", "dur": 7.0, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492298.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492299.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492301.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492301.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492301.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492302.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492303.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492303.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492303.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492304.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492306.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492304.4, "ph": "X", "cat": "fee", "dur": 2.4, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492307.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492307.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492299.5, "ph": "X", "cat": "fee", "dur": 8.4, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492308.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492309.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492311.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492311.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492311.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492312.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492313.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492313.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492313.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492314.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492314.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492314.3, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492315.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492315.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492309.5, "ph": "X", "cat": "fee", "dur": 6.4, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492316.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492016.8, "ph": "X", "cat": "fee", "dur": 300.3, "name": "find_spec (<frozen importlib._bootstrap_external>:1498)"}, {"pid": 9440, "tid": 27716, "ts": 723020492318.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020492319.3, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)"}, {"pid": 9440, "tid": 27716, "ts": 723020492320.8, "ph": "X", "cat": "fee", "dur": 0.6, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020492322.8, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020492325.9, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020492325.3, "ph": "X", "cat": "fee", "dur": 1.4, "name": "_get_module_path (<frozen zipimport>:308)"}, {"pid": 9440, "tid": 27716, "ts": 723020492324.7, "ph": "X", "cat": "fee", "dur": 5.1, "name": "_get_module_info (<frozen zipimport>:321)"}, {"pid": 9440, "tid": 27716, "ts": 723020492330.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020492330.3, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_get_module_path (<frozen zipimport>:308)"}, {"pid": 9440, "tid": 27716, "ts": 723020492331.2, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_is_dir (<frozen zipimport>:312)"}, {"pid": 9440, "tid": 27716, "ts": 723020492323.9, "ph": "X", "cat": "fee", "dur": 8.2, "name": "find_loader (<frozen zipimport>:109)"}, {"pid": 9440, "tid": 27716, "ts": 723020492333.8, "ph": "X", "cat": "fee", "dur": 1.7, "name": "__init__ (<frozen importlib._bootstrap>:342)"}, {"pid": 9440, "tid": 27716, "ts": 723020492322.4, "ph": "X", "cat": "fee", "dur": 13.6, "name": "_legacy_get_spec (<frozen importlib._bootstrap_external>:1352)"}, {"pid": 9440, "tid": 27716, "ts": 723020492336.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.extend"}, {"pid": 9440, "tid": 27716, "ts": 723020492337.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020492337.8, "ph": "X", "cat": "fee", "dur": 0.6, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)"}, {"pid": 9440, "tid": 27716, "ts": 723020492338.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020492339.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020492340.5, "ph": "X", "cat": "fee", "dur": 56.4, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020492340.1, "ph": "X", "cat": "fee", "dur": 57.2, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020492399.4, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)"}, {"pid": 9440, "tid": 27716, "ts": 723020492401.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492404.4, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492405.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492408.0, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492410.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492410.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492411.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492411.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492412.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492413.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492412.4, "ph": "X", "cat": "fee", "dur": 1.0, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492413.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492414.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492401.4, "ph": "X", "cat": "fee", "dur": 13.2, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492415.5, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492417.1, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492418.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492419.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492419.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492420.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492420.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492421.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492421.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492422.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492422.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492422.0, "ph": "X", "cat": "fee", "dur": 0.8, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492423.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492423.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492416.9, "ph": "X", "cat": "fee", "dur": 6.9, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492424.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492425.4, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492426.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492427.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492427.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492428.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492428.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492429.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492429.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492430.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492430.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492430.0, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492430.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492431.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492425.2, "ph": "X", "cat": "fee", "dur": 6.5, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492432.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492433.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492434.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492434.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492435.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492436.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492438.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492438.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492438.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492439.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492439.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492439.4, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492440.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492440.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492433.2, "ph": "X", "cat": "fee", "dur": 7.9, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492441.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492442.7, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492443.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492444.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492444.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492445.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492446.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492446.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492446.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492447.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492447.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492447.2, "ph": "X", "cat": "fee", "dur": 0.8, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492448.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492448.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492442.5, "ph": "X", "cat": "fee", "dur": 6.3, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492449.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492339.3, "ph": "X", "cat": "fee", "dur": 110.7, "name": "find_spec (<frozen importlib._bootstrap_external>:1498)"}, {"pid": 9440, "tid": 27716, "ts": 723020492451.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020492452.0, "ph": "X", "cat": "fee", "dur": 0.7, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)"}, {"pid": 9440, "tid": 27716, "ts": 723020492453.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020492453.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020492455.1, "ph": "X", "cat": "fee", "dur": 44.6, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020492454.9, "ph": "X", "cat": "fee", "dur": 45.1, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020492501.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)"}, {"pid": 9440, "tid": 27716, "ts": 723020492503.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492505.9, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492506.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492507.1, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492508.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492509.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492509.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492510.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492511.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492511.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492510.9, "ph": "X", "cat": "fee", "dur": 0.9, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492512.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492512.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492503.4, "ph": "X", "cat": "fee", "dur": 11.7, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492516.1, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492517.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492519.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492519.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492520.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492521.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492521.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492521.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492522.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492523.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492523.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492522.8, "ph": "X", "cat": "fee", "dur": 0.8, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492523.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492524.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492517.3, "ph": "X", "cat": "fee", "dur": 7.2, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492525.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492526.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492527.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492527.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492528.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492529.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492529.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492529.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492530.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492530.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492531.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492530.6, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492531.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492531.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492525.9, "ph": "X", "cat": "fee", "dur": 6.3, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492532.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492533.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492534.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492535.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492535.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492536.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492536.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492537.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492537.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492538.4, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492538.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492538.2, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492539.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492539.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492533.6, "ph": "X", "cat": "fee", "dur": 6.2, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492540.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492542.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492543.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492544.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492544.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492545.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492546.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492546.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492546.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492547.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492547.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492547.3, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492548.3, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492548.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492542.6, "ph": "X", "cat": "fee", "dur": 6.3, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492549.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492453.7, "ph": "X", "cat": "fee", "dur": 96.4, "name": "find_spec (<frozen importlib._bootstrap_external>:1498)"}, {"pid": 9440, "tid": 27716, "ts": 723020492550.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020492551.5, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)"}, {"pid": 9440, "tid": 27716, "ts": 723020492552.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020492553.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020492554.2, "ph": "X", "cat": "fee", "dur": 49.0, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020492554.0, "ph": "X", "cat": "fee", "dur": 49.5, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020492605.1, "ph": "X", "cat": "fee", "dur": 0.6, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)"}, {"pid": 9440, "tid": 27716, "ts": 723020492607.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492609.9, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492610.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492611.0, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492612.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492613.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492613.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492614.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492615.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492615.5, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492614.8, "ph": "X", "cat": "fee", "dur": 1.0, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492616.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492616.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492607.2, "ph": "X", "cat": "fee", "dur": 9.9, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492617.9, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492619.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492620.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492621.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492621.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492622.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492622.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492623.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492623.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492626.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492626.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492626.0, "ph": "X", "cat": "fee", "dur": 0.8, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492627.1, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492627.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492619.1, "ph": "X", "cat": "fee", "dur": 8.7, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492628.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492629.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492630.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492631.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492631.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492632.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492633.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492633.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492633.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492634.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492634.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492634.2, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492635.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492635.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492629.4, "ph": "X", "cat": "fee", "dur": 6.4, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492636.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492637.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492638.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492638.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492639.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492640.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492640.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492640.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492641.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492641.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492642.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492641.7, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492642.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492642.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492637.0, "ph": "X", "cat": "fee", "dur": 6.2, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492643.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492644.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492645.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492646.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492646.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492647.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492648.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492648.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492648.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492649.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492649.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492649.2, "ph": "X", "cat": "fee", "dur": 7.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492657.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492657.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492644.5, "ph": "X", "cat": "fee", "dur": 13.3, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492658.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492552.9, "ph": "X", "cat": "fee", "dur": 106.2, "name": "find_spec (<frozen importlib._bootstrap_external>:1498)"}, {"pid": 9440, "tid": 27716, "ts": 723020492660.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020492660.6, "ph": "X", "cat": "fee", "dur": 0.6, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)"}, {"pid": 9440, "tid": 27716, "ts": 723020492661.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020492662.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)"}, {"pid": 9440, "tid": 27716, "ts": 723020492662.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020492663.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020492664.4, "ph": "X", "cat": "fee", "dur": 45.8, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020492664.1, "ph": "X", "cat": "fee", "dur": 46.3, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020492712.0, "ph": "X", "cat": "fee", "dur": 0.6, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)"}, {"pid": 9440, "tid": 27716, "ts": 723020492714.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492716.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492717.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492717.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492719.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492720.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492720.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492720.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492721.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492722.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492721.6, "ph": "X", "cat": "fee", "dur": 1.0, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492722.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492723.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492714.1, "ph": "X", "cat": "fee", "dur": 9.8, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492724.5, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492726.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492727.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492727.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492727.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492728.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492729.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492729.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492730.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492730.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492731.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492730.5, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492731.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492731.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492725.9, "ph": "X", "cat": "fee", "dur": 6.2, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492732.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492733.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492736.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492737.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492737.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492738.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492739.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492739.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492740.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492740.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492741.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492740.5, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492741.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492741.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492733.4, "ph": "X", "cat": "fee", "dur": 8.8, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492742.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492743.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492744.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492745.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492745.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492746.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492746.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492747.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492747.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492748.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492748.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492748.0, "ph": "X", "cat": "fee", "dur": 0.6, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492748.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492749.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492743.5, "ph": "X", "cat": "fee", "dur": 6.0, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492749.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492751.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492752.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492752.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492752.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492753.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492754.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492754.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492754.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492755.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492755.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492755.3, "ph": "X", "cat": "fee", "dur": 0.6, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492756.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492756.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492750.8, "ph": "X", "cat": "fee", "dur": 6.0, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492757.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020492663.1, "ph": "X", "cat": "fee", "dur": 94.9, "name": "find_spec (<frozen importlib._bootstrap_external>:1498)"}, {"pid": 9440, "tid": 27716, "ts": 723020492758.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020492759.2, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)"}, {"pid": 9440, "tid": 27716, "ts": 723020492761.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020492762.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020492763.5, "ph": "X", "cat": "fee", "dur": 58.2, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020492763.2, "ph": "X", "cat": "fee", "dur": 58.9, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020492824.4, "ph": "X", "cat": "fee", "dur": 0.6, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)"}, {"pid": 9440, "tid": 27716, "ts": 723020492827.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492830.4, "ph": "X", "cat": "fee", "dur": 0.7, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492831.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492832.2, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492835.1, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492835.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492836.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492837.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492838.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492839.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492838.3, "ph": "X", "cat": "fee", "dur": 1.3, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492840.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492840.5, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492826.8, "ph": "X", "cat": "fee", "dur": 14.6, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492842.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492845.1, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492845.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492846.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492848.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492849.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492849.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492850.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492851.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492851.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492851.1, "ph": "X", "cat": "fee", "dur": 1.2, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492852.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492853.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492842.6, "ph": "X", "cat": "fee", "dur": 11.7, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492856.1, "ph": "X", "cat": "fee", "dur": 57.0, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020492855.8, "ph": "X", "cat": "fee", "dur": 58.1, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020492855.4, "ph": "X", "cat": "fee", "dur": 60.7, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)"}, {"pid": 9440, "tid": 27716, "ts": 723020492854.8, "ph": "X", "cat": "fee", "dur": 61.8, "name": "_path_isfile (<frozen importlib._bootstrap_external>:154)"}, {"pid": 9440, "tid": 27716, "ts": 723020492918.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492921.5, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492922.4, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492923.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492925.8, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492926.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492927.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492927.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492929.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492932.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492928.8, "ph": "X", "cat": "fee", "dur": 4.5, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492933.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492934.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492918.3, "ph": "X", "cat": "fee", "dur": 16.8, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492937.3, "ph": "X", "cat": "fee", "dur": 38.9, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020492936.9, "ph": "X", "cat": "fee", "dur": 39.9, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020492936.5, "ph": "X", "cat": "fee", "dur": 41.9, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)"}, {"pid": 9440, "tid": 27716, "ts": 723020492936.1, "ph": "X", "cat": "fee", "dur": 42.7, "name": "_path_isfile (<frozen importlib._bootstrap_external>:154)"}, {"pid": 9440, "tid": 27716, "ts": 723020492980.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492983.5, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492984.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492985.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492987.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492987.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492988.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020492989.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020492990.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492991.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020492990.4, "ph": "X", "cat": "fee", "dur": 1.3, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020492992.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020492992.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020492980.4, "ph": "X", "cat": "fee", "dur": 13.1, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020492995.2, "ph": "X", "cat": "fee", "dur": 94.4, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020492994.9, "ph": "X", "cat": "fee", "dur": 95.1, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020492994.6, "ph": "X", "cat": "fee", "dur": 96.5, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)"}, {"pid": 9440, "tid": 27716, "ts": 723020492994.3, "ph": "X", "cat": "fee", "dur": 97.6, "name": "_path_isfile (<frozen importlib._bootstrap_external>:154)"}, {"pid": 9440, "tid": 27716, "ts": 723020493094.5, "ph": "X", "cat": "fee", "dur": 0.7, "name": "__init__ (<frozen importlib._bootstrap_external>:1004)"}, {"pid": 9440, "tid": 27716, "ts": 723020493097.5, "ph": "X", "cat": "fee", "dur": 0.4, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723020493098.5, "ph": "X", "cat": "fee", "dur": 1.3, "name": "nt._path_splitroot"}, {"pid": 9440, "tid": 27716, "ts": 723020493100.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.replace"}, {"pid": 9440, "tid": 27716, "ts": 723020493101.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020493102.0, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020493102.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020493098.1, "ph": "X", "cat": "fee", "dur": 5.1, "name": "_path_isabs (<frozen importlib._bootstrap_external>:167)"}, {"pid": 9440, "tid": 27716, "ts": 723020493105.2, "ph": "X", "cat": "fee", "dur": 1.1, "name": "__init__ (<frozen importlib._bootstrap>:342)"}, {"pid": 9440, "tid": 27716, "ts": 723020493096.8, "ph": "X", "cat": "fee", "dur": 11.0, "name": "spec_from_file_location (<frozen importlib._bootstrap_external>:689)"}, {"pid": 9440, "tid": 27716, "ts": 723020493093.3, "ph": "X", "cat": "fee", "dur": 14.8, "name": "_get_spec (<frozen importlib._bootstrap_external>:1493)"}, {"pid": 9440, "tid": 27716, "ts": 723020492762.3, "ph": "X", "cat": "fee", "dur": 346.3, "name": "find_spec (<frozen importlib._bootstrap_external>:1498)"}, {"pid": 9440, "tid": 27716, "ts": 723020491750.9, "ph": "X", "cat": "fee", "dur": 1358.6, "name": "_get_spec (<frozen importlib._bootstrap_external>:1367)"}, {"pid": 9440, "tid": 27716, "ts": 723020491748.6, "ph": "X", "cat": "fee", "dur": 1361.7, "name": "find_spec (<frozen importlib._bootstrap_external>:1399)"}, {"pid": 9440, "tid": 27716, "ts": 723020493111.9, "ph": "X", "cat": "fee", "dur": 0.6, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020493111.3, "ph": "X", "cat": "fee", "dur": 1.3, "name": "__exit__ (<frozen importlib._bootstrap>:867)"}, {"pid": 9440, "tid": 27716, "ts": 723020491697.7, "ph": "X", "cat": "fee", "dur": 1416.8, "name": "_find_spec (<frozen importlib._bootstrap>:890)"}, {"pid": 9440, "tid": 27716, "ts": 723020493116.2, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020493117.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020493118.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "create_module (<frozen importlib._bootstrap_external>:839)"}, {"pid": 9440, "tid": 27716, "ts": 723020493122.4, "ph": "X", "cat": "fee", "dur": 2.3, "name": "_new_module (<frozen importlib._bootstrap>:35)"}, {"pid": 9440, "tid": 27716, "ts": 723020493125.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020493126.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020493127.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020493128.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "parent (<frozen importlib._bootstrap>:389)"}, {"pid": 9440, "tid": 27716, "ts": 723020493129.1, "ph": "X", "cat": "fee", "dur": 3.7, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020493134.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "has_location (<frozen importlib._bootstrap>:397)"}, {"pid": 9440, "tid": 27716, "ts": 723020493135.0, "ph": "X", "cat": "fee", "dur": 1.4, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020493136.9, "ph": "X", "cat": "fee", "dur": 1.3, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020493140.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020493142.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723020493145.9, "ph": "X", "cat": "fee", "dur": 1.4, "name": "str.rfind"}, {"pid": 9440, "tid": 27716, "ts": 723020493145.2, "ph": "X", "cat": "fee", "dur": 2.3, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 9440, "tid": 27716, "ts": 723020493148.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.rfind"}, {"pid": 9440, "tid": 27716, "ts": 723020493147.7, "ph": "X", "cat": "fee", "dur": 0.8, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 9440, "tid": 27716, "ts": 723020493148.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 9440, "tid": 27716, "ts": 723020493144.2, "ph": "X", "cat": "fee", "dur": 5.3, "name": "builtins.max"}, {"pid": 9440, "tid": 27716, "ts": 723020493142.9, "ph": "X", "cat": "fee", "dur": 8.2, "name": "_path_split (<frozen importlib._bootstrap_external>:127)"}, {"pid": 9440, "tid": 27716, "ts": 723020493151.8, "ph": "X", "cat": "fee", "dur": 0.7, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020493154.1, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020493157.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020493159.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020493160.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020493160.8, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020493163.4, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020493164.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020493164.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020493165.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020493167.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020493167.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020493168.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020493168.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020493170.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020493170.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020493171.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020493169.7, "ph": "X", "cat": "fee", "dur": 2.1, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020493172.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020493172.8, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020493157.4, "ph": "X", "cat": "fee", "dur": 16.4, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020493141.7, "ph": "X", "cat": "fee", "dur": 32.6, "name": "cache_from_source (<frozen importlib._bootstrap_external>:354)"}, {"pid": 9440, "tid": 27716, "ts": 723020493140.0, "ph": "X", "cat": "fee", "dur": 35.0, "name": "_get_cached (<frozen importlib._bootstrap_external>:484)"}, {"pid": 9440, "tid": 27716, "ts": 723020493138.6, "ph": "X", "cat": "fee", "dur": 37.1, "name": "cached (<frozen importlib._bootstrap>:376)"}, {"pid": 9440, "tid": 27716, "ts": 723020493176.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "cached (<frozen importlib._bootstrap>:376)"}, {"pid": 9440, "tid": 27716, "ts": 723020493125.4, "ph": "X", "cat": "fee", "dur": 51.7, "name": "_init_module_attrs (<frozen importlib._bootstrap>:477)"}, {"pid": 9440, "tid": 27716, "ts": 723020493117.3, "ph": "X", "cat": "fee", "dur": 60.2, "name": "module_from_spec (<frozen importlib._bootstrap>:549)"}, {"pid": 9440, "tid": 27716, "ts": 723020493183.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "get_filename (<frozen importlib._bootstrap_external>:1029)"}, {"pid": 9440, "tid": 27716, "ts": 723020493181.8, "ph": "X", "cat": "fee", "dur": 2.4, "name": "_check_name_wrapper (<frozen importlib._bootstrap_external>:516)"}, {"pid": 9440, "tid": 27716, "ts": 723020493187.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723020493191.0, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.rfind"}, {"pid": 9440, "tid": 27716, "ts": 723020493190.4, "ph": "X", "cat": "fee", "dur": 1.4, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 9440, "tid": 27716, "ts": 723020493192.5, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.rfind"}, {"pid": 9440, "tid": 27716, "ts": 723020493192.0, "ph": "X", "cat": "fee", "dur": 1.2, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 9440, "tid": 27716, "ts": 723020493193.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 9440, "tid": 27716, "ts": 723020493189.8, "ph": "X", "cat": "fee", "dur": 4.3, "name": "builtins.max"}, {"pid": 9440, "tid": 27716, "ts": 723020493188.6, "ph": "X", "cat": "fee", "dur": 6.7, "name": "_path_split (<frozen importlib._bootstrap_external>:127)"}, {"pid": 9440, "tid": 27716, "ts": 723020493196.0, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020493197.8, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020493201.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020493203.9, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020493204.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020493205.5, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020493207.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020493208.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020493209.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020493209.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020493211.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020493211.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020493212.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020493212.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020493214.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020493214.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020493215.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020493213.9, "ph": "X", "cat": "fee", "dur": 1.8, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020493216.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020493216.6, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020493200.7, "ph": "X", "cat": "fee", "dur": 16.8, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020493187.4, "ph": "X", "cat": "fee", "dur": 30.5, "name": "cache_from_source (<frozen importlib._bootstrap_external>:354)"}, {"pid": 9440, "tid": 27716, "ts": 723020493220.4, "ph": "X", "cat": "fee", "dur": 69.3, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020493220.0, "ph": "X", "cat": "fee", "dur": 70.0, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020493219.5, "ph": "X", "cat": "fee", "dur": 72.2, "name": "path_stats (<frozen importlib._bootstrap_external>:1075)"}, {"pid": 9440, "tid": 27716, "ts": 723020493295.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020493297.5, "ph": "X", "cat": "fee", "dur": 858.3, "name": "io.open_code"}, {"pid": 9440, "tid": 27716, "ts": 723020494162.4, "ph": "X", "cat": "fee", "dur": 227.6, "name": "_io.BufferedReader.read"}, {"pid": 9440, "tid": 27716, "ts": 723020493295.0, "ph": "X", "cat": "fee", "dur": 1186.5, "name": "get_data (<frozen importlib._bootstrap_external>:1034)"}, {"pid": 9440, "tid": 27716, "ts": 723020494496.8, "ph": "X", "cat": "fee", "dur": 0.7, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020494500.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020494503.2, "ph": "X", "cat": "fee", "dur": 1.1, "name": "type.from_bytes"}, {"pid": 9440, "tid": 27716, "ts": 723020494499.3, "ph": "X", "cat": "fee", "dur": 5.3, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)"}, {"pid": 9440, "tid": 27716, "ts": 723020494493.1, "ph": "X", "cat": "fee", "dur": 12.8, "name": "_classify_pyc (<frozen importlib._bootstrap_external>:553)"}, {"pid": 9440, "tid": 27716, "ts": 723020494513.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020494513.8, "ph": "X", "cat": "fee", "dur": 0.4, "name": "type.from_bytes"}, {"pid": 9440, "tid": 27716, "ts": 723020494513.0, "ph": "X", "cat": "fee", "dur": 1.4, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)"}, {"pid": 9440, "tid": 27716, "ts": 723020494516.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020494522.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "type.from_bytes"}, {"pid": 9440, "tid": 27716, "ts": 723020494516.2, "ph": "X", "cat": "fee", "dur": 6.3, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)"}, {"pid": 9440, "tid": 27716, "ts": 723020494512.1, "ph": "X", "cat": "fee", "dur": 10.9, "name": "_validate_timestamp_pyc (<frozen importlib._bootstrap_external>:586)"}, {"pid": 9440, "tid": 27716, "ts": 723020494526.1, "ph": "X", "cat": "fee", "dur": 2.0, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020494531.0, "ph": "X", "cat": "fee", "dur": 1804.7, "name": "marshal.loads"}, {"pid": 9440, "tid": 27716, "ts": 723020496338.5, "ph": "X", "cat": "fee", "dur": 0.8, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020496343.5, "ph": "X", "cat": "fee", "dur": 2.8, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020496349.0, "ph": "X", "cat": "fee", "dur": 36.9, "name": "_imp._fix_co_filename"}, {"pid": 9440, "tid": 27716, "ts": 723020494530.0, "ph": "X", "cat": "fee", "dur": 1856.4, "name": "_compile_bytecode (<frozen importlib._bootstrap_external>:638)"}, {"pid": 9440, "tid": 27716, "ts": 723020493180.8, "ph": "X", "cat": "fee", "dur": 3207.2, "name": "get_code (<frozen importlib._bootstrap_external>:914)"}, {"pid": 9440, "tid": 27716, "ts": 723020496413.5, "ph": "X", "cat": "fee", "dur": 1.2, "name": "__init__ (<frozen importlib._bootstrap>:143)"}, {"pid": 9440, "tid": 27716, "ts": 723020496418.2, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020496425.8, "ph": "X", "cat": "fee", "dur": 8.1, "name": "_thread.allocate_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020496434.7, "ph": "X", "cat": "fee", "dur": 1.2, "name": "_thread.allocate_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020496425.2, "ph": "X", "cat": "fee", "dur": 11.5, "name": "__init__ (<frozen importlib._bootstrap>:58)"}, {"pid": 9440, "tid": 27716, "ts": 723020496440.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020496417.5, "ph": "X", "cat": "fee", "dur": 23.2, "name": "_get_module_lock (<frozen importlib._bootstrap>:157)"}, {"pid": 9440, "tid": 27716, "ts": 723020496442.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_thread.get_ident"}, {"pid": 9440, "tid": 27716, "ts": 723020496441.8, "ph": "X", "cat": "fee", "dur": 5.7, "name": "acquire (<frozen importlib._bootstrap>:78)"}, {"pid": 9440, "tid": 27716, "ts": 723020496416.7, "ph": "X", "cat": "fee", "dur": 31.1, "name": "__enter__ (<frozen importlib._bootstrap>:147)"}, {"pid": 9440, "tid": 27716, "ts": 723020496449.4, "ph": "X", "cat": "fee", "dur": 0.5, "name": "dict.get"}, {"pid": 9440, "tid": 27716, "ts": 723020496451.5, "ph": "X", "cat": "fee", "dur": 1.0, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020496457.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020496457.3, "ph": "X", "cat": "fee", "dur": 0.9, "name": "__enter__ (<frozen importlib._bootstrap>:863)"}, {"pid": 9440, "tid": 27716, "ts": 723020496461.9, "ph": "X", "cat": "fee", "dur": 2.3, "name": "builtins.locals"}, {"pid": 9440, "tid": 27716, "ts": 723020496464.4, "ph": "X", "cat": "fee", "dur": 3.1, "name": "str.format"}, {"pid": 9440, "tid": 27716, "ts": 723020496468.3, "ph": "X", "cat": "fee", "dur": 1.5, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020496470.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "<lambda> (C:\\Users\\002CSC744\\PycharmProjects\\code_tracer\\venv\\lib\\site-packages\\_distutils_hack\\__init__.py:96)"}, {"pid": 9440, "tid": 27716, "ts": 723020496460.2, "ph": "X", "cat": "fee", "dur": 10.8, "name": "find_spec (C:\\Users\\002CSC744\\PycharmProjects\\code_tracer\\venv\\lib\\site-packages\\_distutils_hack\\__init__.py:89)"}, {"pid": 9440, "tid": 27716, "ts": 723020496472.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020496472.2, "ph": "X", "cat": "fee", "dur": 0.5, "name": "__exit__ (<frozen importlib._bootstrap>:867)"}, {"pid": 9440, "tid": 27716, "ts": 723020496474.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020496473.8, "ph": "X", "cat": "fee", "dur": 0.4, "name": "__enter__ (<frozen importlib._bootstrap>:863)"}, {"pid": 9440, "tid": 27716, "ts": 723020496476.1, "ph": "X", "cat": "fee", "dur": 1.3, "name": "find_spec (C:\\Users\\002CSC744\\PycharmProjects\\code_tracer\\venv\\lib\\site-packages\\_virtualenv.py:54)"}, {"pid": 9440, "tid": 27716, "ts": 723020496477.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020496477.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "__exit__ (<frozen importlib._bootstrap>:867)"}, {"pid": 9440, "tid": 27716, "ts": 723020496478.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020496478.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "__enter__ (<frozen importlib._bootstrap>:863)"}, {"pid": 9440, "tid": 27716, "ts": 723020496480.9, "ph": "X", "cat": "fee", "dur": 3.5, "name": "_imp.is_builtin"}, {"pid": 9440, "tid": 27716, "ts": 723020496480.4, "ph": "X", "cat": "fee", "dur": 4.2, "name": "find_spec (<frozen importlib._bootstrap>:725)"}, {"pid": 9440, "tid": 27716, "ts": 723020496485.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020496484.8, "ph": "X", "cat": "fee", "dur": 0.4, "name": "__exit__ (<frozen importlib._bootstrap>:867)"}, {"pid": 9440, "tid": 27716, "ts": 723020496485.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020496485.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "__enter__ (<frozen importlib._bootstrap>:863)"}, {"pid": 9440, "tid": 27716, "ts": 723020496486.9, "ph": "X", "cat": "fee", "dur": 0.8, "name": "_imp.is_frozen"}, {"pid": 9440, "tid": 27716, "ts": 723020496486.5, "ph": "X", "cat": "fee", "dur": 1.4, "name": "find_spec (<frozen importlib._bootstrap>:800)"}, {"pid": 9440, "tid": 27716, "ts": 723020496488.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020496488.1, "ph": "X", "cat": "fee", "dur": 4.0, "name": "__exit__ (<frozen importlib._bootstrap>:867)"}, {"pid": 9440, "tid": 27716, "ts": 723020496492.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020496492.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "__enter__ (<frozen importlib._bootstrap>:863)"}, {"pid": 9440, "tid": 27716, "ts": 723020496496.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020496497.5, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)"}, {"pid": 9440, "tid": 27716, "ts": 723020496499.3, "ph": "X", "cat": "fee", "dur": 0.6, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020496501.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020496503.2, "ph": "X", "cat": "fee", "dur": 135.3, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020496502.4, "ph": "X", "cat": "fee", "dur": 136.7, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020496642.1, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)"}, {"pid": 9440, "tid": 27716, "ts": 723020496646.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496651.6, "ph": "X", "cat": "fee", "dur": 1.4, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496653.4, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496654.4, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496659.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496659.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496660.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496661.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020496663.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496664.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496662.8, "ph": "X", "cat": "fee", "dur": 1.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020496665.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496665.9, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020496645.7, "ph": "X", "cat": "fee", "dur": 21.2, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020496668.4, "ph": "X", "cat": "fee", "dur": 0.7, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020496670.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496672.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496672.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496673.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496674.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496675.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496675.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496675.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020496676.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496677.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496676.6, "ph": "X", "cat": "fee", "dur": 0.8, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020496677.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496677.9, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020496670.4, "ph": "X", "cat": "fee", "dur": 8.2, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020496679.4, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020496680.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496682.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496682.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496683.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496684.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496684.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496687.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496688.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020496688.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496689.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496688.7, "ph": "X", "cat": "fee", "dur": 0.8, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020496689.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496690.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020496680.7, "ph": "X", "cat": "fee", "dur": 9.8, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020496691.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020496692.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496693.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496694.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496694.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496695.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496696.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496696.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496696.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020496697.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496697.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496697.2, "ph": "X", "cat": "fee", "dur": 0.8, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020496698.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496698.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020496692.3, "ph": "X", "cat": "fee", "dur": 6.6, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020496699.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020496700.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496701.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496702.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496702.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496703.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496703.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496704.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496704.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020496705.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496705.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496705.0, "ph": "X", "cat": "fee", "dur": 0.8, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020496706.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496706.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020496700.4, "ph": "X", "cat": "fee", "dur": 6.3, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020496707.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020496500.6, "ph": "X", "cat": "fee", "dur": 207.3, "name": "find_spec (<frozen importlib._bootstrap_external>:1498)"}, {"pid": 9440, "tid": 27716, "ts": 723020496709.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020496710.2, "ph": "X", "cat": "fee", "dur": 0.9, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)"}, {"pid": 9440, "tid": 27716, "ts": 723020496711.7, "ph": "X", "cat": "fee", "dur": 1.1, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020496714.0, "ph": "X", "cat": "fee", "dur": 0.7, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020496717.5, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020496716.9, "ph": "X", "cat": "fee", "dur": 1.4, "name": "_get_module_path (<frozen zipimport>:308)"}, {"pid": 9440, "tid": 27716, "ts": 723020496716.1, "ph": "X", "cat": "fee", "dur": 5.0, "name": "_get_module_info (<frozen zipimport>:321)"}, {"pid": 9440, "tid": 27716, "ts": 723020496723.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020496723.4, "ph": "X", "cat": "fee", "dur": 0.6, "name": "_get_module_path (<frozen zipimport>:308)"}, {"pid": 9440, "tid": 27716, "ts": 723020496724.3, "ph": "X", "cat": "fee", "dur": 0.6, "name": "_is_dir (<frozen zipimport>:312)"}, {"pid": 9440, "tid": 27716, "ts": 723020496715.4, "ph": "X", "cat": "fee", "dur": 9.8, "name": "find_loader (<frozen zipimport>:109)"}, {"pid": 9440, "tid": 27716, "ts": 723020496727.1, "ph": "X", "cat": "fee", "dur": 2.0, "name": "__init__ (<frozen importlib._bootstrap>:342)"}, {"pid": 9440, "tid": 27716, "ts": 723020496713.7, "ph": "X", "cat": "fee", "dur": 15.9, "name": "_legacy_get_spec (<frozen importlib._bootstrap_external>:1352)"}, {"pid": 9440, "tid": 27716, "ts": 723020496730.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.extend"}, {"pid": 9440, "tid": 27716, "ts": 723020496731.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020496731.7, "ph": "X", "cat": "fee", "dur": 0.6, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)"}, {"pid": 9440, "tid": 27716, "ts": 723020496732.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020496733.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020496734.7, "ph": "X", "cat": "fee", "dur": 58.1, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020496734.3, "ph": "X", "cat": "fee", "dur": 58.8, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020496795.5, "ph": "X", "cat": "fee", "dur": 0.6, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)"}, {"pid": 9440, "tid": 27716, "ts": 723020496798.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496801.0, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496801.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496802.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496804.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496804.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496805.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496805.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020496807.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496807.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496806.7, "ph": "X", "cat": "fee", "dur": 1.0, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020496808.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496808.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020496797.8, "ph": "X", "cat": "fee", "dur": 11.2, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020496810.1, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020496812.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496813.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496814.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496814.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496815.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496815.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496816.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496816.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020496817.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496817.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496817.1, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020496818.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496818.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020496812.0, "ph": "X", "cat": "fee", "dur": 6.8, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020496819.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020496820.6, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496822.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496824.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496825.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496826.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496826.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496827.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496827.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020496828.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496828.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496827.9, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020496828.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496829.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020496820.4, "ph": "X", "cat": "fee", "dur": 9.2, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020496830.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020496831.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496832.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496832.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496833.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496834.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496834.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496834.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496835.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020496835.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496836.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496835.7, "ph": "X", "cat": "fee", "dur": 0.8, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020496836.7, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496837.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020496831.0, "ph": "X", "cat": "fee", "dur": 6.4, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020496837.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020496838.9, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496840.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496840.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496840.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496841.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496842.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496842.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496842.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020496843.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496843.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496843.3, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020496844.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496844.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020496838.7, "ph": "X", "cat": "fee", "dur": 6.2, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020496845.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020496733.4, "ph": "X", "cat": "fee", "dur": 112.7, "name": "find_spec (<frozen importlib._bootstrap_external>:1498)"}, {"pid": 9440, "tid": 27716, "ts": 723020496847.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020496848.2, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)"}, {"pid": 9440, "tid": 27716, "ts": 723020496849.1, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020496851.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020496852.7, "ph": "X", "cat": "fee", "dur": 46.1, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020496852.5, "ph": "X", "cat": "fee", "dur": 46.6, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020496901.0, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)"}, {"pid": 9440, "tid": 27716, "ts": 723020496903.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496905.8, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496906.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496907.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496908.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496909.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496909.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496924.0, "ph": "X", "cat": "fee", "dur": 0.4, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020496925.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496925.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496924.9, "ph": "X", "cat": "fee", "dur": 0.8, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020496926.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496926.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020496903.2, "ph": "X", "cat": "fee", "dur": 23.6, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020496927.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020496928.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496929.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496930.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496930.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496931.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496931.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496931.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496932.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020496932.9, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496933.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496932.7, "ph": "X", "cat": "fee", "dur": 0.6, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020496933.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496933.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020496928.6, "ph": "X", "cat": "fee", "dur": 5.5, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020496934.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020496935.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496936.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496936.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496937.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496937.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496938.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496938.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496938.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020496939.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496939.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496939.2, "ph": "X", "cat": "fee", "dur": 0.62, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020496940.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496942.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020496935.3, "ph": "X", "cat": "fee", "dur": 7.4, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020496943.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020496944.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496945.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496945.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496945.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496946.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496946.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496947.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496947.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020496947.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496948.2, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496947.8, "ph": "X", "cat": "fee", "dur": 0.6, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020496948.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496948.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020496943.9, "ph": "X", "cat": "fee", "dur": 5.2, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020496949.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020496950.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496951.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496951.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496951.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496952.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496952.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496953.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020496953.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020496954.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496954.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020496953.9, "ph": "X", "cat": "fee", "dur": 0.6, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020496954.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020496954.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020496950.2, "ph": "X", "cat": "fee", "dur": 5.0, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020496955.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020496851.4, "ph": "X", "cat": "fee", "dur": 104.8, "name": "find_spec (<frozen importlib._bootstrap_external>:1498)"}, {"pid": 9440, "tid": 27716, "ts": 723020496957.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020496957.5, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)"}, {"pid": 9440, "tid": 27716, "ts": 723020496958.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020496958.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020496959.7, "ph": "X", "cat": "fee", "dur": 42.9, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020496959.5, "ph": "X", "cat": "fee", "dur": 43.4, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020497004.3, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)"}, {"pid": 9440, "tid": 27716, "ts": 723020497006.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020497008.1, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497008.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497009.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497010.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497011.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497013.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497013.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020497014.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497014.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497014.2, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020497015.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020497015.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020497005.9, "ph": "X", "cat": "fee", "dur": 10.1, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020497016.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020497017.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020497019.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497019.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497019.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497020.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497020.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497021.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497021.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020497022.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497022.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497021.9, "ph": "X", "cat": "fee", "dur": 0.6, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020497022.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020497023.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020497017.8, "ph": "X", "cat": "fee", "dur": 5.5, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020497023.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020497024.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020497025.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497026.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497026.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497027.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497027.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497027.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497028.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020497028.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497028.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497028.5, "ph": "X", "cat": "fee", "dur": 0.6, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020497029.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020497029.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020497024.6, "ph": "X", "cat": "fee", "dur": 5.3, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020497030.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020497031.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020497032.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497032.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497032.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497033.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497033.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497034.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497035.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020497036.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497036.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497036.2, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020497037.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020497037.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020497030.9, "ph": "X", "cat": "fee", "dur": 6.7, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020497038.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020497038.9, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020497040.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497040.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497040.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497041.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497041.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497042.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497042.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020497042.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497043.2, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497042.7, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020497043.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020497043.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020497038.8, "ph": "X", "cat": "fee", "dur": 5.3, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020497044.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020496958.7, "ph": "X", "cat": "fee", "dur": 86.3, "name": "find_spec (<frozen importlib._bootstrap_external>:1498)"}, {"pid": 9440, "tid": 27716, "ts": 723020497045.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020497046.2, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)"}, {"pid": 9440, "tid": 27716, "ts": 723020497047.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020497047.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)"}, {"pid": 9440, "tid": 27716, "ts": 723020497047.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020497048.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020497049.2, "ph": "X", "cat": "fee", "dur": 41.7, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020497049.1, "ph": "X", "cat": "fee", "dur": 42.1, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020497092.5, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)"}, {"pid": 9440, "tid": 27716, "ts": 723020497094.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020497096.0, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497096.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497097.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497098.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497099.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497099.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497099.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020497100.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497100.9, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497100.4, "ph": "X", "cat": "fee", "dur": 0.6, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020497101.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020497101.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020497093.9, "ph": "X", "cat": "fee", "dur": 8.3, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020497104.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020497106.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020497107.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497107.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497107.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497108.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497109.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497109.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497109.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020497110.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497110.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020497110.2, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020497111.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020497111.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020497106.0, "ph": "X", "cat": "fee", "dur": 5.7, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020497112.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020497114.4, "ph": "X", "cat": "fee", "dur": 71.7, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020497114.2, "ph": "X", "cat": "fee", "dur": 72.2, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020497114.0, "ph": "X", "cat": "fee", "dur": 73.6, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)"}, {"pid": 9440, "tid": 27716, "ts": 723020497113.5, "ph": "X", "cat": "fee", "dur": 74.8, "name": "_path_isfile (<frozen importlib._bootstrap_external>:154)"}, {"pid": 9440, "tid": 27716, "ts": 723020497190.2, "ph": "X", "cat": "fee", "dur": 0.6, "name": "__init__ (<frozen importlib._bootstrap_external>:1153)"}, {"pid": 9440, "tid": 27716, "ts": 723020497192.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723020497193.4, "ph": "X", "cat": "fee", "dur": 1.2, "name": "nt._path_splitroot"}, {"pid": 9440, "tid": 27716, "ts": 723020497195.1, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.replace"}, {"pid": 9440, "tid": 27716, "ts": 723020497195.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020497196.4, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497197.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020497193.1, "ph": "X", "cat": "fee", "dur": 4.3, "name": "_path_isabs (<frozen importlib._bootstrap_external>:167)"}, {"pid": 9440, "tid": 27716, "ts": 723020497199.0, "ph": "X", "cat": "fee", "dur": 0.8, "name": "__init__ (<frozen importlib._bootstrap>:342)"}, {"pid": 9440, "tid": 27716, "ts": 723020497192.0, "ph": "X", "cat": "fee", "dur": 9.5, "name": "spec_from_file_location (<frozen importlib._bootstrap_external>:689)"}, {"pid": 9440, "tid": 27716, "ts": 723020497189.1, "ph": "X", "cat": "fee", "dur": 12.6, "name": "_get_spec (<frozen importlib._bootstrap_external>:1493)"}, {"pid": 9440, "tid": 27716, "ts": 723020497048.3, "ph": "X", "cat": "fee", "dur": 153.9, "name": "find_spec (<frozen importlib._bootstrap_external>:1498)"}, {"pid": 9440, "tid": 27716, "ts": 723020496495.3, "ph": "X", "cat": "fee", "dur": 707.6, "name": "_get_spec (<frozen importlib._bootstrap_external>:1367)"}, {"pid": 9440, "tid": 27716, "ts": 723020496494.0, "ph": "X", "cat": "fee", "dur": 709.7, "name": "find_spec (<frozen importlib._bootstrap_external>:1399)"}, {"pid": 9440, "tid": 27716, "ts": 723020497204.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020497204.4, "ph": "X", "cat": "fee", "dur": 0.7, "name": "__exit__ (<frozen importlib._bootstrap>:867)"}, {"pid": 9440, "tid": 27716, "ts": 723020496454.1, "ph": "X", "cat": "fee", "dur": 752.4, "name": "_find_spec (<frozen importlib._bootstrap>:890)"}, {"pid": 9440, "tid": 27716, "ts": 723020497207.8, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020497209.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020497211.2, "ph": "X", "cat": "fee", "dur": 44968.9, "name": "_imp.create_dynamic"}, {"pid": 9440, "tid": 27716, "ts": 723020497211.0, "ph": "X", "cat": "fee", "dur": 44971.7, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:211)"}, {"pid": 9440, "tid": 27716, "ts": 723020542197.7, "ph": "X", "cat": "fee", "dur": 3.8, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020497209.9, "ph": "X", "cat": "fee", "dur": 44992.5, "name": "create_module (<frozen importlib._bootstrap_external>:1164)"}, {"pid": 9440, "tid": 27716, "ts": 723020542207.1, "ph": "X", "cat": "fee", "dur": 1.6, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020542209.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020542211.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020542215.7, "ph": "X", "cat": "fee", "dur": 1.8, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020542213.7, "ph": "X", "cat": "fee", "dur": 12.5, "name": "parent (<frozen importlib._bootstrap>:389)"}, {"pid": 9440, "tid": 27716, "ts": 723020542227.5, "ph": "X", "cat": "fee", "dur": 8.5, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020542237.6, "ph": "X", "cat": "fee", "dur": 0.9, "name": "has_location (<frozen importlib._bootstrap>:397)"}, {"pid": 9440, "tid": 27716, "ts": 723020542238.9, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020542239.7, "ph": "X", "cat": "fee", "dur": 3.0, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020542249.6, "ph": "X", "cat": "fee", "dur": 1.8, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020542252.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020542246.8, "ph": "X", "cat": "fee", "dur": 6.7, "name": "_get_cached (<frozen importlib._bootstrap_external>:484)"}, {"pid": 9440, "tid": 27716, "ts": 723020542243.7, "ph": "X", "cat": "fee", "dur": 10.6, "name": "cached (<frozen importlib._bootstrap>:376)"}, {"pid": 9440, "tid": 27716, "ts": 723020542205.4, "ph": "X", "cat": "fee", "dur": 49.5, "name": "_init_module_attrs (<frozen importlib._bootstrap>:477)"}, {"pid": 9440, "tid": 27716, "ts": 723020497208.8, "ph": "X", "cat": "fee", "dur": 45046.9, "name": "module_from_spec (<frozen importlib._bootstrap>:549)"}, {"pid": 9440, "tid": 27716, "ts": 723020542262.5, "ph": "X", "cat": "fee", "dur": 1.4, "name": "_imp.exec_dynamic"}, {"pid": 9440, "tid": 27716, "ts": 723020542261.6, "ph": "X", "cat": "fee", "dur": 2.4, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:211)"}, {"pid": 9440, "tid": 27716, "ts": 723020542265.7, "ph": "X", "cat": "fee", "dur": 0.7, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020542259.5, "ph": "X", "cat": "fee", "dur": 7.4, "name": "exec_module (<frozen importlib._bootstrap_external>:1172)"}, {"pid": 9440, "tid": 27716, "ts": 723020542268.3, "ph": "X", "cat": "fee", "dur": 0.9, "name": "dict.pop"}, {"pid": 9440, "tid": 27716, "ts": 723020542270.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020497207.4, "ph": "X", "cat": "fee", "dur": 45064.6, "name": "_load_unlocked (<frozen importlib._bootstrap>:650)"}, {"pid": 9440, "tid": 27716, "ts": 723020496450.9, "ph": "X", "cat": "fee", "dur": 45822.4, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:956)"}, {"pid": 9440, "tid": 27716, "ts": 723020542279.3, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_thread.get_ident"}, {"pid": 9440, "tid": 27716, "ts": 723020542277.7, "ph": "X", "cat": "fee", "dur": 10.8, "name": "release (<frozen importlib._bootstrap>:103)"}, {"pid": 9440, "tid": 27716, "ts": 723020542276.0, "ph": "X", "cat": "fee", "dur": 13.0, "name": "__exit__ (<frozen importlib._bootstrap>:151)"}, {"pid": 9440, "tid": 27716, "ts": 723020542292.1, "ph": "X", "cat": "fee", "dur": 0.8, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020542293.6, "ph": "X", "cat": "fee", "dur": 0.6, "name": "dict.get"}, {"pid": 9440, "tid": 27716, "ts": 723020542295.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020542291.5, "ph": "X", "cat": "fee", "dur": 4.7, "name": "cb (<frozen importlib._bootstrap>:176)"}, {"pid": 9440, "tid": 27716, "ts": 723020496411.4, "ph": "X", "cat": "fee", "dur": 45893.6, "name": "_find_and_load (<frozen importlib._bootstrap>:986)"}, {"pid": 9440, "tid": 27716, "ts": 723020542315.9, "ph": "X", "cat": "fee", "dur": 0.9, "name": "__init__ (<frozen importlib._bootstrap>:143)"}, {"pid": 9440, "tid": 27716, "ts": 723020542319.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020542325.1, "ph": "X", "cat": "fee", "dur": 6.1, "name": "_thread.allocate_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020542331.9, "ph": "X", "cat": "fee", "dur": 1.8, "name": "_thread.allocate_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020542324.5, "ph": "X", "cat": "fee", "dur": 10.2, "name": "__init__ (<frozen importlib._bootstrap>:58)"}, {"pid": 9440, "tid": 27716, "ts": 723020542339.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020542318.9, "ph": "X", "cat": "fee", "dur": 20.8, "name": "_get_module_lock (<frozen importlib._bootstrap>:157)"}, {"pid": 9440, "tid": 27716, "ts": 723020542341.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_thread.get_ident"}, {"pid": 9440, "tid": 27716, "ts": 723020542341.1, "ph": "X", "cat": "fee", "dur": 5.0, "name": "acquire (<frozen importlib._bootstrap>:78)"}, {"pid": 9440, "tid": 27716, "ts": 723020542318.0, "ph": "X", "cat": "fee", "dur": 28.4, "name": "__enter__ (<frozen importlib._bootstrap>:147)"}, {"pid": 9440, "tid": 27716, "ts": 723020542347.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "dict.get"}, {"pid": 9440, "tid": 27716, "ts": 723020542349.6, "ph": "X", "cat": "fee", "dur": 1.0, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020542358.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020542358.2, "ph": "X", "cat": "fee", "dur": 1.2, "name": "__enter__ (<frozen importlib._bootstrap>:863)"}, {"pid": 9440, "tid": 27716, "ts": 723020542363.9, "ph": "X", "cat": "fee", "dur": 1.1, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020542362.8, "ph": "X", "cat": "fee", "dur": 2.5, "name": "find_spec (C:\\Users\\002CSC744\\PycharmProjects\\code_tracer\\venv\\lib\\site-packages\\_distutils_hack\\__init__.py:89)"}, {"pid": 9440, "tid": 27716, "ts": 723020542366.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020542366.3, "ph": "X", "cat": "fee", "dur": 0.7, "name": "__exit__ (<frozen importlib._bootstrap>:867)"}, {"pid": 9440, "tid": 27716, "ts": 723020542368.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020542368.7, "ph": "X", "cat": "fee", "dur": 3.6, "name": "__enter__ (<frozen importlib._bootstrap>:863)"}, {"pid": 9440, "tid": 27716, "ts": 723020542376.0, "ph": "X", "cat": "fee", "dur": 1.6, "name": "find_spec (C:\\Users\\002CSC744\\PycharmProjects\\code_tracer\\venv\\lib\\site-packages\\_virtualenv.py:54)"}, {"pid": 9440, "tid": 27716, "ts": 723020542378.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020542378.2, "ph": "X", "cat": "fee", "dur": 0.7, "name": "__exit__ (<frozen importlib._bootstrap>:867)"}, {"pid": 9440, "tid": 27716, "ts": 723020542380.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020542380.0, "ph": "X", "cat": "fee", "dur": 0.6, "name": "__enter__ (<frozen importlib._bootstrap>:863)"}, {"pid": 9440, "tid": 27716, "ts": 723020542382.5, "ph": "X", "cat": "fee", "dur": 0.8, "name": "find_spec (<frozen importlib._bootstrap>:725)"}, {"pid": 9440, "tid": 27716, "ts": 723020542384.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020542383.7, "ph": "X", "cat": "fee", "dur": 0.7, "name": "__exit__ (<frozen importlib._bootstrap>:867)"}, {"pid": 9440, "tid": 27716, "ts": 723020542385.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020542385.2, "ph": "X", "cat": "fee", "dur": 0.6, "name": "__enter__ (<frozen importlib._bootstrap>:863)"}, {"pid": 9440, "tid": 27716, "ts": 723020542387.5, "ph": "X", "cat": "fee", "dur": 1.4, "name": "_imp.is_frozen"}, {"pid": 9440, "tid": 27716, "ts": 723020542386.8, "ph": "X", "cat": "fee", "dur": 2.4, "name": "find_spec (<frozen importlib._bootstrap>:800)"}, {"pid": 9440, "tid": 27716, "ts": 723020542389.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020542389.6, "ph": "X", "cat": "fee", "dur": 0.6, "name": "__exit__ (<frozen importlib._bootstrap>:867)"}, {"pid": 9440, "tid": 27716, "ts": 723020542391.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020542391.1, "ph": "X", "cat": "fee", "dur": 0.7, "name": "__enter__ (<frozen importlib._bootstrap>:863)"}, {"pid": 9440, "tid": 27716, "ts": 723020542396.1, "ph": "X", "cat": "fee", "dur": 0.6, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020542405.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020542406.6, "ph": "X", "cat": "fee", "dur": 1.1, "name": "str.replace"}, {"pid": 9440, "tid": 27716, "ts": 723020542410.5, "ph": "X", "cat": "fee", "dur": 130.9, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020542409.1, "ph": "X", "cat": "fee", "dur": 132.8, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020542404.4, "ph": "X", "cat": "fee", "dur": 145.8, "name": "__init__ (<frozen zipimport>:63)"}, {"pid": 9440, "tid": 27716, "ts": 723020542560.3, "ph": "X", "cat": "fee", "dur": 76.9, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020542559.4, "ph": "X", "cat": "fee", "dur": 78.2, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020542558.6, "ph": "X", "cat": "fee", "dur": 80.5, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)"}, {"pid": 9440, "tid": 27716, "ts": 723020542557.7, "ph": "X", "cat": "fee", "dur": 82.5, "name": "_path_isdir (<frozen importlib._bootstrap_external>:159)"}, {"pid": 9440, "tid": 27716, "ts": 723020542649.1, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1465)"}, {"pid": 9440, "tid": 27716, "ts": 723020542650.1, "ph": "X", "cat": "fee", "dur": 0.7, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1465)"}, {"pid": 9440, "tid": 27716, "ts": 723020542651.0, "ph": "X", "cat": "fee", "dur": 0.4, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1465)"}, {"pid": 9440, "tid": 27716, "ts": 723020542647.8, "ph": "X", "cat": "fee", "dur": 5.9, "name": "list.extend"}, {"pid": 9440, "tid": 27716, "ts": 723020542656.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1465)"}, {"pid": 9440, "tid": 27716, "ts": 723020542657.0, "ph": "X", "cat": "fee", "dur": 0.4, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1465)"}, {"pid": 9440, "tid": 27716, "ts": 723020542657.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1465)"}, {"pid": 9440, "tid": 27716, "ts": 723020542655.8, "ph": "X", "cat": "fee", "dur": 2.9, "name": "list.extend"}, {"pid": 9440, "tid": 27716, "ts": 723020542660.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1465)"}, {"pid": 9440, "tid": 27716, "ts": 723020542660.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "<genexpr> (<frozen importlib._bootstrap_external>:1465)"}, {"pid": 9440, "tid": 27716, "ts": 723020542659.8, "ph": "X", "cat": "fee", "dur": 1.8, "name": "list.extend"}, {"pid": 9440, "tid": 27716, "ts": 723020542664.8, "ph": "X", "cat": "fee", "dur": 3.4, "name": "nt._path_splitroot"}, {"pid": 9440, "tid": 27716, "ts": 723020542669.1, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.replace"}, {"pid": 9440, "tid": 27716, "ts": 723020542670.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020542671.6, "ph": "X", "cat": "fee", "dur": 1.1, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020542673.1, "ph": "X", "cat": "fee", "dur": 0.8, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020542663.8, "ph": "X", "cat": "fee", "dur": 10.3, "name": "_path_isabs (<frozen importlib._bootstrap_external>:167)"}, {"pid": 9440, "tid": 27716, "ts": 723020542644.3, "ph": "X", "cat": "fee", "dur": 33.6, "name": "__init__ (<frozen importlib._bootstrap_external>:1459)"}, {"pid": 9440, "tid": 27716, "ts": 723020542556.8, "ph": "X", "cat": "fee", "dur": 122.1, "name": "path_hook_for_FileFinder (<frozen importlib._bootstrap_external>:1590)"}, {"pid": 9440, "tid": 27716, "ts": 723020542401.6, "ph": "X", "cat": "fee", "dur": 278.2, "name": "_path_hooks (<frozen importlib._bootstrap_external>:1317)"}, {"pid": 9440, "tid": 27716, "ts": 723020542397.8, "ph": "X", "cat": "fee", "dur": 295.2, "name": "_path_importer_cache (<frozen importlib._bootstrap_external>:1330)"}, {"pid": 9440, "tid": 27716, "ts": 723020542694.4, "ph": "X", "cat": "fee", "dur": 1.6, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020542697.7, "ph": "X", "cat": "fee", "dur": 0.9, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020542700.3, "ph": "X", "cat": "fee", "dur": 76.5, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020542699.9, "ph": "X", "cat": "fee", "dur": 77.3, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020542782.8, "ph": "X", "cat": "fee", "dur": 244.2, "name": "nt.listdir"}, {"pid": 9440, "tid": 27716, "ts": 723020543028.9, "ph": "X", "cat": "fee", "dur": 1.8, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543033.1, "ph": "X", "cat": "fee", "dur": 0.9, "name": "str.partition"}, {"pid": 9440, "tid": 27716, "ts": 723020543035.7, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543036.7, "ph": "X", "cat": "fee", "dur": 3.3, "name": "str.format"}, {"pid": 9440, "tid": 27716, "ts": 723020543041.1, "ph": "X", "cat": "fee", "dur": 0.7, "name": "set.add"}, {"pid": 9440, "tid": 27716, "ts": 723020543042.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.partition"}, {"pid": 9440, "tid": 27716, "ts": 723020543043.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543043.9, "ph": "X", "cat": "fee", "dur": 0.9, "name": "str.format"}, {"pid": 9440, "tid": 27716, "ts": 723020543045.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "set.add"}, {"pid": 9440, "tid": 27716, "ts": 723020543045.8, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.partition"}, {"pid": 9440, "tid": 27716, "ts": 723020543046.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543047.1, "ph": "X", "cat": "fee", "dur": 0.9, "name": "str.format"}, {"pid": 9440, "tid": 27716, "ts": 723020543048.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "set.add"}, {"pid": 9440, "tid": 27716, "ts": 723020543049.0, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.partition"}, {"pid": 9440, "tid": 27716, "ts": 723020543049.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543050.3, "ph": "X", "cat": "fee", "dur": 0.9, "name": "str.format"}, {"pid": 9440, "tid": 27716, "ts": 723020543051.5, "ph": "X", "cat": "fee", "dur": 0.4, "name": "set.add"}, {"pid": 9440, "tid": 27716, "ts": 723020543052.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.partition"}, {"pid": 9440, "tid": 27716, "ts": 723020543053.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543053.5, "ph": "X", "cat": "fee", "dur": 0.9, "name": "str.format"}, {"pid": 9440, "tid": 27716, "ts": 723020543054.7, "ph": "X", "cat": "fee", "dur": 0.9, "name": "set.add"}, {"pid": 9440, "tid": 27716, "ts": 723020543055.9, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.partition"}, {"pid": 9440, "tid": 27716, "ts": 723020543056.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543057.3, "ph": "X", "cat": "fee", "dur": 0.8, "name": "str.format"}, {"pid": 9440, "tid": 27716, "ts": 723020543058.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "set.add"}, {"pid": 9440, "tid": 27716, "ts": 723020543059.1, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.partition"}, {"pid": 9440, "tid": 27716, "ts": 723020543060.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543060.5, "ph": "X", "cat": "fee", "dur": 0.8, "name": "str.format"}, {"pid": 9440, "tid": 27716, "ts": 723020543061.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "set.add"}, {"pid": 9440, "tid": 27716, "ts": 723020543062.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.partition"}, {"pid": 9440, "tid": 27716, "ts": 723020543063.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543063.5, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.format"}, {"pid": 9440, "tid": 27716, "ts": 723020543064.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "set.add"}, {"pid": 9440, "tid": 27716, "ts": 723020543065.1, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.partition"}, {"pid": 9440, "tid": 27716, "ts": 723020543066.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543066.4, "ph": "X", "cat": "fee", "dur": 0.9, "name": "str.format"}, {"pid": 9440, "tid": 27716, "ts": 723020543067.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "set.add"}, {"pid": 9440, "tid": 27716, "ts": 723020543068.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.partition"}, {"pid": 9440, "tid": 27716, "ts": 723020543069.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543069.4, "ph": "X", "cat": "fee", "dur": 0.7, "name": "str.format"}, {"pid": 9440, "tid": 27716, "ts": 723020543071.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "set.add"}, {"pid": 9440, "tid": 27716, "ts": 723020543071.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.partition"}, {"pid": 9440, "tid": 27716, "ts": 723020543072.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "set.add"}, {"pid": 9440, "tid": 27716, "ts": 723020543073.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.partition"}, {"pid": 9440, "tid": 27716, "ts": 723020543074.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543074.6, "ph": "X", "cat": "fee", "dur": 0.9, "name": "str.format"}, {"pid": 9440, "tid": 27716, "ts": 723020543075.8, "ph": "X", "cat": "fee", "dur": 0.4, "name": "set.add"}, {"pid": 9440, "tid": 27716, "ts": 723020543076.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.partition"}, {"pid": 9440, "tid": 27716, "ts": 723020543077.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543078.0, "ph": "X", "cat": "fee", "dur": 0.9, "name": "str.format"}, {"pid": 9440, "tid": 27716, "ts": 723020543079.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "set.add"}, {"pid": 9440, "tid": 27716, "ts": 723020543079.9, "ph": "X", "cat": "fee", "dur": 1.0, "name": "str.partition"}, {"pid": 9440, "tid": 27716, "ts": 723020543081.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543081.9, "ph": "X", "cat": "fee", "dur": 0.8, "name": "str.format"}, {"pid": 9440, "tid": 27716, "ts": 723020543083.0, "ph": "X", "cat": "fee", "dur": 0.4, "name": "set.add"}, {"pid": 9440, "tid": 27716, "ts": 723020543083.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.partition"}, {"pid": 9440, "tid": 27716, "ts": 723020543084.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543085.1, "ph": "X", "cat": "fee", "dur": 0.8, "name": "str.format"}, {"pid": 9440, "tid": 27716, "ts": 723020543086.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "set.add"}, {"pid": 9440, "tid": 27716, "ts": 723020543086.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.partition"}, {"pid": 9440, "tid": 27716, "ts": 723020543087.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "set.add"}, {"pid": 9440, "tid": 27716, "ts": 723020543090.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543093.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543094.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543095.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543096.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543096.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543108.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543108.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543109.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543110.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543110.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543111.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543112.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543112.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543113.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543114.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543114.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723020543092.6, "ph": "X", "cat": "fee", "dur": 22.8, "name": "<setcomp> (<frozen importlib._bootstrap_external>:1578)"}, {"pid": 9440, "tid": 27716, "ts": 723020542781.3, "ph": "X", "cat": "fee", "dur": 335.6, "name": "_fill_cache (<frozen importlib._bootstrap_external>:1549)"}, {"pid": 9440, "tid": 27716, "ts": 723020543119.3, "ph": "X", "cat": "fee", "dur": 1.8, "name": "_relax_case (<frozen importlib._bootstrap_external>:64)"}, {"pid": 9440, "tid": 27716, "ts": 723020543125.3, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020543131.5, "ph": "X", "cat": "fee", "dur": 0.8, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543132.7, "ph": "X", "cat": "fee", "dur": 0.7, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543134.2, "ph": "X", "cat": "fee", "dur": 1.1, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020543141.5, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543142.4, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543143.7, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543145.1, "ph": "X", "cat": "fee", "dur": 0.4, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020543148.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020543149.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020543147.2, "ph": "X", "cat": "fee", "dur": 2.4, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020543150.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020543151.5, "ph": "X", "cat": "fee", "dur": 1.0, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020543124.2, "ph": "X", "cat": "fee", "dur": 28.9, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020543156.1, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020543159.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020543162.8, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543163.7, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543164.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020543167.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543168.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543168.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543169.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020543210.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020543210.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020543170.6, "ph": "X", "cat": "fee", "dur": 40.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020543211.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020543212.5, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020543159.4, "ph": "X", "cat": "fee", "dur": 54.0, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020543214.7, "ph": "X", "cat": "fee", "dur": 0.6, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020543217.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020543220.0, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543220.8, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543221.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020543223.9, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543224.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543225.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543226.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020543227.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020543228.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020543227.3, "ph": "X", "cat": "fee", "dur": 1.4, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020543229.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020543229.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020543217.0, "ph": "X", "cat": "fee", "dur": 13.5, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020543231.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020543235.4, "ph": "X", "cat": "fee", "dur": 137.1, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020543234.8, "ph": "X", "cat": "fee", "dur": 138.1, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020543234.3, "ph": "X", "cat": "fee", "dur": 140.3, "name": "_path_is_mode_type (<frozen importlib._bootstrap_external>:145)"}, {"pid": 9440, "tid": 27716, "ts": 723020543233.7, "ph": "X", "cat": "fee", "dur": 142.1, "name": "_path_isfile (<frozen importlib._bootstrap_external>:154)"}, {"pid": 9440, "tid": 27716, "ts": 723020543379.1, "ph": "X", "cat": "fee", "dur": 1.3, "name": "__init__ (<frozen importlib._bootstrap_external>:1004)"}, {"pid": 9440, "tid": 27716, "ts": 723020543383.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723020543385.2, "ph": "X", "cat": "fee", "dur": 2.6, "name": "nt._path_splitroot"}, {"pid": 9440, "tid": 27716, "ts": 723020543389.2, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.replace"}, {"pid": 9440, "tid": 27716, "ts": 723020543390.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020543391.1, "ph": "X", "cat": "fee", "dur": 0.9, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543392.4, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543384.7, "ph": "X", "cat": "fee", "dur": 8.6, "name": "_path_isabs (<frozen importlib._bootstrap_external>:167)"}, {"pid": 9440, "tid": 27716, "ts": 723020543396.8, "ph": "X", "cat": "fee", "dur": 1.9, "name": "__init__ (<frozen importlib._bootstrap>:342)"}, {"pid": 9440, "tid": 27716, "ts": 723020543382.2, "ph": "X", "cat": "fee", "dur": 19.6, "name": "spec_from_file_location (<frozen importlib._bootstrap_external>:689)"}, {"pid": 9440, "tid": 27716, "ts": 723020543377.4, "ph": "X", "cat": "fee", "dur": 24.9, "name": "_get_spec (<frozen importlib._bootstrap_external>:1493)"}, {"pid": 9440, "tid": 27716, "ts": 723020542696.9, "ph": "X", "cat": "fee", "dur": 706.2, "name": "find_spec (<frozen importlib._bootstrap_external>:1498)"}, {"pid": 9440, "tid": 27716, "ts": 723020542394.4, "ph": "X", "cat": "fee", "dur": 1010.0, "name": "_get_spec (<frozen importlib._bootstrap_external>:1367)"}, {"pid": 9440, "tid": 27716, "ts": 723020542393.1, "ph": "X", "cat": "fee", "dur": 1012.8, "name": "find_spec (<frozen importlib._bootstrap_external>:1399)"}, {"pid": 9440, "tid": 27716, "ts": 723020543408.1, "ph": "X", "cat": "fee", "dur": 0.6, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020543407.5, "ph": "X", "cat": "fee", "dur": 1.4, "name": "__exit__ (<frozen importlib._bootstrap>:867)"}, {"pid": 9440, "tid": 27716, "ts": 723020542355.0, "ph": "X", "cat": "fee", "dur": 1056.0, "name": "_find_spec (<frozen importlib._bootstrap>:890)"}, {"pid": 9440, "tid": 27716, "ts": 723020543413.3, "ph": "X", "cat": "fee", "dur": 0.7, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020543415.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020543416.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "create_module (<frozen importlib._bootstrap_external>:839)"}, {"pid": 9440, "tid": 27716, "ts": 723020543418.1, "ph": "X", "cat": "fee", "dur": 2.7, "name": "_new_module (<frozen importlib._bootstrap>:35)"}, {"pid": 9440, "tid": 27716, "ts": 723020543422.8, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020543423.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020543425.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020543427.1, "ph": "X", "cat": "fee", "dur": 1.0, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020543426.4, "ph": "X", "cat": "fee", "dur": 2.2, "name": "parent (<frozen importlib._bootstrap>:389)"}, {"pid": 9440, "tid": 27716, "ts": 723020543429.6, "ph": "X", "cat": "fee", "dur": 5.2, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020543436.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "has_location (<frozen importlib._bootstrap>:397)"}, {"pid": 9440, "tid": 27716, "ts": 723020543436.8, "ph": "X", "cat": "fee", "dur": 2.9, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020543441.3, "ph": "X", "cat": "fee", "dur": 2.7, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020543447.6, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543449.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723020543455.6, "ph": "X", "cat": "fee", "dur": 1.6, "name": "str.rfind"}, {"pid": 9440, "tid": 27716, "ts": 723020543454.5, "ph": "X", "cat": "fee", "dur": 2.9, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 9440, "tid": 27716, "ts": 723020543458.3, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.rfind"}, {"pid": 9440, "tid": 27716, "ts": 723020543457.8, "ph": "X", "cat": "fee", "dur": 1.3, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 9440, "tid": 27716, "ts": 723020543459.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 9440, "tid": 27716, "ts": 723020543453.0, "ph": "X", "cat": "fee", "dur": 7.9, "name": "builtins.max"}, {"pid": 9440, "tid": 27716, "ts": 723020543451.0, "ph": "X", "cat": "fee", "dur": 12.6, "name": "_path_split (<frozen importlib._bootstrap_external>:127)"}, {"pid": 9440, "tid": 27716, "ts": 723020543464.7, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020543467.0, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020543472.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020543476.8, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543477.9, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543478.8, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020543482.5, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543483.4, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543484.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543485.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020543487.3, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543488.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543489.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543490.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020543492.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020543493.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020543493.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020543491.5, "ph": "X", "cat": "fee", "dur": 2.7, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020543494.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020543495.5, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020543472.4, "ph": "X", "cat": "fee", "dur": 24.3, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020543449.2, "ph": "X", "cat": "fee", "dur": 48.2, "name": "cache_from_source (<frozen importlib._bootstrap_external>:354)"}, {"pid": 9440, "tid": 27716, "ts": 723020543446.5, "ph": "X", "cat": "fee", "dur": 51.8, "name": "_get_cached (<frozen importlib._bootstrap_external>:484)"}, {"pid": 9440, "tid": 27716, "ts": 723020543444.9, "ph": "X", "cat": "fee", "dur": 54.4, "name": "cached (<frozen importlib._bootstrap>:376)"}, {"pid": 9440, "tid": 27716, "ts": 723020543500.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "cached (<frozen importlib._bootstrap>:376)"}, {"pid": 9440, "tid": 27716, "ts": 723020543422.1, "ph": "X", "cat": "fee", "dur": 79.1, "name": "_init_module_attrs (<frozen importlib._bootstrap>:477)"}, {"pid": 9440, "tid": 27716, "ts": 723020543414.7, "ph": "X", "cat": "fee", "dur": 87.0, "name": "module_from_spec (<frozen importlib._bootstrap>:549)"}, {"pid": 9440, "tid": 27716, "ts": 723020543509.4, "ph": "X", "cat": "fee", "dur": 0.4, "name": "get_filename (<frozen importlib._bootstrap_external>:1029)"}, {"pid": 9440, "tid": 27716, "ts": 723020543507.4, "ph": "X", "cat": "fee", "dur": 2.8, "name": "_check_name_wrapper (<frozen importlib._bootstrap_external>:516)"}, {"pid": 9440, "tid": 27716, "ts": 723020543511.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723020543515.2, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.rfind"}, {"pid": 9440, "tid": 27716, "ts": 723020543514.6, "ph": "X", "cat": "fee", "dur": 1.4, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 9440, "tid": 27716, "ts": 723020543516.9, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.rfind"}, {"pid": 9440, "tid": 27716, "ts": 723020543516.4, "ph": "X", "cat": "fee", "dur": 1.1, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 9440, "tid": 27716, "ts": 723020543517.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "<genexpr> (<frozen importlib._bootstrap_external>:129)"}, {"pid": 9440, "tid": 27716, "ts": 723020543513.9, "ph": "X", "cat": "fee", "dur": 4.8, "name": "builtins.max"}, {"pid": 9440, "tid": 27716, "ts": 723020543512.7, "ph": "X", "cat": "fee", "dur": 7.6, "name": "_path_split (<frozen importlib._bootstrap_external>:127)"}, {"pid": 9440, "tid": 27716, "ts": 723020543521.1, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020543522.8, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020543526.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020543529.6, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543530.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543531.4, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020543534.1, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543534.9, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543535.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543536.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020543538.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.startswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543539.0, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543539.8, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.endswith"}, {"pid": 9440, "tid": 27716, "ts": 723020543540.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020543542.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020543542.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020543543.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020543541.6, "ph": "X", "cat": "fee", "dur": 2.4, "name": "<listcomp> (<frozen importlib._bootstrap_external>:114)"}, {"pid": 9440, "tid": 27716, "ts": 723020543544.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020543545.1, "ph": "X", "cat": "fee", "dur": 0.5, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020543526.0, "ph": "X", "cat": "fee", "dur": 20.6, "name": "_path_join (<frozen importlib._bootstrap_external>:91)"}, {"pid": 9440, "tid": 27716, "ts": 723020543511.5, "ph": "X", "cat": "fee", "dur": 35.8, "name": "cache_from_source (<frozen importlib._bootstrap_external>:354)"}, {"pid": 9440, "tid": 27716, "ts": 723020543550.1, "ph": "X", "cat": "fee", "dur": 95.7, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723020543549.6, "ph": "X", "cat": "fee", "dur": 96.7, "name": "_path_stat (<frozen importlib._bootstrap_external>:135)"}, {"pid": 9440, "tid": 27716, "ts": 723020543549.0, "ph": "X", "cat": "fee", "dur": 99.2, "name": "path_stats (<frozen importlib._bootstrap_external>:1075)"}, {"pid": 9440, "tid": 27716, "ts": 723020543654.5, "ph": "X", "cat": "fee", "dur": 0.8, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020543657.3, "ph": "X", "cat": "fee", "dur": 830.3, "name": "io.open_code"}, {"pid": 9440, "tid": 27716, "ts": 723020544492.2, "ph": "X", "cat": "fee", "dur": 73.6, "name": "_io.BufferedReader.read"}, {"pid": 9440, "tid": 27716, "ts": 723020543653.2, "ph": "X", "cat": "fee", "dur": 992.5, "name": "get_data (<frozen importlib._bootstrap_external>:1034)"}, {"pid": 9440, "tid": 27716, "ts": 723020544658.3, "ph": "X", "cat": "fee", "dur": 0.6, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020544660.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020544663.3, "ph": "X", "cat": "fee", "dur": 1.2, "name": "type.from_bytes"}, {"pid": 9440, "tid": 27716, "ts": 723020544660.5, "ph": "X", "cat": "fee", "dur": 4.3, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)"}, {"pid": 9440, "tid": 27716, "ts": 723020544654.7, "ph": "X", "cat": "fee", "dur": 11.5, "name": "_classify_pyc (<frozen importlib._bootstrap_external>:553)"}, {"pid": 9440, "tid": 27716, "ts": 723020544674.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020544675.0, "ph": "X", "cat": "fee", "dur": 0.5, "name": "type.from_bytes"}, {"pid": 9440, "tid": 27716, "ts": 723020544673.8, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)"}, {"pid": 9440, "tid": 27716, "ts": 723020544677.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020544678.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "type.from_bytes"}, {"pid": 9440, "tid": 27716, "ts": 723020544677.2, "ph": "X", "cat": "fee", "dur": 1.3, "name": "_unpack_uint32 (<frozen importlib._bootstrap_external>:79)"}, {"pid": 9440, "tid": 27716, "ts": 723020544672.9, "ph": "X", "cat": "fee", "dur": 6.2, "name": "_validate_timestamp_pyc (<frozen importlib._bootstrap_external>:586)"}, {"pid": 9440, "tid": 27716, "ts": 723020544682.0, "ph": "X", "cat": "fee", "dur": 1.8, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020544686.7, "ph": "X", "cat": "fee", "dur": 81.5, "name": "marshal.loads"}, {"pid": 9440, "tid": 27716, "ts": 723020544768.9, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020544770.8, "ph": "X", "cat": "fee", "dur": 0.8, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020544773.0, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_imp._fix_co_filename"}, {"pid": 9440, "tid": 27716, "ts": 723020544685.6, "ph": "X", "cat": "fee", "dur": 88.8, "name": "_compile_bytecode (<frozen importlib._bootstrap_external>:638)"}, {"pid": 9440, "tid": 27716, "ts": 723020543506.1, "ph": "X", "cat": "fee", "dur": 1268.9, "name": "get_code (<frozen importlib._bootstrap_external>:914)"}, {"pid": 9440, "tid": 27716, "ts": 723020544784.0, "ph": "X", "cat": "fee", "dur": 27.7, "name": "<module> (C:\\Python38\\lib\\tkinter\\constants.py:4)"}, {"pid": 9440, "tid": 27716, "ts": 723020544781.2, "ph": "X", "cat": "fee", "dur": 31.1, "name": "builtins.exec"}, {"pid": 9440, "tid": 27716, "ts": 723020544780.6, "ph": "X", "cat": "fee", "dur": 31.9, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:211)"}, {"pid": 9440, "tid": 27716, "ts": 723020543504.6, "ph": "X", "cat": "fee", "dur": 1308.8, "name": "exec_module (<frozen importlib._bootstrap_external>:842)"}, {"pid": 9440, "tid": 27716, "ts": 723020544817.6, "ph": "X", "cat": "fee", "dur": 0.9, "name": "dict.pop"}, {"pid": 9440, "tid": 27716, "ts": 723020544820.5, "ph": "X", "cat": "fee", "dur": 0.6, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020543412.4, "ph": "X", "cat": "fee", "dur": 1409.9, "name": "_load_unlocked (<frozen importlib._bootstrap>:650)"}, {"pid": 9440, "tid": 27716, "ts": 723020544824.9, "ph": "X", "cat": "fee", "dur": 1.5, "name": "str.rpartition"}, {"pid": 9440, "tid": 27716, "ts": 723020544827.2, "ph": "X", "cat": "fee", "dur": 1.5, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020542348.8, "ph": "X", "cat": "fee", "dur": 2480.3, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:956)"}, {"pid": 9440, "tid": 27716, "ts": 723020544833.4, "ph": "X", "cat": "fee", "dur": 0.6, "name": "_thread.get_ident"}, {"pid": 9440, "tid": 27716, "ts": 723020544832.5, "ph": "X", "cat": "fee", "dur": 6.9, "name": "release (<frozen importlib._bootstrap>:103)"}, {"pid": 9440, "tid": 27716, "ts": 723020544830.9, "ph": "X", "cat": "fee", "dur": 8.9, "name": "__exit__ (<frozen importlib._bootstrap>:151)"}, {"pid": 9440, "tid": 27716, "ts": 723020544842.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020544843.8, "ph": "X", "cat": "fee", "dur": 0.6, "name": "dict.get"}, {"pid": 9440, "tid": 27716, "ts": 723020544845.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020544841.9, "ph": "X", "cat": "fee", "dur": 4.2, "name": "cb (<frozen importlib._bootstrap>:176)"}, {"pid": 9440, "tid": 27716, "ts": 723020542313.7, "ph": "X", "cat": "fee", "dur": 2538.1, "name": "_find_and_load (<frozen importlib._bootstrap>:986)"}, {"pid": 9440, "tid": 27716, "ts": 723020544922.9, "ph": "X", "cat": "fee", "dur": 2.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020544930.8, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020544934.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020544932.8, "ph": "X", "cat": "fee", "dur": 1.8, "name": "isstring (C:\\Python38\\lib\\sre_compile.py:595)"}, {"pid": 9440, "tid": 27716, "ts": 723020544936.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020544936.4, "ph": "X", "cat": "fee", "dur": 0.8, "name": "isstring (C:\\Python38\\lib\\sre_compile.py:595)"}, {"pid": 9440, "tid": 27716, "ts": 723020544941.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020544944.8, "ph": "X", "cat": "fee", "dur": 2.0, "name": "__next (C:\\Python38\\lib\\sre_parse.py:233)"}, {"pid": 9440, "tid": 27716, "ts": 723020544941.0, "ph": "X", "cat": "fee", "dur": 6.2, "name": "__init__ (C:\\Python38\\lib\\sre_parse.py:224)"}, {"pid": 9440, "tid": 27716, "ts": 723020544949.0, "ph": "X", "cat": "fee", "dur": 2.2, "name": "__init__ (C:\\Python38\\lib\\sre_parse.py:76)"}, {"pid": 9440, "tid": 27716, "ts": 723020544957.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020544956.0, "ph": "X", "cat": "fee", "dur": 1.7, "name": "tell (C:\\Python38\\lib\\sre_parse.py:286)"}, {"pid": 9440, "tid": 27716, "ts": 723020544960.6, "ph": "X", "cat": "fee", "dur": 1.5, "name": "__init__ (C:\\Python38\\lib\\sre_parse.py:111)"}, {"pid": 9440, "tid": 27716, "ts": 723020544966.2, "ph": "X", "cat": "fee", "dur": 1.4, "name": "__next (C:\\Python38\\lib\\sre_parse.py:233)"}, {"pid": 9440, "tid": 27716, "ts": 723020544965.2, "ph": "X", "cat": "fee", "dur": 2.8, "name": "get (C:\\Python38\\lib\\sre_parse.py:254)"}, {"pid": 9440, "tid": 27716, "ts": 723020544971.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020544970.6, "ph": "X", "cat": "fee", "dur": 1.0, "name": "tell (C:\\Python38\\lib\\sre_parse.py:286)"}, {"pid": 9440, "tid": 27716, "ts": 723020544972.4, "ph": "X", "cat": "fee", "dur": 0.7, "name": "match (C:\\Python38\\lib\\sre_parse.py:249)"}, {"pid": 9440, "tid": 27716, "ts": 723020544976.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020544975.5, "ph": "X", "cat": "fee", "dur": 0.9, "name": "groups (C:\\Python38\\lib\\sre_parse.py:81)"}, {"pid": 9440, "tid": 27716, "ts": 723020544977.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020544978.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020544978.1, "ph": "X", "cat": "fee", "dur": 0.6, "name": "groups (C:\\Python38\\lib\\sre_parse.py:81)"}, {"pid": 9440, "tid": 27716, "ts": 723020544974.4, "ph": "X", "cat": "fee", "dur": 4.9, "name": "opengroup (C:\\Python38\\lib\\sre_parse.py:84)"}, {"pid": 9440, "tid": 27716, "ts": 723020544983.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020544983.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "tell (C:\\Python38\\lib\\sre_parse.py:286)"}, {"pid": 9440, "tid": 27716, "ts": 723020544986.6, "ph": "X", "cat": "fee", "dur": 0.8, "name": "__init__ (C:\\Python38\\lib\\sre_parse.py:111)"}, {"pid": 9440, "tid": 27716, "ts": 723020544990.2, "ph": "X", "cat": "fee", "dur": 2.2, "name": "__next (C:\\Python38\\lib\\sre_parse.py:233)"}, {"pid": 9440, "tid": 27716, "ts": 723020544989.7, "ph": "X", "cat": "fee", "dur": 3.0, "name": "get (C:\\Python38\\lib\\sre_parse.py:254)"}, {"pid": 9440, "tid": 27716, "ts": 723020544994.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020544993.7, "ph": "X", "cat": "fee", "dur": 0.9, "name": "tell (C:\\Python38\\lib\\sre_parse.py:286)"}, {"pid": 9440, "tid": 27716, "ts": 723020544995.8, "ph": "X", "cat": "fee", "dur": 0.5, "name": "match (C:\\Python38\\lib\\sre_parse.py:249)"}, {"pid": 9440, "tid": 27716, "ts": 723020544997.2, "ph": "X", "cat": "fee", "dur": 1.1, "name": "__next (C:\\Python38\\lib\\sre_parse.py:233)"}, {"pid": 9440, "tid": 27716, "ts": 723020544996.8, "ph": "X", "cat": "fee", "dur": 1.7, "name": "get (C:\\Python38\\lib\\sre_parse.py:254)"}, {"pid": 9440, "tid": 27716, "ts": 723020545001.2, "ph": "X", "cat": "fee", "dur": 0.9, "name": "dict.get"}, {"pid": 9440, "tid": 27716, "ts": 723020545000.1, "ph": "X", "cat": "fee", "dur": 2.4, "name": "_class_escape (C:\\Python38\\lib\\sre_parse.py:295)"}, {"pid": 9440, "tid": 27716, "ts": 723020545003.2, "ph": "X", "cat": "fee", "dur": 0.8, "name": "match (C:\\Python38\\lib\\sre_parse.py:249)"}, {"pid": 9440, "tid": 27716, "ts": 723020545005.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545006.3, "ph": "X", "cat": "fee", "dur": 0.8, "name": "__next (C:\\Python38\\lib\\sre_parse.py:233)"}, {"pid": 9440, "tid": 27716, "ts": 723020545005.8, "ph": "X", "cat": "fee", "dur": 1.7, "name": "get (C:\\Python38\\lib\\sre_parse.py:254)"}, {"pid": 9440, "tid": 27716, "ts": 723020545009.1, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.ord"}, {"pid": 9440, "tid": 27716, "ts": 723020545010.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "match (C:\\Python38\\lib\\sre_parse.py:249)"}, {"pid": 9440, "tid": 27716, "ts": 723020545011.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545012.2, "ph": "X", "cat": "fee", "dur": 0.9, "name": "__next (C:\\Python38\\lib\\sre_parse.py:233)"}, {"pid": 9440, "tid": 27716, "ts": 723020545011.6, "ph": "X", "cat": "fee", "dur": 1.7, "name": "get (C:\\Python38\\lib\\sre_parse.py:254)"}, {"pid": 9440, "tid": 27716, "ts": 723020545014.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.ord"}, {"pid": 9440, "tid": 27716, "ts": 723020545014.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "match (C:\\Python38\\lib\\sre_parse.py:249)"}, {"pid": 9440, "tid": 27716, "ts": 723020545016.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545017.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "__next (C:\\Python38\\lib\\sre_parse.py:233)"}, {"pid": 9440, "tid": 27716, "ts": 723020545016.6, "ph": "X", "cat": "fee", "dur": 1.7, "name": "get (C:\\Python38\\lib\\sre_parse.py:254)"}, {"pid": 9440, "tid": 27716, "ts": 723020545021.3, "ph": "X", "cat": "fee", "dur": 3.1, "name": "type.fromkeys"}, {"pid": 9440, "tid": 27716, "ts": 723020545019.4, "ph": "X", "cat": "fee", "dur": 7.9, "name": "_uniq (C:\\Python38\\lib\\sre_parse.py:432)"}, {"pid": 9440, "tid": 27716, "ts": 723020545027.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545030.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545029.5, "ph": "X", "cat": "fee", "dur": 1.1, "name": "append (C:\\Python38\\lib\\sre_parse.py:172)"}, {"pid": 9440, "tid": 27716, "ts": 723020545033.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545033.1, "ph": "X", "cat": "fee", "dur": 0.8, "name": "__len__ (C:\\Python38\\lib\\sre_parse.py:160)"}, {"pid": 9440, "tid": 27716, "ts": 723020545032.0, "ph": "X", "cat": "fee", "dur": 2.4, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545042.3, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545041.1, "ph": "X", "cat": "fee", "dur": 2.2, "name": "__getitem__ (C:\\Python38\\lib\\sre_parse.py:164)"}, {"pid": 9440, "tid": 27716, "ts": 723020544985.6, "ph": "X", "cat": "fee", "dur": 59.0, "name": "_parse (C:\\Python38\\lib\\sre_parse.py:493)"}, {"pid": 9440, "tid": 27716, "ts": 723020545045.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545046.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "match (C:\\Python38\\lib\\sre_parse.py:249)"}, {"pid": 9440, "tid": 27716, "ts": 723020545047.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020544982.0, "ph": "X", "cat": "fee", "dur": 66.3, "name": "_parse_sub (C:\\Python38\\lib\\sre_parse.py:435)"}, {"pid": 9440, "tid": 27716, "ts": 723020545050.0, "ph": "X", "cat": "fee", "dur": 3.5, "name": "__next (C:\\Python38\\lib\\sre_parse.py:233)"}, {"pid": 9440, "tid": 27716, "ts": 723020545049.4, "ph": "X", "cat": "fee", "dur": 4.5, "name": "match (C:\\Python38\\lib\\sre_parse.py:249)"}, {"pid": 9440, "tid": 27716, "ts": 723020545059.9, "ph": "X", "cat": "fee", "dur": 1.3, "name": "builtins.min"}, {"pid": 9440, "tid": 27716, "ts": 723020545061.7, "ph": "X", "cat": "fee", "dur": 0.7, "name": "builtins.min"}, {"pid": 9440, "tid": 27716, "ts": 723020545055.7, "ph": "X", "cat": "fee", "dur": 7.3, "name": "getwidth (C:\\Python38\\lib\\sre_parse.py:174)"}, {"pid": 9440, "tid": 27716, "ts": 723020545054.9, "ph": "X", "cat": "fee", "dur": 8.9, "name": "closegroup (C:\\Python38\\lib\\sre_parse.py:96)"}, {"pid": 9440, "tid": 27716, "ts": 723020545065.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545064.9, "ph": "X", "cat": "fee", "dur": 0.9, "name": "append (C:\\Python38\\lib\\sre_parse.py:172)"}, {"pid": 9440, "tid": 27716, "ts": 723020545067.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545067.2, "ph": "X", "cat": "fee", "dur": 0.8, "name": "__len__ (C:\\Python38\\lib\\sre_parse.py:160)"}, {"pid": 9440, "tid": 27716, "ts": 723020545066.7, "ph": "X", "cat": "fee", "dur": 1.5, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545070.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545070.5, "ph": "X", "cat": "fee", "dur": 1.1, "name": "__getitem__ (C:\\Python38\\lib\\sre_parse.py:164)"}, {"pid": 9440, "tid": 27716, "ts": 723020544959.3, "ph": "X", "cat": "fee", "dur": 113.4, "name": "_parse (C:\\Python38\\lib\\sre_parse.py:493)"}, {"pid": 9440, "tid": 27716, "ts": 723020545073.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545074.3, "ph": "X", "cat": "fee", "dur": 0.8, "name": "match (C:\\Python38\\lib\\sre_parse.py:249)"}, {"pid": 9440, "tid": 27716, "ts": 723020545075.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020544953.3, "ph": "X", "cat": "fee", "dur": 122.7, "name": "_parse_sub (C:\\Python38\\lib\\sre_parse.py:435)"}, {"pid": 9440, "tid": 27716, "ts": 723020545078.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545077.5, "ph": "X", "cat": "fee", "dur": 2.6, "name": "fix_flags (C:\\Python38\\lib\\sre_parse.py:921)"}, {"pid": 9440, "tid": 27716, "ts": 723020544939.0, "ph": "X", "cat": "fee", "dur": 142.4, "name": "parse (C:\\Python38\\lib\\sre_parse.py:937)"}, {"pid": 9440, "tid": 27716, "ts": 723020545087.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "getwidth (C:\\Python38\\lib\\sre_parse.py:174)"}, {"pid": 9440, "tid": 27716, "ts": 723020545088.8, "ph": "X", "cat": "fee", "dur": 0.7, "name": "builtins.min"}, {"pid": 9440, "tid": 27716, "ts": 723020545089.9, "ph": "X", "cat": "fee", "dur": 0.6, "name": "builtins.min"}, {"pid": 9440, "tid": 27716, "ts": 723020545085.4, "ph": "X", "cat": "fee", "dur": 5.5, "name": "getwidth (C:\\Python38\\lib\\sre_parse.py:174)"}, {"pid": 9440, "tid": 27716, "ts": 723020545094.6, "ph": "X", "cat": "fee", "dur": 0.9, "name": "_get_iscased (C:\\Python38\\lib\\sre_compile.py:453)"}, {"pid": 9440, "tid": 27716, "ts": 723020545097.4, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_combine_flags (C:\\Python38\\lib\\sre_compile.py:65)"}, {"pid": 9440, "tid": 27716, "ts": 723020545100.5, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_get_iscased (C:\\Python38\\lib\\sre_compile.py:453)"}, {"pid": 9440, "tid": 27716, "ts": 723020545099.9, "ph": "X", "cat": "fee", "dur": 2.3, "name": "_get_literal_prefix (C:\\Python38\\lib\\sre_compile.py:461)"}, {"pid": 9440, "tid": 27716, "ts": 723020545103.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545104.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.extend"}, {"pid": 9440, "tid": 27716, "ts": 723020545093.2, "ph": "X", "cat": "fee", "dur": 12.2, "name": "_get_literal_prefix (C:\\Python38\\lib\\sre_compile.py:461)"}, {"pid": 9440, "tid": 27716, "ts": 723020545108.6, "ph": "X", "cat": "fee", "dur": 0.7, "name": "_combine_flags (C:\\Python38\\lib\\sre_compile.py:65)"}, {"pid": 9440, "tid": 27716, "ts": 723020545110.6, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_get_iscased (C:\\Python38\\lib\\sre_compile.py:453)"}, {"pid": 9440, "tid": 27716, "ts": 723020545106.9, "ph": "X", "cat": "fee", "dur": 5.1, "name": "_get_charset_prefix (C:\\Python38\\lib\\sre_compile.py:492)"}, {"pid": 9440, "tid": 27716, "ts": 723020545112.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545113.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545113.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545114.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545115.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545116.0, "ph": "X", "cat": "fee", "dur": 0.7, "name": "builtins.min"}, {"pid": 9440, "tid": 27716, "ts": 723020545116.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545124.0, "ph": "X", "cat": "fee", "dur": 2.4, "name": "bytearray.find"}, {"pid": 9440, "tid": 27716, "ts": 723020545127.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545128.0, "ph": "X", "cat": "fee", "dur": 0.6, "name": "bytearray.find"}, {"pid": 9440, "tid": 27716, "ts": 723020545129.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545129.9, "ph": "X", "cat": "fee", "dur": 0.8, "name": "bytearray.find"}, {"pid": 9440, "tid": 27716, "ts": 723020545131.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545131.7, "ph": "X", "cat": "fee", "dur": 0.5, "name": "bytearray.find"}, {"pid": 9440, "tid": 27716, "ts": 723020545132.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545133.1, "ph": "X", "cat": "fee", "dur": 0.6, "name": "bytearray.find"}, {"pid": 9440, "tid": 27716, "ts": 723020545134.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545135.1, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545138.0, "ph": "X", "cat": "fee", "dur": 1.8, "name": "bytearray.translate"}, {"pid": 9440, "tid": 27716, "ts": 723020545142.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545145.4, "ph": "X", "cat": "fee", "dur": 11.0, "name": "<listcomp> (C:\\Python38\\lib\\sre_compile.py:413)"}, {"pid": 9440, "tid": 27716, "ts": 723020545137.1, "ph": "X", "cat": "fee", "dur": 19.9, "name": "_mk_bitmap (C:\\Python38\\lib\\sre_compile.py:411)"}, {"pid": 9440, "tid": 27716, "ts": 723020545158.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545118.3, "ph": "X", "cat": "fee", "dur": 41.1, "name": "_optimize_charset (C:\\Python38\\lib\\sre_compile.py:276)"}, {"pid": 9440, "tid": 27716, "ts": 723020545162.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545164.1, "ph": "X", "cat": "fee", "dur": 0.6, "name": "list.extend"}, {"pid": 9440, "tid": 27716, "ts": 723020545165.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545161.2, "ph": "X", "cat": "fee", "dur": 4.5, "name": "_compile_charset (C:\\Python38\\lib\\sre_compile.py:249)"}, {"pid": 9440, "tid": 27716, "ts": 723020545166.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545084.7, "ph": "X", "cat": "fee", "dur": 82.1, "name": "_compile_info (C:\\Python38\\lib\\sre_compile.py:536)"}, {"pid": 9440, "tid": 27716, "ts": 723020545172.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545173.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545174.0, "ph": "X", "cat": "fee", "dur": 0.7, "name": "_combine_flags (C:\\Python38\\lib\\sre_compile.py:65)"}, {"pid": 9440, "tid": 27716, "ts": 723020545178.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545177.8, "ph": "X", "cat": "fee", "dur": 1.4, "name": "__getitem__ (C:\\Python38\\lib\\sre_parse.py:164)"}, {"pid": 9440, "tid": 27716, "ts": 723020545183.6, "ph": "X", "cat": "fee", "dur": 0.7, "name": "bytearray.find"}, {"pid": 9440, "tid": 27716, "ts": 723020545184.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545185.2, "ph": "X", "cat": "fee", "dur": 0.5, "name": "bytearray.find"}, {"pid": 9440, "tid": 27716, "ts": 723020545186.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545186.8, "ph": "X", "cat": "fee", "dur": 0.5, "name": "bytearray.find"}, {"pid": 9440, "tid": 27716, "ts": 723020545187.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545188.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "bytearray.find"}, {"pid": 9440, "tid": 27716, "ts": 723020545189.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545189.9, "ph": "X", "cat": "fee", "dur": 0.5, "name": "bytearray.find"}, {"pid": 9440, "tid": 27716, "ts": 723020545190.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545191.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545192.9, "ph": "X", "cat": "fee", "dur": 1.2, "name": "bytearray.translate"}, {"pid": 9440, "tid": 27716, "ts": 723020545196.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545198.0, "ph": "X", "cat": "fee", "dur": 8.6, "name": "<listcomp> (C:\\Python38\\lib\\sre_compile.py:413)"}, {"pid": 9440, "tid": 27716, "ts": 723020545192.6, "ph": "X", "cat": "fee", "dur": 14.5, "name": "_mk_bitmap (C:\\Python38\\lib\\sre_compile.py:411)"}, {"pid": 9440, "tid": 27716, "ts": 723020545208.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545180.4, "ph": "X", "cat": "fee", "dur": 28.5, "name": "_optimize_charset (C:\\Python38\\lib\\sre_compile.py:276)"}, {"pid": 9440, "tid": 27716, "ts": 723020545210.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545210.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545211.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545212.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545213.8, "ph": "X", "cat": "fee", "dur": 0.5, "name": "list.extend"}, {"pid": 9440, "tid": 27716, "ts": 723020545214.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545211.9, "ph": "X", "cat": "fee", "dur": 3.1, "name": "_compile_charset (C:\\Python38\\lib\\sre_compile.py:249)"}, {"pid": 9440, "tid": 27716, "ts": 723020545215.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545216.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545216.4, "ph": "X", "cat": "fee", "dur": 1.4, "name": "__getitem__ (C:\\Python38\\lib\\sre_parse.py:164)"}, {"pid": 9440, "tid": 27716, "ts": 723020545175.4, "ph": "X", "cat": "fee", "dur": 43.8, "name": "_compile (C:\\Python38\\lib\\sre_compile.py:71)"}, {"pid": 9440, "tid": 27716, "ts": 723020545220.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545221.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545168.4, "ph": "X", "cat": "fee", "dur": 53.3, "name": "_compile (C:\\Python38\\lib\\sre_compile.py:71)"}, {"pid": 9440, "tid": 27716, "ts": 723020545222.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545083.2, "ph": "X", "cat": "fee", "dur": 139.9, "name": "_code (C:\\Python38\\lib\\sre_compile.py:598)"}, {"pid": 9440, "tid": 27716, "ts": 723020545225.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545225.2, "ph": "X", "cat": "fee", "dur": 0.8, "name": "groups (C:\\Python38\\lib\\sre_parse.py:81)"}, {"pid": 9440, "tid": 27716, "ts": 723020545227.5, "ph": "X", "cat": "fee", "dur": 0.5, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020545231.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545230.9, "ph": "X", "cat": "fee", "dur": 0.6, "name": "groups (C:\\Python38\\lib\\sre_parse.py:81)"}, {"pid": 9440, "tid": 27716, "ts": 723020545232.8, "ph": "X", "cat": "fee", "dur": 2.7, "name": "_sre.compile"}, {"pid": 9440, "tid": 27716, "ts": 723020544935.7, "ph": "X", "cat": "fee", "dur": 300.1, "name": "compile (C:\\Python38\\lib\\sre_compile.py:759)"}, {"pid": 9440, "tid": 27716, "ts": 723020545243.0, "ph": "X", "cat": "fee", "dur": 1.4, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545251.3, "ph": "X", "cat": "fee", "dur": 3.1, "name": "__new__ (C:\\Python38\\lib\\enum.py:631)"}, {"pid": 9440, "tid": 27716, "ts": 723020545248.0, "ph": "X", "cat": "fee", "dur": 6.8, "name": "__call__ (C:\\Python38\\lib\\enum.py:313)"}, {"pid": 9440, "tid": 27716, "ts": 723020545257.2, "ph": "X", "cat": "fee", "dur": 1.1, "name": "__new__ (C:\\Python38\\lib\\enum.py:631)"}, {"pid": 9440, "tid": 27716, "ts": 723020545256.4, "ph": "X", "cat": "fee", "dur": 2.2, "name": "__call__ (C:\\Python38\\lib\\enum.py:313)"}, {"pid": 9440, "tid": 27716, "ts": 723020545242.1, "ph": "X", "cat": "fee", "dur": 17.0, "name": "__and__ (C:\\Python38\\lib\\enum.py:938)"}, {"pid": 9440, "tid": 27716, "ts": 723020545260.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020544921.8, "ph": "X", "cat": "fee", "dur": 340.3, "name": "_compile (C:\\Python38\\lib\\re.py:289)"}, {"pid": 9440, "tid": 27716, "ts": 723020544920.8, "ph": "X", "cat": "fee", "dur": 341.8, "name": "compile (C:\\Python38\\lib\\re.py:250)"}, {"pid": 9440, "tid": 27716, "ts": 723020545265.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545269.5, "ph": "X", "cat": "fee", "dur": 0.5, "name": "value (C:\\Python38\\lib\\enum.py:753)"}, {"pid": 9440, "tid": 27716, "ts": 723020545267.9, "ph": "X", "cat": "fee", "dur": 2.4, "name": "__get__ (C:\\Python38\\lib\\types.py:171)"}, {"pid": 9440, "tid": 27716, "ts": 723020545274.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545275.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545275.1, "ph": "X", "cat": "fee", "dur": 1.3, "name": "isstring (C:\\Python38\\lib\\sre_compile.py:595)"}, {"pid": 9440, "tid": 27716, "ts": 723020545278.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545277.7, "ph": "X", "cat": "fee", "dur": 0.8, "name": "isstring (C:\\Python38\\lib\\sre_compile.py:595)"}, {"pid": 9440, "tid": 27716, "ts": 723020545280.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545283.0, "ph": "X", "cat": "fee", "dur": 1.6, "name": "__next (C:\\Python38\\lib\\sre_parse.py:233)"}, {"pid": 9440, "tid": 27716, "ts": 723020545280.5, "ph": "X", "cat": "fee", "dur": 4.5, "name": "__init__ (C:\\Python38\\lib\\sre_parse.py:224)"}, {"pid": 9440, "tid": 27716, "ts": 723020545286.2, "ph": "X", "cat": "fee", "dur": 1.4, "name": "__init__ (C:\\Python38\\lib\\sre_parse.py:76)"}, {"pid": 9440, "tid": 27716, "ts": 723020545291.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545290.3, "ph": "X", "cat": "fee", "dur": 1.2, "name": "tell (C:\\Python38\\lib\\sre_parse.py:286)"}, {"pid": 9440, "tid": 27716, "ts": 723020545293.5, "ph": "X", "cat": "fee", "dur": 1.0, "name": "__init__ (C:\\Python38\\lib\\sre_parse.py:111)"}, {"pid": 9440, "tid": 27716, "ts": 723020545297.2, "ph": "X", "cat": "fee", "dur": 1.1, "name": "__next (C:\\Python38\\lib\\sre_parse.py:233)"}, {"pid": 9440, "tid": 27716, "ts": 723020545296.6, "ph": "X", "cat": "fee", "dur": 2.1, "name": "get (C:\\Python38\\lib\\sre_parse.py:254)"}, {"pid": 9440, "tid": 27716, "ts": 723020545301.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545300.7, "ph": "X", "cat": "fee", "dur": 1.0, "name": "tell (C:\\Python38\\lib\\sre_parse.py:286)"}, {"pid": 9440, "tid": 27716, "ts": 723020545302.5, "ph": "X", "cat": "fee", "dur": 0.4, "name": "match (C:\\Python38\\lib\\sre_parse.py:249)"}, {"pid": 9440, "tid": 27716, "ts": 723020545304.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545304.5, "ph": "X", "cat": "fee", "dur": 0.8, "name": "groups (C:\\Python38\\lib\\sre_parse.py:81)"}, {"pid": 9440, "tid": 27716, "ts": 723020545306.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545307.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545306.7, "ph": "X", "cat": "fee", "dur": 0.6, "name": "groups (C:\\Python38\\lib\\sre_parse.py:81)"}, {"pid": 9440, "tid": 27716, "ts": 723020545304.0, "ph": "X", "cat": "fee", "dur": 4.0, "name": "opengroup (C:\\Python38\\lib\\sre_parse.py:84)"}, {"pid": 9440, "tid": 27716, "ts": 723020545310.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545310.2, "ph": "X", "cat": "fee", "dur": 0.9, "name": "tell (C:\\Python38\\lib\\sre_parse.py:286)"}, {"pid": 9440, "tid": 27716, "ts": 723020545312.8, "ph": "X", "cat": "fee", "dur": 0.8, "name": "__init__ (C:\\Python38\\lib\\sre_parse.py:111)"}, {"pid": 9440, "tid": 27716, "ts": 723020545315.5, "ph": "X", "cat": "fee", "dur": 1.7, "name": "__next (C:\\Python38\\lib\\sre_parse.py:233)"}, {"pid": 9440, "tid": 27716, "ts": 723020545315.0, "ph": "X", "cat": "fee", "dur": 2.5, "name": "get (C:\\Python38\\lib\\sre_parse.py:254)"}, {"pid": 9440, "tid": 27716, "ts": 723020545319.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545318.6, "ph": "X", "cat": "fee", "dur": 0.8, "name": "tell (C:\\Python38\\lib\\sre_parse.py:286)"}, {"pid": 9440, "tid": 27716, "ts": 723020545320.5, "ph": "X", "cat": "fee", "dur": 0.4, "name": "match (C:\\Python38\\lib\\sre_parse.py:249)"}, {"pid": 9440, "tid": 27716, "ts": 723020545321.9, "ph": "X", "cat": "fee", "dur": 0.8, "name": "__next (C:\\Python38\\lib\\sre_parse.py:233)"}, {"pid": 9440, "tid": 27716, "ts": 723020545321.4, "ph": "X", "cat": "fee", "dur": 1.5, "name": "get (C:\\Python38\\lib\\sre_parse.py:254)"}, {"pid": 9440, "tid": 27716, "ts": 723020545324.7, "ph": "X", "cat": "fee", "dur": 0.5, "name": "dict.get"}, {"pid": 9440, "tid": 27716, "ts": 723020545325.9, "ph": "X", "cat": "fee", "dur": 0.5, "name": "dict.get"}, {"pid": 9440, "tid": 27716, "ts": 723020545324.0, "ph": "X", "cat": "fee", "dur": 3.2, "name": "_class_escape (C:\\Python38\\lib\\sre_parse.py:295)"}, {"pid": 9440, "tid": 27716, "ts": 723020545327.9, "ph": "X", "cat": "fee", "dur": 0.4, "name": "match (C:\\Python38\\lib\\sre_parse.py:249)"}, {"pid": 9440, "tid": 27716, "ts": 723020545329.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545330.5, "ph": "X", "cat": "fee", "dur": 0.8, "name": "__next (C:\\Python38\\lib\\sre_parse.py:233)"}, {"pid": 9440, "tid": 27716, "ts": 723020545330.0, "ph": "X", "cat": "fee", "dur": 1.5, "name": "get (C:\\Python38\\lib\\sre_parse.py:254)"}, {"pid": 9440, "tid": 27716, "ts": 723020545333.9, "ph": "X", "cat": "fee", "dur": 1.4, "name": "type.fromkeys"}, {"pid": 9440, "tid": 27716, "ts": 723020545332.7, "ph": "X", "cat": "fee", "dur": 4.3, "name": "_uniq (C:\\Python38\\lib\\sre_parse.py:432)"}, {"pid": 9440, "tid": 27716, "ts": 723020545337.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545339.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545338.9, "ph": "X", "cat": "fee", "dur": 1.1, "name": "append (C:\\Python38\\lib\\sre_parse.py:172)"}, {"pid": 9440, "tid": 27716, "ts": 723020545341.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545341.5, "ph": "X", "cat": "fee", "dur": 0.7, "name": "__len__ (C:\\Python38\\lib\\sre_parse.py:160)"}, {"pid": 9440, "tid": 27716, "ts": 723020545340.9, "ph": "X", "cat": "fee", "dur": 2.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545346.8, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545346.6, "ph": "X", "cat": "fee", "dur": 1.0, "name": "__getitem__ (C:\\Python38\\lib\\sre_parse.py:164)"}, {"pid": 9440, "tid": 27716, "ts": 723020545312.0, "ph": "X", "cat": "fee", "dur": 36.5, "name": "_parse (C:\\Python38\\lib\\sre_parse.py:493)"}, {"pid": 9440, "tid": 27716, "ts": 723020545349.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545350.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "match (C:\\Python38\\lib\\sre_parse.py:249)"}, {"pid": 9440, "tid": 27716, "ts": 723020545351.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545309.5, "ph": "X", "cat": "fee", "dur": 42.2, "name": "_parse_sub (C:\\Python38\\lib\\sre_parse.py:435)"}, {"pid": 9440, "tid": 27716, "ts": 723020545353.4, "ph": "X", "cat": "fee", "dur": 2.6, "name": "__next (C:\\Python38\\lib\\sre_parse.py:233)"}, {"pid": 9440, "tid": 27716, "ts": 723020545352.8, "ph": "X", "cat": "fee", "dur": 3.6, "name": "match (C:\\Python38\\lib\\sre_parse.py:249)"}, {"pid": 9440, "tid": 27716, "ts": 723020545360.3, "ph": "X", "cat": "fee", "dur": 1.0, "name": "builtins.min"}, {"pid": 9440, "tid": 27716, "ts": 723020545361.7, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.min"}, {"pid": 9440, "tid": 27716, "ts": 723020545357.6, "ph": "X", "cat": "fee", "dur": 5.1, "name": "getwidth (C:\\Python38\\lib\\sre_parse.py:174)"}, {"pid": 9440, "tid": 27716, "ts": 723020545357.1, "ph": "X", "cat": "fee", "dur": 6.2, "name": "closegroup (C:\\Python38\\lib\\sre_parse.py:96)"}, {"pid": 9440, "tid": 27716, "ts": 723020545364.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545364.2, "ph": "X", "cat": "fee", "dur": 0.9, "name": "append (C:\\Python38\\lib\\sre_parse.py:172)"}, {"pid": 9440, "tid": 27716, "ts": 723020545366.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545366.4, "ph": "X", "cat": "fee", "dur": 0.7, "name": "__len__ (C:\\Python38\\lib\\sre_parse.py:160)"}, {"pid": 9440, "tid": 27716, "ts": 723020545366.0, "ph": "X", "cat": "fee", "dur": 1.4, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545369.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545369.5, "ph": "X", "cat": "fee", "dur": 0.9, "name": "__getitem__ (C:\\Python38\\lib\\sre_parse.py:164)"}, {"pid": 9440, "tid": 27716, "ts": 723020545292.6, "ph": "X", "cat": "fee", "dur": 78.8, "name": "_parse (C:\\Python38\\lib\\sre_parse.py:493)"}, {"pid": 9440, "tid": 27716, "ts": 723020545372.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545372.8, "ph": "X", "cat": "fee", "dur": 0.6, "name": "match (C:\\Python38\\lib\\sre_parse.py:249)"}, {"pid": 9440, "tid": 27716, "ts": 723020545373.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545289.1, "ph": "X", "cat": "fee", "dur": 85.1, "name": "_parse_sub (C:\\Python38\\lib\\sre_parse.py:435)"}, {"pid": 9440, "tid": 27716, "ts": 723020545376.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545375.5, "ph": "X", "cat": "fee", "dur": 1.8, "name": "fix_flags (C:\\Python38\\lib\\sre_parse.py:921)"}, {"pid": 9440, "tid": 27716, "ts": 723020545279.5, "ph": "X", "cat": "fee", "dur": 98.9, "name": "parse (C:\\Python38\\lib\\sre_parse.py:937)"}, {"pid": 9440, "tid": 27716, "ts": 723020545383.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "getwidth (C:\\Python38\\lib\\sre_parse.py:174)"}, {"pid": 9440, "tid": 27716, "ts": 723020545384.5, "ph": "X", "cat": "fee", "dur": 0.6, "name": "builtins.min"}, {"pid": 9440, "tid": 27716, "ts": 723020545385.4, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.min"}, {"pid": 9440, "tid": 27716, "ts": 723020545381.7, "ph": "X", "cat": "fee", "dur": 4.6, "name": "getwidth (C:\\Python38\\lib\\sre_parse.py:174)"}, {"pid": 9440, "tid": 27716, "ts": 723020545388.9, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_get_iscased (C:\\Python38\\lib\\sre_compile.py:453)"}, {"pid": 9440, "tid": 27716, "ts": 723020545391.2, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_combine_flags (C:\\Python38\\lib\\sre_compile.py:65)"}, {"pid": 9440, "tid": 27716, "ts": 723020545393.8, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_get_iscased (C:\\Python38\\lib\\sre_compile.py:453)"}, {"pid": 9440, "tid": 27716, "ts": 723020545393.3, "ph": "X", "cat": "fee", "dur": 2.1, "name": "_get_literal_prefix (C:\\Python38\\lib\\sre_compile.py:461)"}, {"pid": 9440, "tid": 27716, "ts": 723020545396.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545396.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.extend"}, {"pid": 9440, "tid": 27716, "ts": 723020545388.0, "ph": "X", "cat": "fee", "dur": 9.6, "name": "_get_literal_prefix (C:\\Python38\\lib\\sre_compile.py:461)"}, {"pid": 9440, "tid": 27716, "ts": 723020545400.1, "ph": "X", "cat": "fee", "dur": 15.8, "name": "_combine_flags (C:\\Python38\\lib\\sre_compile.py:65)"}, {"pid": 9440, "tid": 27716, "ts": 723020545417.9, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_get_iscased (C:\\Python38\\lib\\sre_compile.py:453)"}, {"pid": 9440, "tid": 27716, "ts": 723020545398.8, "ph": "X", "cat": "fee", "dur": 20.8, "name": "_get_charset_prefix (C:\\Python38\\lib\\sre_compile.py:492)"}, {"pid": 9440, "tid": 27716, "ts": 723020545420.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545421.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545422.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545423.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545424.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545425.2, "ph": "X", "cat": "fee", "dur": 0.7, "name": "builtins.min"}, {"pid": 9440, "tid": 27716, "ts": 723020545426.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545430.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545431.8, "ph": "X", "cat": "fee", "dur": 1.4, "name": "bytearray.find"}, {"pid": 9440, "tid": 27716, "ts": 723020545435.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545435.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545427.4, "ph": "X", "cat": "fee", "dur": 9.0, "name": "_optimize_charset (C:\\Python38\\lib\\sre_compile.py:276)"}, {"pid": 9440, "tid": 27716, "ts": 723020545439.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545441.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545442.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545438.3, "ph": "X", "cat": "fee", "dur": 4.7, "name": "_compile_charset (C:\\Python38\\lib\\sre_compile.py:249)"}, {"pid": 9440, "tid": 27716, "ts": 723020545443.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545381.1, "ph": "X", "cat": "fee", "dur": 63.5, "name": "_compile_info (C:\\Python38\\lib\\sre_compile.py:536)"}, {"pid": 9440, "tid": 27716, "ts": 723020545449.3, "ph": "X", "cat": "fee", "dur": 0.5, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545450.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545451.4, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_combine_flags (C:\\Python38\\lib\\sre_compile.py:65)"}, {"pid": 9440, "tid": 27716, "ts": 723020545455.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545455.1, "ph": "X", "cat": "fee", "dur": 1.1, "name": "__getitem__ (C:\\Python38\\lib\\sre_parse.py:164)"}, {"pid": 9440, "tid": 27716, "ts": 723020545459.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545460.8, "ph": "X", "cat": "fee", "dur": 0.8, "name": "bytearray.find"}, {"pid": 9440, "tid": 27716, "ts": 723020545462.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545463.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545457.6, "ph": "X", "cat": "fee", "dur": 6.3, "name": "_optimize_charset (C:\\Python38\\lib\\sre_compile.py:276)"}, {"pid": 9440, "tid": 27716, "ts": 723020545465.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545466.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545466.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545468.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545470.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545470.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545467.5, "ph": "X", "cat": "fee", "dur": 3.9, "name": "_compile_charset (C:\\Python38\\lib\\sre_compile.py:249)"}, {"pid": 9440, "tid": 27716, "ts": 723020545471.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545473.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545473.1, "ph": "X", "cat": "fee", "dur": 1.5, "name": "__getitem__ (C:\\Python38\\lib\\sre_parse.py:164)"}, {"pid": 9440, "tid": 27716, "ts": 723020545453.1, "ph": "X", "cat": "fee", "dur": 22.6, "name": "_compile (C:\\Python38\\lib\\sre_compile.py:71)"}, {"pid": 9440, "tid": 27716, "ts": 723020545476.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545477.4, "ph": "X", "cat": "fee", "dur": 0.6, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545445.9, "ph": "X", "cat": "fee", "dur": 32.6, "name": "_compile (C:\\Python38\\lib\\sre_compile.py:71)"}, {"pid": 9440, "tid": 27716, "ts": 723020545479.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545379.8, "ph": "X", "cat": "fee", "dur": 100.1, "name": "_code (C:\\Python38\\lib\\sre_compile.py:598)"}, {"pid": 9440, "tid": 27716, "ts": 723020545482.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545482.1, "ph": "X", "cat": "fee", "dur": 1.0, "name": "groups (C:\\Python38\\lib\\sre_parse.py:81)"}, {"pid": 9440, "tid": 27716, "ts": 723020545484.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020545487.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545487.2, "ph": "X", "cat": "fee", "dur": 0.8, "name": "groups (C:\\Python38\\lib\\sre_parse.py:81)"}, {"pid": 9440, "tid": 27716, "ts": 723020545489.3, "ph": "X", "cat": "fee", "dur": 1.8, "name": "_sre.compile"}, {"pid": 9440, "tid": 27716, "ts": 723020545277.3, "ph": "X", "cat": "fee", "dur": 214.8, "name": "compile (C:\\Python38\\lib\\sre_compile.py:759)"}, {"pid": 9440, "tid": 27716, "ts": 723020545497.4, "ph": "X", "cat": "fee", "dur": 1.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545502.7, "ph": "X", "cat": "fee", "dur": 2.0, "name": "__new__ (C:\\Python38\\lib\\enum.py:631)"}, {"pid": 9440, "tid": 27716, "ts": 723020545500.7, "ph": "X", "cat": "fee", "dur": 4.4, "name": "__call__ (C:\\Python38\\lib\\enum.py:313)"}, {"pid": 9440, "tid": 27716, "ts": 723020545507.7, "ph": "X", "cat": "fee", "dur": 1.3, "name": "__new__ (C:\\Python38\\lib\\enum.py:631)"}, {"pid": 9440, "tid": 27716, "ts": 723020545506.7, "ph": "X", "cat": "fee", "dur": 2.6, "name": "__call__ (C:\\Python38\\lib\\enum.py:313)"}, {"pid": 9440, "tid": 27716, "ts": 723020545496.3, "ph": "X", "cat": "fee", "dur": 13.6, "name": "__and__ (C:\\Python38\\lib\\enum.py:938)"}, {"pid": 9440, "tid": 27716, "ts": 723020545510.8, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545264.9, "ph": "X", "cat": "fee", "dur": 248.2, "name": "_compile (C:\\Python38\\lib\\re.py:289)"}, {"pid": 9440, "tid": 27716, "ts": 723020545264.5, "ph": "X", "cat": "fee", "dur": 249.1, "name": "compile (C:\\Python38\\lib\\re.py:250)"}, {"pid": 9440, "tid": 27716, "ts": 723020545534.6, "ph": "X", "cat": "fee", "dur": 1.4, "name": "builtins.issubclass"}, {"pid": 9440, "tid": 27716, "ts": 723020545536.6, "ph": "X", "cat": "fee", "dur": 0.6, "name": "builtins.issubclass"}, {"pid": 9440, "tid": 27716, "ts": 723020545539.0, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.issubclass"}, {"pid": 9440, "tid": 27716, "ts": 723020545541.2, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.issubclass"}, {"pid": 9440, "tid": 27716, "ts": 723020545532.8, "ph": "X", "cat": "fee", "dur": 9.5, "name": "_check_for_existing_members (C:\\Python38\\lib\\enum.py:522)"}, {"pid": 9440, "tid": 27716, "ts": 723020545544.4, "ph": "X", "cat": "fee", "dur": 7.1, "name": "__init__ (C:\\Python38\\lib\\enum.py:68)"}, {"pid": 9440, "tid": 27716, "ts": 723020545556.2, "ph": "X", "cat": "fee", "dur": 0.7, "name": "builtins.issubclass"}, {"pid": 9440, "tid": 27716, "ts": 723020545559.5, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.issubclass"}, {"pid": 9440, "tid": 27716, "ts": 723020545562.1, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.issubclass"}, {"pid": 9440, "tid": 27716, "ts": 723020545563.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545565.5, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.issubclass"}, {"pid": 9440, "tid": 27716, "ts": 723020545568.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545557.7, "ph": "X", "cat": "fee", "dur": 11.4, "name": "_find_data_type (C:\\Python38\\lib\\enum.py:543)"}, {"pid": 9440, "tid": 27716, "ts": 723020545554.1, "ph": "X", "cat": "fee", "dur": 16.5, "name": "_get_mixins_ (C:\\Python38\\lib\\enum.py:532)"}, {"pid": 9440, "tid": 27716, "ts": 723020545572.2, "ph": "X", "cat": "fee", "dur": 1.1, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545576.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545575.9, "ph": "X", "cat": "fee", "dur": 4.7, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545582.5, "ph": "X", "cat": "fee", "dur": 0.7, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545574.9, "ph": "X", "cat": "fee", "dur": 11.3, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545531.7, "ph": "X", "cat": "fee", "dur": 55.1, "name": "__prepare__ (C:\\Python38\\lib\\enum.py:143)"}, {"pid": 9440, "tid": 27716, "ts": 723020545593.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545592.8, "ph": "X", "cat": "fee", "dur": 2.2, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545596.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545595.8, "ph": "X", "cat": "fee", "dur": 3.7, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545592.2, "ph": "X", "cat": "fee", "dur": 9.8, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545603.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545603.3, "ph": "X", "cat": "fee", "dur": 1.6, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545605.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545605.6, "ph": "X", "cat": "fee", "dur": 2.2, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545602.9, "ph": "X", "cat": "fee", "dur": 6.4, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545610.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545610.7, "ph": "X", "cat": "fee", "dur": 1.7, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545613.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545613.0, "ph": "X", "cat": "fee", "dur": 1.7, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545616.7, "ph": "X", "cat": "fee", "dur": 0.7, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545617.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545619.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545616.3, "ph": "X", "cat": "fee", "dur": 3.4, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545621.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545622.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545623.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545610.3, "ph": "X", "cat": "fee", "dur": 15.1, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545627.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545627.2, "ph": "X", "cat": "fee", "dur": 1.4, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545629.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545629.2, "ph": "X", "cat": "fee", "dur": 0.8, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545631.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545632.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545632.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545631.3, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545634.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545634.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545635.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545626.8, "ph": "X", "cat": "fee", "dur": 10.5, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545638.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545638.5, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545640.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545640.0, "ph": "X", "cat": "fee", "dur": 1.7, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545643.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545643.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545644.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545642.7, "ph": "X", "cat": "fee", "dur": 2.0, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545645.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545646.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545646.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545638.1, "ph": "X", "cat": "fee", "dur": 11.0, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545650.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545650.2, "ph": "X", "cat": "fee", "dur": 1.2, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545652.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545651.9, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545654.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545655.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545656.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545654.6, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545657.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545658.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545658.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545649.8, "ph": "X", "cat": "fee", "dur": 10.5, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545662.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545661.8, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545663.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545663.4, "ph": "X", "cat": "fee", "dur": 1.6, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545666.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545667.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545668.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545666.2, "ph": "X", "cat": "fee", "dur": 2.4, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545669.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545670.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545670.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545661.4, "ph": "X", "cat": "fee", "dur": 11.0, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545674.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545673.7, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545675.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545675.4, "ph": "X", "cat": "fee", "dur": 1.6, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545678.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545679.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545679.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545678.3, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545680.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545681.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545682.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545673.3, "ph": "X", "cat": "fee", "dur": 10.6, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545685.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545685.2, "ph": "X", "cat": "fee", "dur": 1.2, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545687.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545686.9, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545690.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545690.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545691.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545689.8, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545692.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545693.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545693.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545684.8, "ph": "X", "cat": "fee", "dur": 10.4, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545696.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545696.5, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545698.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545698.1, "ph": "X", "cat": "fee", "dur": 1.6, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545701.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545701.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545702.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545701.0, "ph": "X", "cat": "fee", "dur": 1.8, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545703.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545704.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545705.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545696.0, "ph": "X", "cat": "fee", "dur": 12.1, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545709.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545709.6, "ph": "X", "cat": "fee", "dur": 1.3, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545711.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545711.4, "ph": "X", "cat": "fee", "dur": 18.3, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545731.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545732.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545732.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545731.3, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545734.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545734.8, "ph": "X", "cat": "fee", "dur": 0.6, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545735.9, "ph": "X", "cat": "fee", "dur": 0.4, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545709.2, "ph": "X", "cat": "fee", "dur": 28.6, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545739.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545739.4, "ph": "X", "cat": "fee", "dur": 1.6, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545741.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545741.5, "ph": "X", "cat": "fee", "dur": 1.6, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545744.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545745.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545746.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545744.6, "ph": "X", "cat": "fee", "dur": 2.0, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545747.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545748.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545748.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545739.0, "ph": "X", "cat": "fee", "dur": 11.6, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545752.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545751.9, "ph": "X", "cat": "fee", "dur": 1.3, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545754.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545753.7, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545757.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545757.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545758.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545756.8, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545759.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545760.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545760.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545751.5, "ph": "X", "cat": "fee", "dur": 11.1, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545764.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545763.8, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545765.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545765.4, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545769.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545769.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545770.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545768.7, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545771.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545772.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545772.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545763.4, "ph": "X", "cat": "fee", "dur": 10.9, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545775.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545775.5, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545778.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545777.8, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545781.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545781.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545782.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545780.9, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545783.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545784.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545785.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545775.1, "ph": "X", "cat": "fee", "dur": 11.4, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545788.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545787.7, "ph": "X", "cat": "fee", "dur": 1.2, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545789.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545789.5, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545792.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545793.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545794.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545792.6, "ph": "X", "cat": "fee", "dur": 2.0, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545795.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545796.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545796.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545787.3, "ph": "X", "cat": "fee", "dur": 11.2, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545800.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545799.8, "ph": "X", "cat": "fee", "dur": 1.2, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545801.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545801.4, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545804.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545805.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545806.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545804.6, "ph": "X", "cat": "fee", "dur": 2.0, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545807.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545808.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545808.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545799.4, "ph": "X", "cat": "fee", "dur": 10.9, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545811.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545811.4, "ph": "X", "cat": "fee", "dur": 1.2, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545813.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545813.2, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545816.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545817.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545817.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545816.4, "ph": "X", "cat": "fee", "dur": 1.8, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545818.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545819.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545820.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545811.0, "ph": "X", "cat": "fee", "dur": 10.7, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545823.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545823.4, "ph": "X", "cat": "fee", "dur": 1.4, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545825.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545825.3, "ph": "X", "cat": "fee", "dur": 1.6, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545829.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545829.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545830.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545828.9, "ph": "X", "cat": "fee", "dur": 1.8, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545831.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545832.1, "ph": "X", "cat": "fee", "dur": 0.5, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545833.1, "ph": "X", "cat": "fee", "dur": 0.4, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545823.0, "ph": "X", "cat": "fee", "dur": 11.9, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545836.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545836.1, "ph": "X", "cat": "fee", "dur": 1.2, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545838.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545837.9, "ph": "X", "cat": "fee", "dur": 1.4, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545841.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545842.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545842.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545841.3, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545843.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545844.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545845.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545835.7, "ph": "X", "cat": "fee", "dur": 11.0, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545848.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545847.9, "ph": "X", "cat": "fee", "dur": 1.2, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545849.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545849.6, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545853.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545853.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545854.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545853.1, "ph": "X", "cat": "fee", "dur": 1.8, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545855.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545856.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545857.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545847.4, "ph": "X", "cat": "fee", "dur": 20.7, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545869.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545869.6, "ph": "X", "cat": "fee", "dur": 1.2, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545871.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545871.3, "ph": "X", "cat": "fee", "dur": 0.8, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545874.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545875.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545875.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545874.2, "ph": "X", "cat": "fee", "dur": 1.8, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545876.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545877.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545878.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545869.1, "ph": "X", "cat": "fee", "dur": 11.4, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545882.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545881.8, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545883.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545883.4, "ph": "X", "cat": "fee", "dur": 1.6, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545887.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545888.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545888.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545887.1, "ph": "X", "cat": "fee", "dur": 2.0, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545889.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545890.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545891.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545881.5, "ph": "X", "cat": "fee", "dur": 11.4, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545894.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545894.1, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545896.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545895.8, "ph": "X", "cat": "fee", "dur": 1.6, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545899.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545900.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545901.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545899.6, "ph": "X", "cat": "fee", "dur": 2.0, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545902.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545903.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545903.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545893.7, "ph": "X", "cat": "fee", "dur": 11.5, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545906.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545906.4, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545908.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545908.1, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545911.9, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545912.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545913.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545911.7, "ph": "X", "cat": "fee", "dur": 1.8, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545914.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545915.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545915.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545906.0, "ph": "X", "cat": "fee", "dur": 11.3, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545918.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545918.5, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545920.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545920.1, "ph": "X", "cat": "fee", "dur": 1.6, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545924.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545924.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545925.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545924.0, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545926.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545927.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545928.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545918.1, "ph": "X", "cat": "fee", "dur": 12.0, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545931.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545931.2, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545933.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545932.9, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545937.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545937.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545938.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545936.8, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545939.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545940.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545940.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545930.9, "ph": "X", "cat": "fee", "dur": 11.6, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545943.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545943.6, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545945.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545945.3, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545949.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545950.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545950.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545949.3, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545952.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545952.7, "ph": "X", "cat": "fee", "dur": 0.6, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545953.8, "ph": "X", "cat": "fee", "dur": 0.4, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545943.2, "ph": "X", "cat": "fee", "dur": 12.3, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545957.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545956.8, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545958.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545958.5, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545962.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545963.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545964.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545962.6, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545965.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545966.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545966.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545956.3, "ph": "X", "cat": "fee", "dur": 11.9, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545969.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545969.4, "ph": "X", "cat": "fee", "dur": 1.2, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545971.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545971.1, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545975.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545976.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545976.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545975.2, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545978.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545979.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545979.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545968.9, "ph": "X", "cat": "fee", "dur": 12.4, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545982.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545982.4, "ph": "X", "cat": "fee", "dur": 1.2, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545984.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545984.1, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020545988.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545989.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545989.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020545988.3, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020545991.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020545991.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545992.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545982.0, "ph": "X", "cat": "fee", "dur": 12.0, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545995.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545995.2, "ph": "X", "cat": "fee", "dur": 1.2, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020545997.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020545996.9, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020546001.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546001.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546002.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546001.0, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020546003.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546004.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546005.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020545994.8, "ph": "X", "cat": "fee", "dur": 11.8, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020546008.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546007.9, "ph": "X", "cat": "fee", "dur": 1.2, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020546009.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546009.6, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020546014.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546014.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546015.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546013.8, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020546016.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546017.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546017.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546007.5, "ph": "X", "cat": "fee", "dur": 11.9, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020546020.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546020.6, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020546022.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546022.2, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020546026.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546027.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546028.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546026.6, "ph": "X", "cat": "fee", "dur": 2.5, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020546029.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546030.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546031.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546020.1, "ph": "X", "cat": "fee", "dur": 12.6, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020546034.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546033.9, "ph": "X", "cat": "fee", "dur": 1.2, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020546035.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546035.6, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020546040.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546041.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546041.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546040.0, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020546042.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546043.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546044.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546033.5, "ph": "X", "cat": "fee", "dur": 12.3, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020546047.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546047.1, "ph": "X", "cat": "fee", "dur": 1.2, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020546049.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546048.9, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020546053.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546054.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546054.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546053.3, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020546056.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546056.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546057.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546046.7, "ph": "X", "cat": "fee", "dur": 12.2, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020546060.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546060.2, "ph": "X", "cat": "fee", "dur": 1.3, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020546062.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546062.0, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020546066.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546067.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546068.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546066.6, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020546069.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546070.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546070.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546059.7, "ph": "X", "cat": "fee", "dur": 12.5, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020546073.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546073.4, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020546075.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546075.2, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020546080.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546081.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546081.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546079.8, "ph": "X", "cat": "fee", "dur": 2.5, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020546083.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546083.7, "ph": "X", "cat": "fee", "dur": 0.7, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546084.9, "ph": "X", "cat": "fee", "dur": 0.4, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546072.9, "ph": "X", "cat": "fee", "dur": 13.7, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020546088.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546087.9, "ph": "X", "cat": "fee", "dur": 1.2, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020546089.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546089.6, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020546094.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546095.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546095.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546094.4, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020546097.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546097.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546098.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546087.4, "ph": "X", "cat": "fee", "dur": 12.9, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020546101.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546101.4, "ph": "X", "cat": "fee", "dur": 1.3, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020546103.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546103.2, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020546108.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546108.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546109.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546108.0, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020546110.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546111.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546112.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546101.0, "ph": "X", "cat": "fee", "dur": 12.7, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020546115.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546114.9, "ph": "X", "cat": "fee", "dur": 1.3, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020546117.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546116.7, "ph": "X", "cat": "fee", "dur": 1.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020546121.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546122.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546123.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546121.6, "ph": "X", "cat": "fee", "dur": 1.8, "name": "_is_descriptor (C:\\Python38\\lib\\enum.py:12)"}, {"pid": 9440, "tid": 27716, "ts": 723020546124.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546125.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546125.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546114.5, "ph": "X", "cat": "fee", "dur": 12.8, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020546131.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546131.4, "ph": "X", "cat": "fee", "dur": 2.0, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020546134.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546133.9, "ph": "X", "cat": "fee", "dur": 2.3, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020546130.9, "ph": "X", "cat": "fee", "dur": 10.6, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020545588.1, "ph": "X", "cat": "fee", "dur": 554.1, "name": "EventType (C:\\Python38\\lib\\tkinter\\__init__.py:147)"}, {"pid": 9440, "tid": 27716, "ts": 723020546146.9, "ph": "X", "cat": "fee", "dur": 0.9, "name": "_EnumDict.setdefault"}, {"pid": 9440, "tid": 27716, "ts": 723020546148.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546150.4, "ph": "X", "cat": "fee", "dur": 0.6, "name": "_EnumDict.pop"}, {"pid": 9440, "tid": 27716, "ts": 723020546154.1, "ph": "X", "cat": "fee", "dur": 0.9, "name": "builtins.issubclass"}, {"pid": 9440, "tid": 27716, "ts": 723020546157.4, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.issubclass"}, {"pid": 9440, "tid": 27716, "ts": 723020546159.7, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.issubclass"}, {"pid": 9440, "tid": 27716, "ts": 723020546160.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546163.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.issubclass"}, {"pid": 9440, "tid": 27716, "ts": 723020546165.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546155.8, "ph": "X", "cat": "fee", "dur": 10.7, "name": "_find_data_type (C:\\Python38\\lib\\enum.py:543)"}, {"pid": 9440, "tid": 27716, "ts": 723020546152.4, "ph": "X", "cat": "fee", "dur": 15.8, "name": "_get_mixins_ (C:\\Python38\\lib\\enum.py:532)"}, {"pid": 9440, "tid": 27716, "ts": 723020546171.4, "ph": "X", "cat": "fee", "dur": 0.6, "name": "_EnumDict.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546173.5, "ph": "X", "cat": "fee", "dur": 3.7, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546187.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546187.2, "ph": "X", "cat": "fee", "dur": 2.5, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020546186.5, "ph": "X", "cat": "fee", "dur": 5.0, "name": "__getattr__ (C:\\Python38\\lib\\enum.py:370)"}, {"pid": 9440, "tid": 27716, "ts": 723020546182.9, "ph": "X", "cat": "fee", "dur": 9.7, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546196.1, "ph": "X", "cat": "fee", "dur": 0.8, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546170.6, "ph": "X", "cat": "fee", "dur": 29.6, "name": "_find_new_ (C:\\Python38\\lib\\enum.py:579)"}, {"pid": 9440, "tid": 27716, "ts": 723020546202.4, "ph": "X", "cat": "fee", "dur": 26.3, "name": "<dictcomp> (C:\\Python38\\lib\\enum.py:175)"}, {"pid": 9440, "tid": 27716, "ts": 723020546250.6, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_EnumDict.pop"}, {"pid": 9440, "tid": 27716, "ts": 723020546263.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546263.4, "ph": "X", "cat": "fee", "dur": 1.9, "name": "_is_sunder (C:\\Python38\\lib\\enum.py:33)"}, {"pid": 9440, "tid": 27716, "ts": 723020546266.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020546265.9, "ph": "X", "cat": "fee", "dur": 2.4, "name": "_is_dunder (C:\\Python38\\lib\\enum.py:22)"}, {"pid": 9440, "tid": 27716, "ts": 723020546262.9, "ph": "X", "cat": "fee", "dur": 7.6, "name": "__setitem__ (C:\\Python38\\lib\\enum.py:75)"}, {"pid": 9440, "tid": 27716, "ts": 723020546271.8, "ph": "X", "cat": "fee", "dur": 59.8, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546336.6, "ph": "X", "cat": "fee", "dur": 1.6, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546333.8, "ph": "X", "cat": "fee", "dur": 8.2, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546344.1, "ph": "X", "cat": "fee", "dur": 0.5, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546343.1, "ph": "X", "cat": "fee", "dur": 3.2, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546347.9, "ph": "X", "cat": "fee", "dur": 0.5, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546347.1, "ph": "X", "cat": "fee", "dur": 3.1, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546352.7, "ph": "X", "cat": "fee", "dur": 1.6, "name": "EnumMeta.mro"}, {"pid": 9440, "tid": 27716, "ts": 723020546356.9, "ph": "X", "cat": "fee", "dur": 1.6, "name": "mappingproxy.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546360.1, "ph": "X", "cat": "fee", "dur": 0.6, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546361.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546362.2, "ph": "X", "cat": "fee", "dur": 0.9, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546363.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546364.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546365.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546365.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546366.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546367.1, "ph": "X", "cat": "fee", "dur": 0.8, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546369.8, "ph": "X", "cat": "fee", "dur": 0.6, "name": "mappingproxy.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546371.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546371.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546372.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546373.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546373.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546374.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546375.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546375.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546376.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546377.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546377.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546378.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546379.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546379.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546380.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546381.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546381.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546382.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546383.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546383.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546384.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546385.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546386.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546386.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546387.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546388.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546388.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546389.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546390.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546391.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546391.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546392.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546393.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546393.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546394.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546394.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546395.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546396.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546396.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546397.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546398.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546398.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546399.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546400.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546401.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546401.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546403.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546403.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546404.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546405.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546405.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546406.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546407.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546407.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546408.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546408.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546409.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546410.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546410.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546411.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546412.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546412.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546413.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546414.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546414.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546415.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546416.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546416.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546417.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546419.1, "ph": "X", "cat": "fee", "dur": 0.5, "name": "mappingproxy.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546420.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546421.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546422.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546422.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546423.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546424.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546424.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546425.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546426.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546426.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546427.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546428.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546429.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546429.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546430.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546431.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546432.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546432.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546433.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546434.6, "ph": "X", "cat": "fee", "dur": 0.5, "name": "mappingproxy.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546435.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546436.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546437.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546438.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546439.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546439.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546440.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546440.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546441.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546442.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546442.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546443.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546444.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546445.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546445.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546446.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546447.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546447.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546448.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546449.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546449.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546450.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546451.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546355.4, "ph": "X", "cat": "fee", "dur": 97.1, "name": "<setcomp> (C:\\Python38\\lib\\enum.py:200)"}, {"pid": 9440, "tid": 27716, "ts": 723020546455.2, "ph": "X", "cat": "fee", "dur": 0.8, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546454.2, "ph": "X", "cat": "fee", "dur": 4.3, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546463.5, "ph": "X", "cat": "fee", "dur": 1.2, "name": "<genexpr> (C:\\Python38\\lib\\enum.py:223)"}, {"pid": 9440, "tid": 27716, "ts": 723020546465.1, "ph": "X", "cat": "fee", "dur": 0.9, "name": "<genexpr> (C:\\Python38\\lib\\enum.py:223)"}, {"pid": 9440, "tid": 27716, "ts": 723020546462.0, "ph": "X", "cat": "fee", "dur": 4.3, "name": "builtins.any"}, {"pid": 9440, "tid": 27716, "ts": 723020546467.4, "ph": "X", "cat": "fee", "dur": 0.6, "name": "<genexpr> (C:\\Python38\\lib\\enum.py:223)"}, {"pid": 9440, "tid": 27716, "ts": 723020546471.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546473.8, "ph": "X", "cat": "fee", "dur": 2.1, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546476.6, "ph": "X", "cat": "fee", "dur": 1.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546485.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546487.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546490.7, "ph": "X", "cat": "fee", "dur": 0.7, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546489.7, "ph": "X", "cat": "fee", "dur": 5.4, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546488.7, "ph": "X", "cat": "fee", "dur": 7.0, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546524.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546525.3, "ph": "X", "cat": "fee", "dur": 0.7, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546526.4, "ph": "X", "cat": "fee", "dur": 0.7, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546531.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546534.6, "ph": "X", "cat": "fee", "dur": 0.5, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546533.9, "ph": "X", "cat": "fee", "dur": 2.9, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546533.4, "ph": "X", "cat": "fee", "dur": 3.8, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546539.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546540.8, "ph": "X", "cat": "fee", "dur": 0.5, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546541.6, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546544.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546547.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546549.5, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546548.8, "ph": "X", "cat": "fee", "dur": 2.8, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546548.3, "ph": "X", "cat": "fee", "dur": 3.7, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546553.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546554.4, "ph": "X", "cat": "fee", "dur": 0.7, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546555.4, "ph": "X", "cat": "fee", "dur": 0.6, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546558.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546560.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546562.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546561.5, "ph": "X", "cat": "fee", "dur": 2.6, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546561.1, "ph": "X", "cat": "fee", "dur": 3.4, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546566.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546567.2, "ph": "X", "cat": "fee", "dur": 0.5, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546567.9, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546570.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546574.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546573.6, "ph": "X", "cat": "fee", "dur": 2.5, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546573.1, "ph": "X", "cat": "fee", "dur": 3.4, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546578.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546579.0, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546579.9, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546582.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546585.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546586.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546586.1, "ph": "X", "cat": "fee", "dur": 2.7, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546585.6, "ph": "X", "cat": "fee", "dur": 3.6, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546591.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546592.4, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546593.3, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546596.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546599.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546601.0, "ph": "X", "cat": "fee", "dur": 0.5, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546600.4, "ph": "X", "cat": "fee", "dur": 2.9, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546599.9, "ph": "X", "cat": "fee", "dur": 3.8, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546605.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546606.1, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546607.0, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546609.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546612.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546614.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546614.0, "ph": "X", "cat": "fee", "dur": 2.8, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546613.5, "ph": "X", "cat": "fee", "dur": 3.7, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546619.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546620.1, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546621.0, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546624.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546627.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546629.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546628.6, "ph": "X", "cat": "fee", "dur": 2.7, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546628.1, "ph": "X", "cat": "fee", "dur": 3.6, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546633.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546634.2, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546635.0, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546638.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546641.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546643.9, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546643.1, "ph": "X", "cat": "fee", "dur": 2.8, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546642.7, "ph": "X", "cat": "fee", "dur": 3.6, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546648.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546649.1, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546650.0, "ph": "X", "cat": "fee", "dur": 0.6, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546653.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546657.1, "ph": "X", "cat": "fee", "dur": 0.4, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546659.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546658.5, "ph": "X", "cat": "fee", "dur": 2.8, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546658.0, "ph": "X", "cat": "fee", "dur": 3.7, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546664.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546665.4, "ph": "X", "cat": "fee", "dur": 0.7, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546666.4, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546669.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546673.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546675.4, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546674.7, "ph": "X", "cat": "fee", "dur": 3.9, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546674.3, "ph": "X", "cat": "fee", "dur": 4.8, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546680.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546681.7, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546682.5, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546685.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546689.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546691.4, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546690.7, "ph": "X", "cat": "fee", "dur": 2.7, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546690.1, "ph": "X", "cat": "fee", "dur": 3.7, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546696.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546697.4, "ph": "X", "cat": "fee", "dur": 0.5, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546698.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546700.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546705.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546707.4, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546706.8, "ph": "X", "cat": "fee", "dur": 2.8, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546706.2, "ph": "X", "cat": "fee", "dur": 3.7, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546711.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546712.6, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546713.9, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546716.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546721.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546723.6, "ph": "X", "cat": "fee", "dur": 0.5, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546723.0, "ph": "X", "cat": "fee", "dur": 2.7, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546722.5, "ph": "X", "cat": "fee", "dur": 3.6, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546727.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546728.8, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546729.7, "ph": "X", "cat": "fee", "dur": 0.6, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546732.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546737.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546739.5, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546738.8, "ph": "X", "cat": "fee", "dur": 2.9, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546738.2, "ph": "X", "cat": "fee", "dur": 3.9, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546743.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546744.8, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546745.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546748.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546753.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546755.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546754.9, "ph": "X", "cat": "fee", "dur": 2.7, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546754.4, "ph": "X", "cat": "fee", "dur": 3.5, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546759.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546760.8, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546761.6, "ph": "X", "cat": "fee", "dur": 0.6, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546764.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546770.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546771.9, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546771.2, "ph": "X", "cat": "fee", "dur": 2.9, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546770.7, "ph": "X", "cat": "fee", "dur": 3.8, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546776.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546777.3, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546778.1, "ph": "X", "cat": "fee", "dur": 0.6, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546781.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546787.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546789.4, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546788.7, "ph": "X", "cat": "fee", "dur": 2.9, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546788.2, "ph": "X", "cat": "fee", "dur": 3.8, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546793.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546794.7, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546795.5, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546798.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546804.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546806.3, "ph": "X", "cat": "fee", "dur": 0.5, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546805.7, "ph": "X", "cat": "fee", "dur": 2.8, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546805.1, "ph": "X", "cat": "fee", "dur": 3.9, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546810.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546812.1, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546813.0, "ph": "X", "cat": "fee", "dur": 0.6, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546816.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546822.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546824.8, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546824.1, "ph": "X", "cat": "fee", "dur": 2.8, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546823.6, "ph": "X", "cat": "fee", "dur": 3.7, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546828.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546829.9, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546830.8, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546833.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546840.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546842.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546841.6, "ph": "X", "cat": "fee", "dur": 2.7, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546841.1, "ph": "X", "cat": "fee", "dur": 3.7, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546847.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546848.8, "ph": "X", "cat": "fee", "dur": 0.7, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546849.8, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546852.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546859.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546861.5, "ph": "X", "cat": "fee", "dur": 0.5, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546860.8, "ph": "X", "cat": "fee", "dur": 2.9, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546860.3, "ph": "X", "cat": "fee", "dur": 3.8, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546865.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546866.6, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546867.4, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546870.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546877.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546879.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546878.5, "ph": "X", "cat": "fee", "dur": 3.0, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546878.0, "ph": "X", "cat": "fee", "dur": 3.9, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546884.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546885.6, "ph": "X", "cat": "fee", "dur": 0.7, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546886.5, "ph": "X", "cat": "fee", "dur": 0.6, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546889.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546897.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546899.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546898.5, "ph": "X", "cat": "fee", "dur": 2.7, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546897.9, "ph": "X", "cat": "fee", "dur": 3.7, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546903.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546904.4, "ph": "X", "cat": "fee", "dur": 0.7, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546905.4, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546908.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546916.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546917.8, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546917.1, "ph": "X", "cat": "fee", "dur": 3.0, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546916.6, "ph": "X", "cat": "fee", "dur": 14.4, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546932.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546934.0, "ph": "X", "cat": "fee", "dur": 0.7, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546935.0, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546938.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546946.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546948.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546947.9, "ph": "X", "cat": "fee", "dur": 3.2, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546947.4, "ph": "X", "cat": "fee", "dur": 4.1, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546953.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546954.3, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546955.2, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546957.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546966.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546968.5, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546967.7, "ph": "X", "cat": "fee", "dur": 2.9, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546967.2, "ph": "X", "cat": "fee", "dur": 3.8, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546973.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546974.0, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546974.9, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546978.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020546987.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020546989.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020546988.6, "ph": "X", "cat": "fee", "dur": 2.9, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546988.1, "ph": "X", "cat": "fee", "dur": 3.8, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546993.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020546994.7, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020546995.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020546998.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020547007.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020547009.0, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020547008.3, "ph": "X", "cat": "fee", "dur": 2.7, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020547007.8, "ph": "X", "cat": "fee", "dur": 3.6, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547013.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020547014.2, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020547015.1, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547017.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020547027.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020547028.9, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020547028.2, "ph": "X", "cat": "fee", "dur": 2.7, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020547027.6, "ph": "X", "cat": "fee", "dur": 3.6, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547032.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020547033.8, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020547034.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547037.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020547046.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020547048.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020547047.8, "ph": "X", "cat": "fee", "dur": 3.4, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020547047.3, "ph": "X", "cat": "fee", "dur": 4.3, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547053.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020547054.3, "ph": "X", "cat": "fee", "dur": 0.7, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020547055.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547058.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020547067.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020547069.5, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020547068.8, "ph": "X", "cat": "fee", "dur": 4.7, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020547068.2, "ph": "X", "cat": "fee", "dur": 5.8, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547075.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020547076.8, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020547077.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547080.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020547090.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020547092.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020547091.6, "ph": "X", "cat": "fee", "dur": 2.9, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020547091.1, "ph": "X", "cat": "fee", "dur": 3.8, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547096.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020547097.6, "ph": "X", "cat": "fee", "dur": 0.5, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020547098.4, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547101.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020547111.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020547113.5, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020547112.8, "ph": "X", "cat": "fee", "dur": 2.7, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020547112.3, "ph": "X", "cat": "fee", "dur": 3.6, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547117.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020547118.4, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020547119.3, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547122.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020547132.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020547134.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020547133.6, "ph": "X", "cat": "fee", "dur": 2.6, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020547133.0, "ph": "X", "cat": "fee", "dur": 3.6, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547138.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020547139.4, "ph": "X", "cat": "fee", "dur": 0.7, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020547140.3, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547143.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020547153.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020547155.6, "ph": "X", "cat": "fee", "dur": 0.5, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020547154.8, "ph": "X", "cat": "fee", "dur": 3.3, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020547154.3, "ph": "X", "cat": "fee", "dur": 4.2, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547160.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020547161.3, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020547162.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547164.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020547176.3, "ph": "X", "cat": "fee", "dur": 0.5, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020547178.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020547177.8, "ph": "X", "cat": "fee", "dur": 2.9, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020547177.3, "ph": "X", "cat": "fee", "dur": 3.9, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547183.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020547184.3, "ph": "X", "cat": "fee", "dur": 0.6, "name": "type.__new__"}, {"pid": 9440, "tid": 27716, "ts": 723020547185.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547187.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723020547199.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723020547201.1, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020547200.4, "ph": "X", "cat": "fee", "dur": 3.0, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020547199.9, "ph": "X", "cat": "fee", "dur": 3.9, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547207.0, "ph": "X", "cat": "fee", "dur": 1.1, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547208.5, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547209.4, "ph": "X", "cat": "fee", "dur": 0.7, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547212.1, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020547211.3, "ph": "X", "cat": "fee", "dur": 3.7, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020547210.8, "ph": "X", "cat": "fee", "dur": 4.6, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547216.7, "ph": "X", "cat": "fee", "dur": 1.3, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547218.4, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547219.2, "ph": "X", "cat": "fee", "dur": 0.8, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547221.8, "ph": "X", "cat": "fee", "dur": 0.4, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020547221.0, "ph": "X", "cat": "fee", "dur": 3.0, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020547220.6, "ph": "X", "cat": "fee", "dur": 3.8, "name": "builtins.setattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547225.0, "ph": "X", "cat": "fee", "dur": 1.0, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547226.3, "ph": "X", "cat": "fee", "dur": 0.7, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547227.3, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.getattr"}, {"pid": 9440, "tid": 27716, "ts": 723020547230.4, "ph": "X", "cat": "fee", "dur": 0.5, "name": "mappingproxy.get"}, {"pid": 9440, "tid": 27716, "ts": 723020547229.7, "ph": "X", "cat": "fee", "dur": 3.3, "name": "__setattr__ (C:\\Python38\\lib\\enum.py:417)"}, {"pid": 9440, "tid": 27716, "ts": 723020546145.3, "ph": "X", "cat": "fee", "dur": 1088.1, "name": "__new__ (C:\\Python38\\lib\\enum.py:157)"}, {"pid": 9440, "tid": 27716, "ts": 723020545529.1, "ph": "X", "cat": "fee", "dur": 1708.8, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020547241.6, "ph": "X", "cat": "fee", "dur": 1.8, "name": "Event (C:\\Python38\\lib\\tkinter\\__init__.py:191)"}, {"pid": 9440, "tid": 27716, "ts": 723020547240.0, "ph": "X", "cat": "fee", "dur": 32.5, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020547278.6, "ph": "X", "cat": "fee", "dur": 9.6, "name": "Variable (C:\\Python38\\lib\\tkinter\\__init__.py:320)"}, {"pid": 9440, "tid": 27716, "ts": 723020547277.3, "ph": "X", "cat": "fee", "dur": 34.2, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020547313.7, "ph": "X", "cat": "fee", "dur": 2.3, "name": "StringVar (C:\\Python38\\lib\\tkinter\\__init__.py:501)"}, {"pid": 9440, "tid": 27716, "ts": 723020547312.8, "ph": "X", "cat": "fee", "dur": 26.4, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020547341.5, "ph": "X", "cat": "fee", "dur": 2.0, "name": "IntVar (C:\\Python38\\lib\\tkinter\\__init__.py:525)"}, {"pid": 9440, "tid": 27716, "ts": 723020547340.2, "ph": "X", "cat": "fee", "dur": 24.0, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020547365.9, "ph": "X", "cat": "fee", "dur": 2.4, "name": "DoubleVar (C:\\Python38\\lib\\tkinter\\__init__.py:550)"}, {"pid": 9440, "tid": 27716, "ts": 723020547364.9, "ph": "X", "cat": "fee", "dur": 21.0, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020547387.6, "ph": "X", "cat": "fee", "dur": 2.3, "name": "BooleanVar (C:\\Python38\\lib\\tkinter\\__init__.py:571)"}, {"pid": 9440, "tid": 27716, "ts": 723020547387.0, "ph": "X", "cat": "fee", "dur": 21.6, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020547635.5, "ph": "X", "cat": "fee", "dur": 2.0, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723020547412.4, "ph": "X", "cat": "fee", "dur": 244.7, "name": "Misc (C:\\Python38\\lib\\tkinter\\__init__.py:621)"}, {"pid": 9440, "tid": 27716, "ts": 723020547411.6, "ph": "X", "cat": "fee", "dur": 326.3, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020547741.9, "ph": "X", "cat": "fee", "dur": 2.4, "name": "CallWrapper (C:\\Python38\\lib\\tkinter\\__init__.py:1877)"}, {"pid": 9440, "tid": 27716, "ts": 723020547739.5, "ph": "X", "cat": "fee", "dur": 33.5, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020547775.3, "ph": "X", "cat": "fee", "dur": 3.6, "name": "XView (C:\\Python38\\lib\\tkinter\\__init__.py:1899)"}, {"pid": 9440, "tid": 27716, "ts": 723020547774.3, "ph": "X", "cat": "fee", "dur": 33.7, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020547810.1, "ph": "X", "cat": "fee", "dur": 2.4, "name": "YView (C:\\Python38\\lib\\tkinter\\__init__.py:1920)"}, {"pid": 9440, "tid": 27716, "ts": 723020547809.2, "ph": "X", "cat": "fee", "dur": 26.9, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020547838.2, "ph": "X", "cat": "fee", "dur": 37.8, "name": "Wm (C:\\Python38\\lib\\tkinter\\__init__.py:1941)"}, {"pid": 9440, "tid": 27716, "ts": 723020547837.4, "ph": "X", "cat": "fee", "dur": 69.0, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020547910.7, "ph": "X", "cat": "fee", "dur": 6.3, "name": "Tk (C:\\Python38\\lib\\tkinter\\__init__.py:2245)"}, {"pid": 9440, "tid": 27716, "ts": 723020547908.8, "ph": "X", "cat": "fee", "dur": 47.9, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020547959.3, "ph": "X", "cat": "fee", "dur": 7.6, "name": "Pack (C:\\Python38\\lib\\tkinter\\__init__.py:2375)"}, {"pid": 9440, "tid": 27716, "ts": 723020547958.3, "ph": "X", "cat": "fee", "dur": 34.6, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020547995.0, "ph": "X", "cat": "fee", "dur": 5.6, "name": "Place (C:\\Python38\\lib\\tkinter\\__init__.py:2421)"}, {"pid": 9440, "tid": 27716, "ts": 723020547994.1, "ph": "X", "cat": "fee", "dur": 31.7, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020548028.2, "ph": "X", "cat": "fee", "dur": 12.3, "name": "Grid (C:\\Python38\\lib\\tkinter\\__init__.py:2472)"}, {"pid": 9440, "tid": 27716, "ts": 723020548027.4, "ph": "X", "cat": "fee", "dur": 38.6, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020548068.6, "ph": "X", "cat": "fee", "dur": 4.4, "name": "BaseWidget (C:\\Python38\\lib\\tkinter\\__init__.py:2527)"}, {"pid": 9440, "tid": 27716, "ts": 723020548067.4, "ph": "X", "cat": "fee", "dur": 35.0, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020548105.7, "ph": "X", "cat": "fee", "dur": 0.8, "name": "Widget (C:\\Python38\\lib\\tkinter\\__init__.py:2590)"}, {"pid": 9440, "tid": 27716, "ts": 723020548104.0, "ph": "X", "cat": "fee", "dur": 169.9, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020548278.1, "ph": "X", "cat": "fee", "dur": 2.1, "name": "Toplevel (C:\\Python38\\lib\\tkinter\\__init__.py:2598)"}, {"pid": 9440, "tid": 27716, "ts": 723020548276.0, "ph": "X", "cat": "fee", "dur": 45.5, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020548324.0, "ph": "X", "cat": "fee", "dur": 3.5, "name": "Button (C:\\Python38\\lib\\tkinter\\__init__.py:2628)"}, {"pid": 9440, "tid": 27716, "ts": 723020548322.9, "ph": "X", "cat": "fee", "dur": 59.0, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020548384.8, "ph": "X", "cat": "fee", "dur": 29.1, "name": "Canvas (C:\\Python38\\lib\\tkinter\\__init__.py:2675)"}, {"pid": 9440, "tid": 27716, "ts": 723020548383.6, "ph": "X", "cat": "fee", "dur": 105.9, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020548492.0, "ph": "X", "cat": "fee", "dur": 3.2, "name": "Checkbutton (C:\\Python38\\lib\\tkinter\\__init__.py:2985)"}, {"pid": 9440, "tid": 27716, "ts": 723020548490.8, "ph": "X", "cat": "fee", "dur": 55.7, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020548548.9, "ph": "X", "cat": "fee", "dur": 9.2, "name": "Entry (C:\\Python38\\lib\\tkinter\\__init__.py:3021)"}, {"pid": 9440, "tid": 27716, "ts": 723020548547.9, "ph": "X", "cat": "fee", "dur": 72.4, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020548622.4, "ph": "X", "cat": "fee", "dur": 2.5, "name": "Frame (C:\\Python38\\lib\\tkinter\\__init__.py:3107)"}, {"pid": 9440, "tid": 27716, "ts": 723020548621.4, "ph": "X", "cat": "fee", "dur": 54.3, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020548677.8, "ph": "X", "cat": "fee", "dur": 1.1, "name": "Label (C:\\Python38\\lib\\tkinter\\__init__.py:3127)"}, {"pid": 9440, "tid": 27716, "ts": 723020548676.8, "ph": "X", "cat": "fee", "dur": 45.5, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020548724.8, "ph": "X", "cat": "fee", "dur": 10.5, "name": "Listbox (C:\\Python38\\lib\\tkinter\\__init__.py:3151)"}, {"pid": 9440, "tid": 27716, "ts": 723020548723.7, "ph": "X", "cat": "fee", "dur": 77.4, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020548803.2, "ph": "X", "cat": "fee", "dur": 13.7, "name": "Menu (C:\\Python38\\lib\\tkinter\\__init__.py:3267)"}, {"pid": 9440, "tid": 27716, "ts": 723020548802.2, "ph": "X", "cat": "fee", "dur": 64.3, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020548869.2, "ph": "X", "cat": "fee", "dur": 1.2, "name": "Menubutton (C:\\Python38\\lib\\tkinter\\__init__.py:3397)"}, {"pid": 9440, "tid": 27716, "ts": 723020548867.5, "ph": "X", "cat": "fee", "dur": 46.3, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020548915.8, "ph": "X", "cat": "fee", "dur": 1.0, "name": "Message (C:\\Python38\\lib\\tkinter\\__init__.py:3404)"}, {"pid": 9440, "tid": 27716, "ts": 723020548914.9, "ph": "X", "cat": "fee", "dur": 41.1, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020548958.2, "ph": "X", "cat": "fee", "dur": 3.2, "name": "Radiobutton (C:\\Python38\\lib\\tkinter\\__init__.py:3411)"}, {"pid": 9440, "tid": 27716, "ts": 723020548957.1, "ph": "X", "cat": "fee", "dur": 48.1, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020549007.9, "ph": "X", "cat": "fee", "dur": 3.7, "name": "Scale (C:\\Python38\\lib\\tkinter\\__init__.py:3444)"}, {"pid": 9440, "tid": 27716, "ts": 723020549006.3, "ph": "X", "cat": "fee", "dur": 49.2, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020549057.5, "ph": "X", "cat": "fee", "dur": 3.4, "name": "Scrollbar (C:\\Python38\\lib\\tkinter\\__init__.py:3483)"}, {"pid": 9440, "tid": 27716, "ts": 723020549056.6, "ph": "X", "cat": "fee", "dur": 51.5, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020549111.2, "ph": "X", "cat": "fee", "dur": 39.3, "name": "Text (C:\\Python38\\lib\\tkinter\\__init__.py:3533)"}, {"pid": 9440, "tid": 27716, "ts": 723020549109.5, "ph": "X", "cat": "fee", "dur": 111.7, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020549223.8, "ph": "X", "cat": "fee", "dur": 2.2, "name": "_setit (C:\\Python38\\lib\\tkinter\\__init__.py:3937)"}, {"pid": 9440, "tid": 27716, "ts": 723020549222.5, "ph": "X", "cat": "fee", "dur": 31.6, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020549256.2, "ph": "X", "cat": "fee", "dur": 2.6, "name": "OptionMenu (C:\\Python38\\lib\\tkinter\\__init__.py:3951)"}, {"pid": 9440, "tid": 27716, "ts": 723020549255.3, "ph": "X", "cat": "fee", "dur": 62.5, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020549319.9, "ph": "X", "cat": "fee", "dur": 6.2, "name": "Image (C:\\Python38\\lib\\tkinter\\__init__.py:3990)"}, {"pid": 9440, "tid": 27716, "ts": 723020549318.9, "ph": "X", "cat": "fee", "dur": 35.9, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020549357.0, "ph": "X", "cat": "fee", "dur": 9.4, "name": "PhotoImage (C:\\Python38\\lib\\tkinter\\__init__.py:4056)"}, {"pid": 9440, "tid": 27716, "ts": 723020549356.2, "ph": "X", "cat": "fee", "dur": 41.8, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020549400.0, "ph": "X", "cat": "fee", "dur": 1.3, "name": "BitmapImage (C:\\Python38\\lib\\tkinter\\__init__.py:4140)"}, {"pid": 9440, "tid": 27716, "ts": 723020549399.0, "ph": "X", "cat": "fee", "dur": 34.0, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020549439.5, "ph": "X", "cat": "fee", "dur": 9.4, "name": "Spinbox (C:\\Python38\\lib\\tkinter\\__init__.py:4160)"}, {"pid": 9440, "tid": 27716, "ts": 723020549435.5, "ph": "X", "cat": "fee", "dur": 74.8, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020549513.1, "ph": "X", "cat": "fee", "dur": 1.4, "name": "LabelFrame (C:\\Python38\\lib\\tkinter\\__init__.py:4338)"}, {"pid": 9440, "tid": 27716, "ts": 723020549512.2, "ph": "X", "cat": "fee", "dur": 53.5, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020549568.0, "ph": "X", "cat": "fee", "dur": 10.2, "name": "PanedWindow (C:\\Python38\\lib\\tkinter\\__init__.py:4362)"}, {"pid": 9440, "tid": 27716, "ts": 723020549567.0, "ph": "X", "cat": "fee", "dur": 61.7, "name": "builtins.__build_class__"}, {"pid": 9440, "tid": 27716, "ts": 723020496399.0, "ph": "X", "cat": "fee", "dur": 53231.5, "name": "<module> (C:\\Python38\\lib\\tkinter\\__init__.py:1)"}, {"pid": 9440, "tid": 27716, "ts": 723020496396.3, "ph": "X", "cat": "fee", "dur": 53235.3, "name": "builtins.exec"}, {"pid": 9440, "tid": 27716, "ts": 723020496395.4, "ph": "X", "cat": "fee", "dur": 53236.8, "name": "_call_with_frames_removed (<frozen importlib._bootstrap>:211)"}, {"pid": 9440, "tid": 27716, "ts": 723020493179.8, "ph": "X", "cat": "fee", "dur": 56454.7, "name": "exec_module (<frozen importlib._bootstrap_external>:842)"}, {"pid": 9440, "tid": 27716, "ts": 723020549685.8, "ph": "X", "cat": "fee", "dur": 1.3, "name": "dict.pop"}, {"pid": 9440, "tid": 27716, "ts": 723020549690.5, "ph": "X", "cat": "fee", "dur": 1.8, "name": "_verbose_message (<frozen importlib._bootstrap>:222)"}, {"pid": 9440, "tid": 27716, "ts": 723020493115.6, "ph": "X", "cat": "fee", "dur": 56578.3, "name": "_load_unlocked (<frozen importlib._bootstrap>:650)"}, {"pid": 9440, "tid": 27716, "ts": 723020491694.4, "ph": "X", "cat": "fee", "dur": 58000.8, "name": "_find_and_load_unlocked (<frozen importlib._bootstrap>:956)"}, {"pid": 9440, "tid": 27716, "ts": 723020549700.4, "ph": "X", "cat": "fee", "dur": 0.8, "name": "_thread.get_ident"}, {"pid": 9440, "tid": 27716, "ts": 723020549699.1, "ph": "X", "cat": "fee", "dur": 10.5, "name": "release (<frozen importlib._bootstrap>:103)"}, {"pid": 9440, "tid": 27716, "ts": 723020549697.2, "ph": "X", "cat": "fee", "dur": 13.0, "name": "__exit__ (<frozen importlib._bootstrap>:151)"}, {"pid": 9440, "tid": 27716, "ts": 723020549713.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_imp.acquire_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020549715.2, "ph": "X", "cat": "fee", "dur": 0.6, "name": "dict.get"}, {"pid": 9440, "tid": 27716, "ts": 723020549717.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "_imp.release_lock"}, {"pid": 9440, "tid": 27716, "ts": 723020549712.7, "ph": "X", "cat": "fee", "dur": 5.6, "name": "cb (<frozen importlib._bootstrap>:176)"}, {"pid": 9440, "tid": 27716, "ts": 723020491656.2, "ph": "X", "cat": "fee", "dur": 58072.1, "name": "_find_and_load (<frozen importlib._bootstrap>:986)"}, {"pid": 9440, "tid": 27716, "ts": 723020549733.3, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020549734.7, "ph": "X", "cat": "fee", "dur": 5.8, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723020549731.8, "ph": "X", "cat": "fee", "dur": 9.4, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1017)"}, {"pid": 9440, "tid": 27716, "ts": 723020549830.0, "ph": "X", "cat": "fee", "dur": 0.6, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723020549832.3, "ph": "X", "cat": "fee", "dur": 0.7, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020549831.7, "ph": "X", "cat": "fee", "dur": 1.6, "name": "_get_bothseps (C:\\Python38\\lib\\ntpath.py:34)"}, {"pid": 9440, "tid": 27716, "ts": 723020549835.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723020549835.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020549837.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020549838.3, "ph": "X", "cat": "fee", "dur": 1.0, "name": "str.replace"}, {"pid": 9440, "tid": 27716, "ts": 723020549834.4, "ph": "X", "cat": "fee", "dur": 9.4, "name": "splitdrive (C:\\Python38\\lib\\ntpath.py:124)"}, {"pid": 9440, "tid": 27716, "ts": 723020549844.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723020549853.2, "ph": "X", "cat": "fee", "dur": 1.3, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723020549828.8, "ph": "X", "cat": "fee", "dur": 27.0, "name": "split (C:\\Python38\\lib\\ntpath.py:180)"}, {"pid": 9440, "tid": 27716, "ts": 723020549827.8, "ph": "X", "cat": "fee", "dur": 29.2, "name": "basename (C:\\Python38\\lib\\ntpath.py:214)"}, {"pid": 9440, "tid": 27716, "ts": 723020549859.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723020549860.5, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723020549864.0, "ph": "X", "cat": "fee", "dur": 2.1, "name": "str.rfind"}, {"pid": 9440, "tid": 27716, "ts": 723020549866.8, "ph": "X", "cat": "fee", "dur": 0.7, "name": "str.rfind"}, {"pid": 9440, "tid": 27716, "ts": 723020549868.0, "ph": "X", "cat": "fee", "dur": 1.8, "name": "builtins.max"}, {"pid": 9440, "tid": 27716, "ts": 723020549870.2, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.rfind"}, {"pid": 9440, "tid": 27716, "ts": 723020549863.2, "ph": "X", "cat": "fee", "dur": 10.5, "name": "_splitext (C:\\Python38\\lib\\genericpath.py:121)"}, {"pid": 9440, "tid": 27716, "ts": 723020549859.2, "ph": "X", "cat": "fee", "dur": 15.0, "name": "splitext (C:\\Python38\\lib\\ntpath.py:203)"}, {"pid": 9440, "tid": 27716, "ts": 723020549876.1, "ph": "X", "cat": "fee", "dur": 761826.9, "name": "_tkinter.create"}, {"pid": 9440, "tid": 27716, "ts": 723021311723.2, "ph": "X", "cat": "fee", "dur": 25.9, "name": "_tkinter.tkapp.getvar"}, {"pid": 9440, "tid": 27716, "ts": 723021311753.2, "ph": "X", "cat": "fee", "dur": 2.3, "name": "_tkinter.tkapp.getvar"}, {"pid": 9440, "tid": 27716, "ts": 723021311762.2, "ph": "X", "cat": "fee", "dur": 7.5, "name": "_tkinter.tkapp.createcommand"}, {"pid": 9440, "tid": 27716, "ts": 723021311771.3, "ph": "X", "cat": "fee", "dur": 1.4, "name": "_tkinter.tkapp.createcommand"}, {"pid": 9440, "tid": 27716, "ts": 723021311774.0, "ph": "X", "cat": "fee", "dur": 0.7, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723021311775.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723021311781.6, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.callable"}, {"pid": 9440, "tid": 27716, "ts": 723021311788.0, "ph": "X", "cat": "fee", "dur": 3.1, "name": "__init__ (C:\\Python38\\lib\\tkinter\\__init__.py:1881)"}, {"pid": 9440, "tid": 27716, "ts": 723021311793.2, "ph": "X", "cat": "fee", "dur": 1.1, "name": "builtins.id"}, {"pid": 9440, "tid": 27716, "ts": 723021311794.5, "ph": "X", "cat": "fee", "dur": 1.6, "name": "builtins.repr"}, {"pid": 9440, "tid": 27716, "ts": 723021311802.0, "ph": "X", "cat": "fee", "dur": 1.8, "name": "_tkinter.tkapp.createcommand"}, {"pid": 9440, "tid": 27716, "ts": 723021311804.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723021311784.5, "ph": "X", "cat": "fee", "dur": 20.7, "name": "_register (C:\\Python38\\lib\\tkinter\\__init__.py:1513)"}, {"pid": 9440, "tid": 27716, "ts": 723021311807.6, "ph": "X", "cat": "fee", "dur": 41.3, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723021311780.8, "ph": "X", "cat": "fee", "dur": 68.4, "name": "wm_protocol (C:\\Python38\\lib\\tkinter\\__init__.py:2189)"}, {"pid": 9440, "tid": 27716, "ts": 723021311718.7, "ph": "X", "cat": "fee", "dur": 131.3, "name": "_loadtk (C:\\Python38\\lib\\tkinter\\__init__.py:2282)"}, {"pid": 9440, "tid": 27716, "ts": 723021311873.1, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021311872.1, "ph": "X", "cat": "fee", "dur": 1.8, "name": "check_str (C:\\Python38\\lib\\os.py:734)"}, {"pid": 9440, "tid": 27716, "ts": 723021311875.0, "ph": "X", "cat": "fee", "dur": 0.9, "name": "str.upper"}, {"pid": 9440, "tid": 27716, "ts": 723021311871.3, "ph": "X", "cat": "fee", "dur": 4.8, "name": "encodekey (C:\\Python38\\lib\\os.py:740)"}, {"pid": 9440, "tid": 27716, "ts": 723021311869.0, "ph": "X", "cat": "fee", "dur": 13.1, "name": "__getitem__ (C:\\Python38\\lib\\os.py:670)"}, {"pid": 9440, "tid": 27716, "ts": 723021311866.0, "ph": "X", "cat": "fee", "dur": 19.7, "name": "__contains__ (C:\\Python38\\lib\\_collections_abc.py:664)"}, {"pid": 9440, "tid": 27716, "ts": 723021311892.5, "ph": "X", "cat": "fee", "dur": 0.8, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723021311893.8, "ph": "X", "cat": "fee", "dur": 0.8, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021311896.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723021311897.5, "ph": "X", "cat": "fee", "dur": 0.6, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723021311896.4, "ph": "X", "cat": "fee", "dur": 4.2, "name": "splitdrive (C:\\Python38\\lib\\ntpath.py:124)"}, {"pid": 9440, "tid": 27716, "ts": 723021311904.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723021311904.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723021311905.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021311906.1, "ph": "X", "cat": "fee", "dur": 0.8, "name": "str.replace"}, {"pid": 9440, "tid": 27716, "ts": 723021311903.8, "ph": "X", "cat": "fee", "dur": 6.3, "name": "splitdrive (C:\\Python38\\lib\\ntpath.py:124)"}, {"pid": 9440, "tid": 27716, "ts": 723021311891.6, "ph": "X", "cat": "fee", "dur": 22.3, "name": "join (C:\\Python38\\lib\\ntpath.py:77)"}, {"pid": 9440, "tid": 27716, "ts": 723021311916.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723021311917.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021311918.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723021311918.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723021311917.8, "ph": "X", "cat": "fee", "dur": 1.0, "name": "splitdrive (C:\\Python38\\lib\\ntpath.py:124)"}, {"pid": 9440, "tid": 27716, "ts": 723021311920.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723021311920.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723021311920.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021311921.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.replace"}, {"pid": 9440, "tid": 27716, "ts": 723021311919.8, "ph": "X", "cat": "fee", "dur": 2.8, "name": "splitdrive (C:\\Python38\\lib\\ntpath.py:124)"}, {"pid": 9440, "tid": 27716, "ts": 723021311916.0, "ph": "X", "cat": "fee", "dur": 8.3, "name": "join (C:\\Python38\\lib\\ntpath.py:77)"}, {"pid": 9440, "tid": 27716, "ts": 723021311926.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723021311926.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021311927.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723021311927.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723021311927.2, "ph": "X", "cat": "fee", "dur": 0.9, "name": "splitdrive (C:\\Python38\\lib\\ntpath.py:124)"}, {"pid": 9440, "tid": 27716, "ts": 723021311929.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723021311929.5, "ph": "X", "cat": "fee", "dur": 0.6, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723021311930.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021311930.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.replace"}, {"pid": 9440, "tid": 27716, "ts": 723021311929.0, "ph": "X", "cat": "fee", "dur": 3.2, "name": "splitdrive (C:\\Python38\\lib\\ntpath.py:124)"}, {"pid": 9440, "tid": 27716, "ts": 723021311926.2, "ph": "X", "cat": "fee", "dur": 7.4, "name": "join (C:\\Python38\\lib\\ntpath.py:77)"}, {"pid": 9440, "tid": 27716, "ts": 723021311934.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723021311935.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021311935.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723021311936.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723021311935.7, "ph": "X", "cat": "fee", "dur": 0.9, "name": "splitdrive (C:\\Python38\\lib\\ntpath.py:124)"}, {"pid": 9440, "tid": 27716, "ts": 723021311937.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723021311937.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723021311938.2, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021311938.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.replace"}, {"pid": 9440, "tid": 27716, "ts": 723021311937.4, "ph": "X", "cat": "fee", "dur": 2.3, "name": "splitdrive (C:\\Python38\\lib\\ntpath.py:124)"}, {"pid": 9440, "tid": 27716, "ts": 723021311934.6, "ph": "X", "cat": "fee", "dur": 6.4, "name": "join (C:\\Python38\\lib\\ntpath.py:77)"}, {"pid": 9440, "tid": 27716, "ts": 723021312041.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021312042.7, "ph": "X", "cat": "fee", "dur": 6.2, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723021312040.2, "ph": "X", "cat": "fee", "dur": 9.4, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1017)"}, {"pid": 9440, "tid": 27716, "ts": 723021312034.1, "ph": "X", "cat": "fee", "dur": 75.2, "name": "<module> (<string>:1)"}, {"pid": 9440, "tid": 27716, "ts": 723021311942.8, "ph": "X", "cat": "fee", "dur": 169.8, "name": "builtins.exec"}, {"pid": 9440, "tid": 27716, "ts": 723021312115.7, "ph": "X", "cat": "fee", "dur": 823.9, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723021312114.7, "ph": "X", "cat": "fee", "dur": 828.3, "name": "isfile (C:\\Python38\\lib\\genericpath.py:27)"}, {"pid": 9440, "tid": 27716, "ts": 723021312945.2, "ph": "X", "cat": "fee", "dur": 38.8, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723021312944.9, "ph": "X", "cat": "fee", "dur": 40.9, "name": "isfile (C:\\Python38\\lib\\genericpath.py:27)"}, {"pid": 9440, "tid": 27716, "ts": 723021312987.5, "ph": "X", "cat": "fee", "dur": 39.2, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723021312987.2, "ph": "X", "cat": "fee", "dur": 41.3, "name": "isfile (C:\\Python38\\lib\\genericpath.py:27)"}, {"pid": 9440, "tid": 27716, "ts": 723021313030.1, "ph": "X", "cat": "fee", "dur": 31.2, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723021313029.8, "ph": "X", "cat": "fee", "dur": 33.0, "name": "isfile (C:\\Python38\\lib\\genericpath.py:27)"}, {"pid": 9440, "tid": 27716, "ts": 723021311856.2, "ph": "X", "cat": "fee", "dur": 1207.2, "name": "readprofile (C:\\Python38\\lib\\tkinter\\__init__.py:2318)"}, {"pid": 9440, "tid": 27716, "ts": 723020549818.4, "ph": "X", "cat": "fee", "dur": 763248.8, "name": "__init__ (C:\\Python38\\lib\\tkinter\\__init__.py:2250)"}, {"pid": 9440, "tid": 27716, "ts": 723021313099.1, "ph": "X", "cat": "fee", "dur": 11.3, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723021313096.7, "ph": "X", "cat": "fee", "dur": 14.1, "name": "wm_title (C:\\Python38\\lib\\tkinter\\__init__.py:2224)"}, {"pid": 9440, "tid": 27716, "ts": 723021313114.1, "ph": "X", "cat": "fee", "dur": 3.4, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723021313118.6, "ph": "X", "cat": "fee", "dur": 0.6, "name": "_getboolean (C:\\Python38\\lib\\tkinter\\__init__.py:1445)"}, {"pid": 9440, "tid": 27716, "ts": 723021313112.5, "ph": "X", "cat": "fee", "dur": 7.0, "name": "wm_overrideredirect (C:\\Python38\\lib\\tkinter\\__init__.py:2172)"}, {"pid": 9440, "tid": 27716, "ts": 723021313134.4, "ph": "X", "cat": "fee", "dur": 0.9, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021313136.5, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021313137.7, "ph": "X", "cat": "fee", "dur": 1.1, "name": "_tkinter._flatten"}, {"pid": 9440, "tid": 27716, "ts": 723021313140.5, "ph": "X", "cat": "fee", "dur": 1.6, "name": "dict.update"}, {"pid": 9440, "tid": 27716, "ts": 723021313142.7, "ph": "X", "cat": "fee", "dur": 0.9, "name": "dict.update"}, {"pid": 9440, "tid": 27716, "ts": 723021313133.6, "ph": "X", "cat": "fee", "dur": 10.6, "name": "_cnfmerge (C:\\Python38\\lib\\tkinter\\__init__.py:101)"}, {"pid": 9440, "tid": 27716, "ts": 723021313154.6, "ph": "X", "cat": "fee", "dur": 0.6, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723021313158.4, "ph": "X", "cat": "fee", "dur": 0.5, "name": "dict.get"}, {"pid": 9440, "tid": 27716, "ts": 723021313148.9, "ph": "X", "cat": "fee", "dur": 18.6, "name": "_setup (C:\\Python38\\lib\\tkinter\\__init__.py:2530)"}, {"pid": 9440, "tid": 27716, "ts": 723021313169.8, "ph": "X", "cat": "fee", "dur": 0.5, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723021313172.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021313173.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021313173.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021313171.4, "ph": "X", "cat": "fee", "dur": 2.7, "name": "<listcomp> (C:\\Python38\\lib\\tkinter\\__init__.py:2569)"}, {"pid": 9440, "tid": 27716, "ts": 723021313179.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021313179.5, "ph": "X", "cat": "fee", "dur": 0.7, "name": "_cnfmerge (C:\\Python38\\lib\\tkinter\\__init__.py:101)"}, {"pid": 9440, "tid": 27716, "ts": 723021313180.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723021313182.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.callable"}, {"pid": 9440, "tid": 27716, "ts": 723021313183.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021313185.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.callable"}, {"pid": 9440, "tid": 27716, "ts": 723021313186.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021313187.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.callable"}, {"pid": 9440, "tid": 27716, "ts": 723021313188.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021313189.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021313189.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021313191.6, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021313195.4, "ph": "X", "cat": "fee", "dur": 1.9, "name": "re.Pattern.search"}, {"pid": 9440, "tid": 27716, "ts": 723021313198.5, "ph": "X", "cat": "fee", "dur": 5.0, "name": "re.Pattern.search"}, {"pid": 9440, "tid": 27716, "ts": 723021313190.8, "ph": "X", "cat": "fee", "dur": 14.3, "name": "_stringify (C:\\Python38\\lib\\tkinter\\__init__.py:61)"}, {"pid": 9440, "tid": 27716, "ts": 723021313205.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723021313206.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021313208.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723021313209.4, "ph": "X", "cat": "fee", "dur": 0.7, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723021313178.7, "ph": "X", "cat": "fee", "dur": 32.9, "name": "_options (C:\\Python38\\lib\\tkinter\\__init__.py:1468)"}, {"pid": 9440, "tid": 27716, "ts": 723021313212.9, "ph": "X", "cat": "fee", "dur": 3086.0, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723021313131.6, "ph": "X", "cat": "fee", "dur": 3174.4, "name": "__init__ (C:\\Python38\\lib\\tkinter\\__init__.py:2560)"}, {"pid": 9440, "tid": 27716, "ts": 723021313128.6, "ph": "X", "cat": "fee", "dur": 3181.5, "name": "__init__ (C:\\Python38\\lib\\tkinter\\__init__.py:3130)"}, {"pid": 9440, "tid": 27716, "ts": 723021316329.0, "ph": "X", "cat": "fee", "dur": 1.5, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021316332.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021316333.6, "ph": "X", "cat": "fee", "dur": 1.3, "name": "_tkinter._flatten"}, {"pid": 9440, "tid": 27716, "ts": 723021316336.7, "ph": "X", "cat": "fee", "dur": 1.9, "name": "dict.update"}, {"pid": 9440, "tid": 27716, "ts": 723021316339.7, "ph": "X", "cat": "fee", "dur": 1.0, "name": "dict.update"}, {"pid": 9440, "tid": 27716, "ts": 723021316327.1, "ph": "X", "cat": "fee", "dur": 14.3, "name": "_cnfmerge (C:\\Python38\\lib\\tkinter\\__init__.py:101)"}, {"pid": 9440, "tid": 27716, "ts": 723021316342.6, "ph": "X", "cat": "fee", "dur": 0.8, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723021316346.4, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.callable"}, {"pid": 9440, "tid": 27716, "ts": 723021316347.5, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723021316325.0, "ph": "X", "cat": "fee", "dur": 25.2, "name": "_options (C:\\Python38\\lib\\tkinter\\__init__.py:1468)"}, {"pid": 9440, "tid": 27716, "ts": 723021316351.3, "ph": "X", "cat": "fee", "dur": 30.7, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723021316322.2, "ph": "X", "cat": "fee", "dur": 60.4, "name": "pack_configure (C:\\Python38\\lib\\tkinter\\__init__.py:2380)"}, {"pid": 9440, "tid": 27716, "ts": 723021316388.7, "ph": "X", "cat": "fee", "dur": 4.6, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723021316387.5, "ph": "X", "cat": "fee", "dur": 6.1, "name": "wm_withdraw (C:\\Python38\\lib\\tkinter\\__init__.py:2237)"}, {"pid": 9440, "tid": 27716, "ts": 723021316396.4, "ph": "X", "cat": "fee", "dur": 40325.3, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723021316395.7, "ph": "X", "cat": "fee", "dur": 40327.9, "name": "update_idletasks (C:\\Python38\\lib\\tkinter\\__init__.py:1316)"}, {"pid": 9440, "tid": 27716, "ts": 723021356734.3, "ph": "X", "cat": "fee", "dur": 7.9, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723021356742.3, "ph": "X", "cat": "fee", "dur": 5.3, "name": "_tkinter.tkapp.getint"}, {"pid": 9440, "tid": 27716, "ts": 723021356730.8, "ph": "X", "cat": "fee", "dur": 16.9, "name": "winfo_screenwidth (C:\\Python38\\lib\\tkinter\\__init__.py:1219)"}, {"pid": 9440, "tid": 27716, "ts": 723021356749.3, "ph": "X", "cat": "fee", "dur": 1.7, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723021356751.1, "ph": "X", "cat": "fee", "dur": 0.02, "name": "_tkinter.tkapp.getint"}, {"pid": 9440, "tid": 27716, "ts": 723021356748.8, "ph": "X", "cat": "fee", "dur": 2.4, "name": "winfo_reqwidth (C:\\Python38\\lib\\tkinter\\__init__.py:1157)"}, {"pid": 9440, "tid": 27716, "ts": 723021356754.7, "ph": "X", "cat": "fee", "dur": 1.0, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723021356755.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_tkinter.tkapp.getint"}, {"pid": 9440, "tid": 27716, "ts": 723021356754.2, "ph": "X", "cat": "fee", "dur": 1.72, "name": "winfo_screenheight (C:\\Python38\\lib\\tkinter\\__init__.py:1195)"}, {"pid": 9440, "tid": 27716, "ts": 723021356757.0, "ph": "X", "cat": "fee", "dur": 0.8, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723021356757.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_tkinter.tkapp.getint"}, {"pid": 9440, "tid": 27716, "ts": 723021356756.6, "ph": "X", "cat": "fee", "dur": 1.42, "name": "winfo_reqheight (C:\\Python38\\lib\\tkinter\\__init__.py:1152)"}, {"pid": 9440, "tid": 27716, "ts": 723021356765.0, "ph": "X", "cat": "fee", "dur": 8.7, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723021356764.5, "ph": "X", "cat": "fee", "dur": 9.3, "name": "wm_geometry (C:\\Python38\\lib\\tkinter\\__init__.py:2041)"}, {"pid": 9440, "tid": 27716, "ts": 723021356776.2, "ph": "X", "cat": "fee", "dur": 5534.4, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723021356775.7, "ph": "X", "cat": "fee", "dur": 5536.4, "name": "wm_deiconify (C:\\Python38\\lib\\tkinter\\__init__.py:2010)"}, {"pid": 9440, "tid": 27716, "ts": 723020549815.2, "ph": "X", "cat": "fee", "dur": 812498.9, "name": "splash_window (C:\\Users\\002CSC744\\PycharmProjects\\APP_UI\\splash_screen\\__init__.py:5)"}, {"pid": 9440, "tid": 27716, "ts": 723021362334.9, "ph": "X", "cat": "fee", "dur": 2.3, "name": "__init__ (C:\\Python38\\lib\\tkinter\\__init__.py:1881)"}, {"pid": 9440, "tid": 27716, "ts": 723021362338.3, "ph": "X", "cat": "fee", "dur": 0.9, "name": "builtins.id"}, {"pid": 9440, "tid": 27716, "ts": 723021362339.3, "ph": "X", "cat": "fee", "dur": 1.5, "name": "builtins.repr"}, {"pid": 9440, "tid": 27716, "ts": 723021362346.9, "ph": "X", "cat": "fee", "dur": 4.0, "name": "_tkinter.tkapp.createcommand"}, {"pid": 9440, "tid": 27716, "ts": 723021362352.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723021362333.1, "ph": "X", "cat": "fee", "dur": 19.3, "name": "_register (C:\\Python38\\lib\\tkinter\\__init__.py:1513)"}, {"pid": 9440, "tid": 27716, "ts": 723021362353.2, "ph": "X", "cat": "fee", "dur": 281.0, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723021362329.9, "ph": "X", "cat": "fee", "dur": 304.9, "name": "after (C:\\Python38\\lib\\tkinter\\__init__.py:800)"}, {"pid": 9440, "tid": 27716, "ts": 723021362638.5, "ph": "X", "cat": "fee", "dur": 0.6, "name": "_get_default_root (C:\\Python38\\lib\\tkinter\\__init__.py:291)"}, {"pid": 9440, "tid": 27716, "ts": 723026365096.6, "ph": "X", "cat": "fee", "dur": 2.7, "name": "dict.values"}, {"pid": 9440, "tid": 27716, "ts": 723026365120.7, "ph": "X", "cat": "fee", "dur": 0.9, "name": "dict.values"}, {"pid": 9440, "tid": 27716, "ts": 723026365128.0, "ph": "X", "cat": "fee", "dur": 6712.6, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723026371870.6, "ph": "X", "cat": "fee", "dur": 6.6, "name": "destroy (C:\\Python38\\lib\\tkinter\\__init__.py:632)"}, {"pid": 9440, "tid": 27716, "ts": 723026365118.6, "ph": "X", "cat": "fee", "dur": 6760.4, "name": "destroy (C:\\Python38\\lib\\tkinter\\__init__.py:2577)"}, {"pid": 9440, "tid": 27716, "ts": 723026371887.1, "ph": "X", "cat": "fee", "dur": 44777.2, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723026416679.8, "ph": "X", "cat": "fee", "dur": 5.8, "name": "_tkinter.tkapp.deletecommand"}, {"pid": 9440, "tid": 27716, "ts": 723026416686.1, "ph": "X", "cat": "fee", "dur": 1.2, "name": "_tkinter.tkapp.deletecommand"}, {"pid": 9440, "tid": 27716, "ts": 723026416687.7, "ph": "X", "cat": "fee", "dur": 2.8, "name": "_tkinter.tkapp.deletecommand"}, {"pid": 9440, "tid": 27716, "ts": 723026416691.5, "ph": "X", "cat": "fee", "dur": 1.3, "name": "_tkinter.tkapp.deletecommand"}, {"pid": 9440, "tid": 27716, "ts": 723026416672.5, "ph": "X", "cat": "fee", "dur": 22.4, "name": "destroy (C:\\Python38\\lib\\tkinter\\__init__.py:632)"}, {"pid": 9440, "tid": 27716, "ts": 723026365090.2, "ph": "X", "cat": "fee", "dur": 51607.1, "name": "destroy (C:\\Python38\\lib\\tkinter\\__init__.py:2308)"}, {"pid": 9440, "tid": 27716, "ts": 723026416720.7, "ph": "X", "cat": "fee", "dur": 1.9, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723026416725.7, "ph": "X", "cat": "fee", "dur": 2.6, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026416724.0, "ph": "X", "cat": "fee", "dur": 4.9, "name": "_get_bothseps (C:\\Python38\\lib\\ntpath.py:34)"}, {"pid": 9440, "tid": 27716, "ts": 723026416730.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723026416731.2, "ph": "X", "cat": "fee", "dur": 0.5, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723026416732.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026416733.6, "ph": "X", "cat": "fee", "dur": 1.0, "name": "str.replace"}, {"pid": 9440, "tid": 27716, "ts": 723026416730.1, "ph": "X", "cat": "fee", "dur": 10.0, "name": "splitdrive (C:\\Python38\\lib\\ntpath.py:124)"}, {"pid": 9440, "tid": 27716, "ts": 723026416740.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723026416748.4, "ph": "X", "cat": "fee", "dur": 0.9, "name": "str.rstrip"}, {"pid": 9440, "tid": 27716, "ts": 723026416719.4, "ph": "X", "cat": "fee", "dur": 31.2, "name": "split (C:\\Python38\\lib\\ntpath.py:180)"}, {"pid": 9440, "tid": 27716, "ts": 723026416717.8, "ph": "X", "cat": "fee", "dur": 33.6, "name": "basename (C:\\Python38\\lib\\ntpath.py:214)"}, {"pid": 9440, "tid": 27716, "ts": 723026416753.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723026416754.0, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026416757.5, "ph": "X", "cat": "fee", "dur": 3.1, "name": "str.rfind"}, {"pid": 9440, "tid": 27716, "ts": 723026416760.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.rfind"}, {"pid": 9440, "tid": 27716, "ts": 723026416762.1, "ph": "X", "cat": "fee", "dur": 2.7, "name": "builtins.max"}, {"pid": 9440, "tid": 27716, "ts": 723026416764.9, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.rfind"}, {"pid": 9440, "tid": 27716, "ts": 723026416756.2, "ph": "X", "cat": "fee", "dur": 10.6, "name": "_splitext (C:\\Python38\\lib\\genericpath.py:121)"}, {"pid": 9440, "tid": 27716, "ts": 723026416753.1, "ph": "X", "cat": "fee", "dur": 13.9, "name": "splitext (C:\\Python38\\lib\\ntpath.py:203)"}, {"pid": 9440, "tid": 27716, "ts": 723026416768.9, "ph": "X", "cat": "fee", "dur": 50597.3, "name": "_tkinter.create"}, {"pid": 9440, "tid": 27716, "ts": 723026467374.7, "ph": "X", "cat": "fee", "dur": 4.8, "name": "_tkinter.tkapp.getvar"}, {"pid": 9440, "tid": 27716, "ts": 723026467381.8, "ph": "X", "cat": "fee", "dur": 1.3, "name": "_tkinter.tkapp.getvar"}, {"pid": 9440, "tid": 27716, "ts": 723026467385.7, "ph": "X", "cat": "fee", "dur": 1.8, "name": "_tkinter.tkapp.createcommand"}, {"pid": 9440, "tid": 27716, "ts": 723026467387.9, "ph": "X", "cat": "fee", "dur": 0.6, "name": "_tkinter.tkapp.createcommand"}, {"pid": 9440, "tid": 27716, "ts": 723026467389.4, "ph": "X", "cat": "fee", "dur": 0.5, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723026467390.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723026467392.4, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.callable"}, {"pid": 9440, "tid": 27716, "ts": 723026467396.2, "ph": "X", "cat": "fee", "dur": 1.7, "name": "__init__ (C:\\Python38\\lib\\tkinter\\__init__.py:1881)"}, {"pid": 9440, "tid": 27716, "ts": 723026467399.0, "ph": "X", "cat": "fee", "dur": 0.6, "name": "builtins.id"}, {"pid": 9440, "tid": 27716, "ts": 723026467399.7, "ph": "X", "cat": "fee", "dur": 1.2, "name": "builtins.repr"}, {"pid": 9440, "tid": 27716, "ts": 723026467403.5, "ph": "X", "cat": "fee", "dur": 0.9, "name": "_tkinter.tkapp.createcommand"}, {"pid": 9440, "tid": 27716, "ts": 723026467404.9, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723026467394.5, "ph": "X", "cat": "fee", "dur": 10.6, "name": "_register (C:\\Python38\\lib\\tkinter\\__init__.py:1513)"}, {"pid": 9440, "tid": 27716, "ts": 723026467406.2, "ph": "X", "cat": "fee", "dur": 4.5, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723026467392.0, "ph": "X", "cat": "fee", "dur": 18.8, "name": "wm_protocol (C:\\Python38\\lib\\tkinter\\__init__.py:2189)"}, {"pid": 9440, "tid": 27716, "ts": 723026467372.3, "ph": "X", "cat": "fee", "dur": 38.8, "name": "_loadtk (C:\\Python38\\lib\\tkinter\\__init__.py:2282)"}, {"pid": 9440, "tid": 27716, "ts": 723026467421.8, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467421.4, "ph": "X", "cat": "fee", "dur": 0.8, "name": "check_str (C:\\Python38\\lib\\os.py:734)"}, {"pid": 9440, "tid": 27716, "ts": 723026467422.7, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.upper"}, {"pid": 9440, "tid": 27716, "ts": 723026467421.1, "ph": "X", "cat": "fee", "dur": 2.02, "name": "encodekey (C:\\Python38\\lib\\os.py:740)"}, {"pid": 9440, "tid": 27716, "ts": 723026467419.7, "ph": "X", "cat": "fee", "dur": 6.3, "name": "__getitem__ (C:\\Python38\\lib\\os.py:670)"}, {"pid": 9440, "tid": 27716, "ts": 723026467418.5, "ph": "X", "cat": "fee", "dur": 9.0, "name": "__contains__ (C:\\Python38\\lib\\_collections_abc.py:664)"}, {"pid": 9440, "tid": 27716, "ts": 723026467430.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723026467431.4, "ph": "X", "cat": "fee", "dur": 0.4, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467432.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723026467433.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723026467432.5, "ph": "X", "cat": "fee", "dur": 1.7, "name": "splitdrive (C:\\Python38\\lib\\ntpath.py:124)"}, {"pid": 9440, "tid": 27716, "ts": 723026467436.1, "ph": "X", "cat": "fee", "dur": 0.02, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723026467436.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723026467436.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467437.0, "ph": "X", "cat": "fee", "dur": 0.4, "name": "str.replace"}, {"pid": 9440, "tid": 27716, "ts": 723026467436.0, "ph": "X", "cat": "fee", "dur": 2.9, "name": "splitdrive (C:\\Python38\\lib\\ntpath.py:124)"}, {"pid": 9440, "tid": 27716, "ts": 723026467430.2, "ph": "X", "cat": "fee", "dur": 10.4, "name": "join (C:\\Python38\\lib\\ntpath.py:77)"}, {"pid": 9440, "tid": 27716, "ts": 723026467441.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723026467441.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467441.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723026467442.02, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723026467441.8, "ph": "X", "cat": "fee", "dur": 0.5, "name": "splitdrive (C:\\Python38\\lib\\ntpath.py:124)"}, {"pid": 9440, "tid": 27716, "ts": 723026467442.8, "ph": "X", "cat": "fee", "dur": 0.02, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723026467442.9, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723026467443.1, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467443.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.replace"}, {"pid": 9440, "tid": 27716, "ts": 723026467442.7, "ph": "X", "cat": "fee", "dur": 1.1, "name": "splitdrive (C:\\Python38\\lib\\ntpath.py:124)"}, {"pid": 9440, "tid": 27716, "ts": 723026467441.3, "ph": "X", "cat": "fee", "dur": 3.1, "name": "join (C:\\Python38\\lib\\ntpath.py:77)"}, {"pid": 9440, "tid": 27716, "ts": 723026467445.0, "ph": "X", "cat": "fee", "dur": 0.02, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723026467445.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467445.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723026467445.52, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723026467445.3, "ph": "X", "cat": "fee", "dur": 0.5, "name": "splitdrive (C:\\Python38\\lib\\ntpath.py:124)"}, {"pid": 9440, "tid": 27716, "ts": 723026467446.12, "ph": "X", "cat": "fee", "dur": 0.08, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723026467446.3, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723026467446.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467446.7, "ph": "X", "cat": "fee", "dur": 0.02, "name": "str.replace"}, {"pid": 9440, "tid": 27716, "ts": 723026467446.1, "ph": "X", "cat": "fee", "dur": 1.2, "name": "splitdrive (C:\\Python38\\lib\\ntpath.py:124)"}, {"pid": 9440, "tid": 27716, "ts": 723026467444.9, "ph": "X", "cat": "fee", "dur": 2.9, "name": "join (C:\\Python38\\lib\\ntpath.py:77)"}, {"pid": 9440, "tid": 27716, "ts": 723026467448.3, "ph": "X", "cat": "fee", "dur": 0.02, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723026467448.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467448.7, "ph": "X", "cat": "fee", "dur": 0.02, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723026467448.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723026467448.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "splitdrive (C:\\Python38\\lib\\ntpath.py:124)"}, {"pid": 9440, "tid": 27716, "ts": 723026467449.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "nt.fspath"}, {"pid": 9440, "tid": 27716, "ts": 723026467449.52, "ph": "X", "cat": "fee", "dur": 0.08, "name": "builtins.len"}, {"pid": 9440, "tid": 27716, "ts": 723026467449.7, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467449.9, "ph": "X", "cat": "fee", "dur": 0.1, "name": "str.replace"}, {"pid": 9440, "tid": 27716, "ts": 723026467449.3, "ph": "X", "cat": "fee", "dur": 1.0, "name": "splitdrive (C:\\Python38\\lib\\ntpath.py:124)"}, {"pid": 9440, "tid": 27716, "ts": 723026467448.2, "ph": "X", "cat": "fee", "dur": 2.5, "name": "join (C:\\Python38\\lib\\ntpath.py:77)"}, {"pid": 9440, "tid": 27716, "ts": 723026467503.8, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467504.4, "ph": "X", "cat": "fee", "dur": 2.1, "name": "builtins.hasattr"}, {"pid": 9440, "tid": 27716, "ts": 723026467503.4, "ph": "X", "cat": "fee", "dur": 3.4, "name": "_handle_fromlist (<frozen importlib._bootstrap>:1017)"}, {"pid": 9440, "tid": 27716, "ts": 723026467500.7, "ph": "X", "cat": "fee", "dur": 32.8, "name": "<module> (<string>:1)"}, {"pid": 9440, "tid": 27716, "ts": 723026467451.4, "ph": "X", "cat": "fee", "dur": 82.9, "name": "builtins.exec"}, {"pid": 9440, "tid": 27716, "ts": 723026467535.8, "ph": "X", "cat": "fee", "dur": 37.8, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723026467535.4, "ph": "X", "cat": "fee", "dur": 39.7, "name": "isfile (C:\\Python38\\lib\\genericpath.py:27)"}, {"pid": 9440, "tid": 27716, "ts": 723026467576.0, "ph": "X", "cat": "fee", "dur": 15.0, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723026467575.8, "ph": "X", "cat": "fee", "dur": 15.9, "name": "isfile (C:\\Python38\\lib\\genericpath.py:27)"}, {"pid": 9440, "tid": 27716, "ts": 723026467592.3, "ph": "X", "cat": "fee", "dur": 13.2, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723026467592.2, "ph": "X", "cat": "fee", "dur": 13.9, "name": "isfile (C:\\Python38\\lib\\genericpath.py:27)"}, {"pid": 9440, "tid": 27716, "ts": 723026467606.7, "ph": "X", "cat": "fee", "dur": 11.8, "name": "nt.stat"}, {"pid": 9440, "tid": 27716, "ts": 723026467606.6, "ph": "X", "cat": "fee", "dur": 12.4, "name": "isfile (C:\\Python38\\lib\\genericpath.py:27)"}, {"pid": 9440, "tid": 27716, "ts": 723026467413.9, "ph": "X", "cat": "fee", "dur": 205.3, "name": "readprofile (C:\\Python38\\lib\\tkinter\\__init__.py:2318)"}, {"pid": 9440, "tid": 27716, "ts": 723026416705.6, "ph": "X", "cat": "fee", "dur": 50914.9, "name": "__init__ (C:\\Python38\\lib\\tkinter\\__init__.py:2250)"}, {"pid": 9440, "tid": 27716, "ts": 723026467622.9, "ph": "X", "cat": "fee", "dur": 4.2, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723026467622.0, "ph": "X", "cat": "fee", "dur": 5.3, "name": "wm_title (C:\\Python38\\lib\\tkinter\\__init__.py:2224)"}, {"pid": 9440, "tid": 27716, "ts": 723026467628.2, "ph": "X", "cat": "fee", "dur": 2.2, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723026467627.9, "ph": "X", "cat": "fee", "dur": 2.52, "name": "wm_geometry (C:\\Python38\\lib\\tkinter\\__init__.py:2041)"}, {"pid": 9440, "tid": 27716, "ts": 723026467635.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467636.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467636.8, "ph": "X", "cat": "fee", "dur": 0.5, "name": "_tkinter._flatten"}, {"pid": 9440, "tid": 27716, "ts": 723026467637.9, "ph": "X", "cat": "fee", "dur": 0.7, "name": "dict.update"}, {"pid": 9440, "tid": 27716, "ts": 723026467638.8, "ph": "X", "cat": "fee", "dur": 0.4, "name": "dict.update"}, {"pid": 9440, "tid": 27716, "ts": 723026467635.3, "ph": "X", "cat": "fee", "dur": 4.1, "name": "_cnfmerge (C:\\Python38\\lib\\tkinter\\__init__.py:101)"}, {"pid": 9440, "tid": 27716, "ts": 723026467642.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "str.lower"}, {"pid": 9440, "tid": 27716, "ts": 723026467642.9, "ph": "X", "cat": "fee", "dur": 0.3, "name": "dict.get"}, {"pid": 9440, "tid": 27716, "ts": 723026467640.5, "ph": "X", "cat": "fee", "dur": 5.1, "name": "_setup (C:\\Python38\\lib\\tkinter\\__init__.py:2530)"}, {"pid": 9440, "tid": 27716, "ts": 723026467646.4, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723026467647.2, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467647.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467647.7, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467646.9, "ph": "X", "cat": "fee", "dur": 1.0, "name": "<listcomp> (C:\\Python38\\lib\\tkinter\\__init__.py:2569)"}, {"pid": 9440, "tid": 27716, "ts": 723026467649.6, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467649.5, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_cnfmerge (C:\\Python38\\lib\\tkinter\\__init__.py:101)"}, {"pid": 9440, "tid": 27716, "ts": 723026467650.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723026467650.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.callable"}, {"pid": 9440, "tid": 27716, "ts": 723026467651.1, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467651.8, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.callable"}, {"pid": 9440, "tid": 27716, "ts": 723026467652.0, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467652.4, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467652.6, "ph": "X", "cat": "fee", "dur": 0.02, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467653.4, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467654.5, "ph": "X", "cat": "fee", "dur": 1.2, "name": "re.Pattern.search"}, {"pid": 9440, "tid": 27716, "ts": 723026467656.2, "ph": "X", "cat": "fee", "dur": 0.4, "name": "re.Pattern.search"}, {"pid": 9440, "tid": 27716, "ts": 723026467652.9, "ph": "X", "cat": "fee", "dur": 3.72, "name": "_stringify (C:\\Python38\\lib\\tkinter\\__init__.py:61)"}, {"pid": 9440, "tid": 27716, "ts": 723026467656.8, "ph": "X", "cat": "fee", "dur": 0.1, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723026467657.1, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467657.7, "ph": "X", "cat": "fee", "dur": 0.02, "name": "list.append"}, {"pid": 9440, "tid": 27716, "ts": 723026467658.2, "ph": "X", "cat": "fee", "dur": 0.3, "name": "str.join"}, {"pid": 9440, "tid": 27716, "ts": 723026467659.3, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.callable"}, {"pid": 9440, "tid": 27716, "ts": 723026467659.5, "ph": "X", "cat": "fee", "dur": 0.1, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026467649.2, "ph": "X", "cat": "fee", "dur": 10.9, "name": "_options (C:\\Python38\\lib\\tkinter\\__init__.py:1468)"}, {"pid": 9440, "tid": 27716, "ts": 723026467660.5, "ph": "X", "cat": "fee", "dur": 659.4, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723026467634.7, "ph": "X", "cat": "fee", "dur": 686.5, "name": "__init__ (C:\\Python38\\lib\\tkinter\\__init__.py:2560)"}, {"pid": 9440, "tid": 27716, "ts": 723026467633.7, "ph": "X", "cat": "fee", "dur": 688.4, "name": "__init__ (C:\\Python38\\lib\\tkinter\\__init__.py:3130)"}, {"pid": 9440, "tid": 27716, "ts": 723026468326.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026468326.7, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026468327.1, "ph": "X", "cat": "fee", "dur": 0.3, "name": "_tkinter._flatten"}, {"pid": 9440, "tid": 27716, "ts": 723026468327.8, "ph": "X", "cat": "fee", "dur": 0.6, "name": "dict.update"}, {"pid": 9440, "tid": 27716, "ts": 723026468328.7, "ph": "X", "cat": "fee", "dur": 0.3, "name": "dict.update"}, {"pid": 9440, "tid": 27716, "ts": 723026468325.8, "ph": "X", "cat": "fee", "dur": 3.4, "name": "_cnfmerge (C:\\Python38\\lib\\tkinter\\__init__.py:101)"}, {"pid": 9440, "tid": 27716, "ts": 723026468329.5, "ph": "X", "cat": "fee", "dur": 0.2, "name": "dict.items"}, {"pid": 9440, "tid": 27716, "ts": 723026468330.6, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.callable"}, {"pid": 9440, "tid": 27716, "ts": 723026468331.0, "ph": "X", "cat": "fee", "dur": 0.2, "name": "builtins.isinstance"}, {"pid": 9440, "tid": 27716, "ts": 723026468325.3, "ph": "X", "cat": "fee", "dur": 6.7, "name": "_options (C:\\Python38\\lib\\tkinter\\__init__.py:1468)"}, {"pid": 9440, "tid": 27716, "ts": 723026468332.4, "ph": "X", "cat": "fee", "dur": 7.9, "name": "_tkinter.tkapp.call"}, {"pid": 9440, "tid": 27716, "ts": 723026468324.4, "ph": "X", "cat": "fee", "dur": 16.1, "name": "pack_configure (C:\\Python38\\lib\\tkinter\\__init__.py:2380)"}, {"pid": 9440, "tid": 27716, "ts": 723026365077.7, "ph": "X", "cat": "fee", "dur": 103263.2, "name": "mainWin (C:\\Users\\002CSC744\\PycharmProjects\\APP_UI\\splash_screen\\__init__.py:31)"}, {"pid": 9440, "tid": 27716, "ts": 723026468343.5, "ph": "X", "cat": "fee", "dur": 1.8, "name": "_tkinter.tkapp.deletecommand"}, {"pid": 9440, "tid": 27716, "ts": 723026468343.0, "ph": "X", "cat": "fee", "dur": 2.6, "name": "deletecommand (C:\\Python38\\lib\\tkinter\\__init__.py:643)"}, {"pid": 9440, "tid": 27716, "ts": 723026365073.1, "ph": "X", "cat": "fee", "dur": 103274.2, "name": "callit (C:\\Python38\\lib\\tkinter\\__init__.py:812)"}, {"pid": 9440, "tid": 27716, "ts": 723026365052.9, "ph": "X", "cat": "fee", "dur": 103294.8, "name": "__call__ (C:\\Python38\\lib\\tkinter\\__init__.py:1887)"}, {"pid": 9440, "tid": 27716, "ts": 723021362640.3, "ph": "X", "cat": "fee", "dur": 91251749.3, "name": "_tkinter.tkapp.mainloop"}, {"pid": 9440, "tid": 27716, "ts": 723021362637.6, "ph": "X", "cat": "fee", "dur": 91251757.8, "name": "mainloop (C:\\Python38\\lib\\tkinter\\__init__.py:601)"}, {"pid": 9440, "tid": 27716, "ts": 723021362319.1, "ph": "X", "cat": "fee", "dur": 91252079.1, "name": "static_call (C:\\Users\\002CSC744\\PycharmProjects\\APP_UI\\splash_screen\\__init__.py:39)"}, {"pid": 9440, "tid": 27716, "ts": 723020491651.3, "ph": "X", "cat": "fee", "dur": 92122749.3, "name": "<module> (C:\\Users\\002CSC744\\PycharmProjects\\APP_UI\\splash_screen\\__init__.py:1)"}, {"pid": 9440, "tid": 27716, "ts": 723020491648.3, "ph": "X", "cat": "fee", "dur": 92122756.0, "name": "builtins.exec"}, {"pid": 9440, "tid": 27716, "ts": 723112614463.9, "ph": "X", "cat": "fee", "dur": 1.2, "name": "info (C:\\Python38\\lib\\multiprocessing\\util.py:52)"}, {"pid": 9440, "tid": 27716, "ts": 723112614466.9, "ph": "X", "cat": "fee", "dur": 0.4, "name": "debug (C:\\Python38\\lib\\multiprocessing\\util.py:48)"}, {"pid": 9440, "tid": 27716, "ts": 723112614490.1, "ph": "X", "cat": "fee", "dur": 2.5, "name": "<lambda> (C:\\Python38\\lib\\multiprocessing\\util.py:284)"}, {"pid": 9440, "tid": 27716, "ts": 723112614488.2, "ph": "X", "cat": "fee", "dur": 5.5, "name": "<listcomp> (C:\\Python38\\lib\\multiprocessing\\util.py:291)"}, {"pid": 9440, "tid": 27716, "ts": 723112614497.6, "ph": "X", "cat": "fee", "dur": 5.5, "name": "list.sort"}, {"pid": 9440, "tid": 27716, "ts": 723112614470.2, "ph": "X", "cat": "fee", "dur": 34.5, "name": "_run_finalizers (C:\\Python38\\lib\\multiprocessing\\util.py:268)"}, {"pid": 9440, "tid": 27716, "ts": 723112614510.8, "ph": "X", "cat": "fee", "dur": 4.5, "name": "current_process (C:\\Python38\\lib\\multiprocessing\\process.py:37)"}, {"pid": 9440, "tid": 27716, "ts": 723112614520.8, "ph": "X", "cat": "fee", "dur": 5.3, "name": "_cleanup (C:\\Python38\\lib\\multiprocessing\\process.py:61)"}, {"pid": 9440, "tid": 27716, "ts": 723112614517.5, "ph": "X", "cat": "fee", "dur": 10.0, "name": "active_children (C:\\Python38\\lib\\multiprocessing\\process.py:43)"}, {"pid": 9440, "tid": 27716, "ts": 723112614529.2, "ph": "X", "cat": "fee", "dur": 1.2, "name": "_cleanup (C:\\Python38\\lib\\multiprocessing\\process.py:61)"}, {"pid": 9440, "tid": 27716, "ts": 723112614528.7, "ph": "X", "cat": "fee", "dur": 2.7, "name": "active_children (C:\\Python38\\lib\\multiprocessing\\process.py:43)"}, {"pid": 9440, "tid": 27716, "ts": 723112614532.6, "ph": "X", "cat": "fee", "dur": 0.4, "name": "debug (C:\\Python38\\lib\\multiprocessing\\util.py:48)"}, {"pid": 9440, "tid": 27716, "ts": 723112614538.4, "ph": "X", "cat": "fee", "dur": 0.4, "name": "<lambda> (C:\\Python38\\lib\\multiprocessing\\util.py:282)"}, {"pid": 9440, "tid": 27716, "ts": 723112614537.6, "ph": "X", "cat": "fee", "dur": 2.4, "name": "<listcomp> (C:\\Python38\\lib\\multiprocessing\\util.py:291)"}, {"pid": 9440, "tid": 27716, "ts": 723112614540.7, "ph": "X", "cat": "fee", "dur": 0.6, "name": "list.sort"}, {"pid": 9440, "tid": 27716, "ts": 723112614543.4, "ph": "X", "cat": "fee", "dur": 1.3, "name": "dict.get"}, {"pid": 9440, "tid": 27716, "ts": 723112614546.3, "ph": "X", "cat": "fee", "dur": 0.4, "name": "sub_debug (C:\\Python38\\lib\\multiprocessing\\util.py:44)"}, {"pid": 9440, "tid": 27716, "ts": 723112614555.5, "ph": "X", "cat": "fee", "dur": 2.0, "name": "nt.getpid"}, {"pid": 9440, "tid": 27716, "ts": 723112614563.3, "ph": "X", "cat": "fee", "dur": 0.2, "name": "sub_debug (C:\\Python38\\lib\\multiprocessing\\util.py:44)"}], "viztracer_metadata": {"overflow": false, "version": "0.15.6"}, "file_info": {"files": {"C:\\Users\\002CSC744\\PycharmProjects\\code_tracer\\venv\\lib\\site-packages\\_distutils_hack\\__init__.py": ["# don't import any costly modules\nimport sys\nimport os\n\n\nis_pypy = '__pypy__' in sys.builtin_module_names\n\n\ndef warn_distutils_present():\n    if 'distutils' not in sys.modules:\n        return\n    if is_pypy and sys.version_info < (3, 7):\n        # PyPy for 3.6 unconditionally imports distutils, so bypass the warning\n        # https://foss.heptapod.net/pypy/pypy/-/blob/be829135bc0d758997b3566062999ee8b23872b4/lib-python/3/site.py#L250\n        return\n    import warnings\n\n    warnings.warn(\n        \"Distutils was imported before Setuptools, but importing Setuptools \"\n        \"also replaces the `distutils` module in `sys.modules`. This may lead \"\n        \"to undesirable behaviors or errors. To avoid these issues, avoid \"\n        \"using distutils directly, ensure that setuptools is installed in the \"\n        \"traditional way (e.g. not an editable install), and/or make sure \"\n        \"that setuptools is always imported before distutils.\"\n    )\n\n\ndef clear_distutils():\n    if 'distutils' not in sys.modules:\n        return\n    import warnings\n\n    warnings.warn(\"Setuptools is replacing distutils.\")\n    mods = [\n        name\n        for name in sys.modules\n        if name == \"distutils\" or name.startswith(\"distutils.\")\n    ]\n    for name in mods:\n        del sys.modules[name]\n\n\ndef enabled():\n    \"\"\"\n    Allow selection of distutils by environment variable.\n    \"\"\"\n    which = os.environ.get('SETUPTOOLS_USE_DISTUTILS', 'local')\n    return which == 'local'\n\n\ndef ensure_local_distutils():\n    import importlib\n\n    clear_distutils()\n\n    # With the DistutilsMetaFinder in place,\n    # perform an import to cause distutils to be\n    # loaded from setuptools._distutils. Ref #2906.\n    with shim():\n        importlib.import_module('distutils')\n\n    # check that submodules load as expected\n    core = importlib.import_module('distutils.core')\n    assert '_distutils' in core.__file__, core.__file__\n    assert 'setuptools._distutils.log' not in sys.modules\n\n\ndef do_override():\n    \"\"\"\n    Ensure that the local copy of distutils is preferred over stdlib.\n\n    See https://github.com/pypa/setuptools/issues/417#issuecomment-392298401\n    for more motivation.\n    \"\"\"\n    if enabled():\n        warn_distutils_present()\n        ensure_local_distutils()\n\n\nclass _TrivialRe:\n    def __init__(self, *patterns):\n        self._patterns = patterns\n\n    def match(self, string):\n        return all(pat in string for pat in self._patterns)\n\n\nclass DistutilsMetaFinder:\n    def find_spec(self, fullname, path, target=None):\n        # optimization: only consider top level modules and those\n        # found in the CPython test suite.\n        if path is not None and not fullname.startswith('test.'):\n            return\n\n        method_name = 'spec_for_{fullname}'.format(**locals())\n        method = getattr(self, method_name, lambda: None)\n        return method()\n\n    def spec_for_distutils(self):\n        if self.is_cpython():\n            return\n\n        import importlib\n        import importlib.abc\n        import importlib.util\n\n        try:\n            mod = importlib.import_module('setuptools._distutils')\n        except Exception:\n            # There are a couple of cases where setuptools._distutils\n            # may not be present:\n            # - An older Setuptools without a local distutils is\n            #   taking precedence. Ref #2957.\n            # - Path manipulation during sitecustomize removes\n            #   setuptools from the path but only after the hook\n            #   has been loaded. Ref #2980.\n            # In either case, fall back to stdlib behavior.\n            return\n\n        class DistutilsLoader(importlib.abc.Loader):\n            def create_module(self, spec):\n                mod.__name__ = 'distutils'\n                return mod\n\n            def exec_module(self, module):\n                pass\n\n        return importlib.util.spec_from_loader(\n            'distutils', DistutilsLoader(), origin=mod.__file__\n        )\n\n    @staticmethod\n    def is_cpython():\n        \"\"\"\n        Suppress supplying distutils for CPython (build and tests).\n        Ref #2965 and #3007.\n        \"\"\"\n        return os.path.isfile('pybuilddir.txt')\n\n    def spec_for_pip(self):\n        \"\"\"\n        Ensure stdlib distutils when running under pip.\n        See pypa/pip#8761 for rationale.\n        \"\"\"\n        if self.pip_imported_during_build():\n            return\n        clear_distutils()\n        self.spec_for_distutils = lambda: None\n\n    @classmethod\n    def pip_imported_during_build(cls):\n        \"\"\"\n        Detect if pip is being imported in a build script. Ref #2355.\n        \"\"\"\n        import traceback\n\n        return any(\n            cls.frame_file_is_setup(frame) for frame, line in traceback.walk_stack(None)\n        )\n\n    @staticmethod\n    def frame_file_is_setup(frame):\n        \"\"\"\n        Return True if the indicated frame suggests a setup.py file.\n        \"\"\"\n        # some frames may not have __file__ (#2940)\n        return frame.f_globals.get('__file__', '').endswith('setup.py')\n\n    def spec_for_sensitive_tests(self):\n        \"\"\"\n        Ensure stdlib distutils when running select tests under CPython.\n\n        python/cpython#91169\n        \"\"\"\n        clear_distutils()\n        self.spec_for_distutils = lambda: None\n\n    sensitive_tests = (\n        [\n            'test.test_distutils',\n            'test.test_peg_generator',\n            'test.test_importlib',\n        ]\n        if sys.version_info < (3, 10)\n        else [\n            'test.test_distutils',\n        ]\n    )\n\n\nfor name in DistutilsMetaFinder.sensitive_tests:\n    setattr(\n        DistutilsMetaFinder,\n        f'spec_for_{name}',\n        DistutilsMetaFinder.spec_for_sensitive_tests,\n    )\n\n\nDISTUTILS_FINDER = DistutilsMetaFinder()\n\n\ndef add_shim():\n    DISTUTILS_FINDER in sys.meta_path or insert_shim()\n\n\nclass shim:\n    def __enter__(self):\n        insert_shim()\n\n    def __exit__(self, exc, value, tb):\n        remove_shim()\n\n\ndef insert_shim():\n    sys.meta_path.insert(0, DISTUTILS_FINDER)\n\n\ndef remove_shim():\n    try:\n        sys.meta_path.remove(DISTUTILS_FINDER)\n    except ValueError:\n        pass\n", 222], "C:\\Users\\002CSC744\\PycharmProjects\\code_tracer\\venv\\lib\\site-packages\\_virtualenv.py": ["\"\"\"Patches that are applied at runtime to the virtual environment\"\"\"\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\n\nVIRTUALENV_PATCH_FILE = os.path.join(__file__)\n\n\ndef patch_dist(dist):\n    \"\"\"\n    Distutils allows user to configure some arguments via a configuration file:\n    https://docs.python.org/3/install/index.html#distutils-configuration-files\n\n    Some of this arguments though don't make sense in context of the virtual environment files, let's fix them up.\n    \"\"\"\n    # we cannot allow some install config as that would get packages installed outside of the virtual environment\n    old_parse_config_files = dist.Distribution.parse_config_files\n\n    def parse_config_files(self, *args, **kwargs):\n        result = old_parse_config_files(self, *args, **kwargs)\n        install = self.get_option_dict(\"install\")\n\n        if \"prefix\" in install:  # the prefix governs where to install the libraries\n            install[\"prefix\"] = VIRTUALENV_PATCH_FILE, os.path.abspath(sys.prefix)\n        for base in (\"purelib\", \"platlib\", \"headers\", \"scripts\", \"data\"):\n            key = \"install_{}\".format(base)\n            if key in install:  # do not allow global configs to hijack venv paths\n                install.pop(key, None)\n        return result\n\n    dist.Distribution.parse_config_files = parse_config_files\n\n\n# Import hook that patches some modules to ignore configuration values that break package installation in case\n# of virtual environments.\n_DISTUTILS_PATCH = \"distutils.dist\", \"setuptools.dist\"\nif sys.version_info > (3, 4):\n    # https://docs.python.org/3/library/importlib.html#setting-up-an-importer\n    from functools import partial\n    from importlib.abc import MetaPathFinder\n    from importlib.util import find_spec\n\n    class _Finder(MetaPathFinder):\n        \"\"\"A meta path finder that allows patching the imported distutils modules\"\"\"\n\n        fullname = None\n\n        # lock[0] is threading.Lock(), but initialized lazily to avoid importing threading very early at startup,\n        # because there are gevent-based applications that need to be first to import threading by themselves.\n        # See https://github.com/pypa/virtualenv/issues/1895 for details.\n        lock = []\n\n        def find_spec(self, fullname, path, target=None):\n            if fullname in _DISTUTILS_PATCH and self.fullname is None:\n                # initialize lock[0] lazily\n                if len(self.lock) == 0:\n                    import threading\n\n                    lock = threading.Lock()\n                    # there is possibility that two threads T1 and T2 are simultaneously running into find_spec,\n                    # observing .lock as empty, and further going into hereby initialization. However due to the GIL,\n                    # list.append() operation is atomic and this way only one of the threads will \"win\" to put the lock\n                    # - that every thread will use - into .lock[0].\n                    # https://docs.python.org/3/faq/library.html#what-kinds-of-global-value-mutation-are-thread-safe\n                    self.lock.append(lock)\n\n                with self.lock[0]:\n                    self.fullname = fullname\n                    try:\n                        spec = find_spec(fullname, path)\n                        if spec is not None:\n                            # https://www.python.org/dev/peps/pep-0451/#how-loading-will-work\n                            is_new_api = hasattr(spec.loader, \"exec_module\")\n                            func_name = \"exec_module\" if is_new_api else \"load_module\"\n                            old = getattr(spec.loader, func_name)\n                            func = self.exec_module if is_new_api else self.load_module\n                            if old is not func:\n                                try:\n                                    setattr(spec.loader, func_name, partial(func, old))\n                                except AttributeError:\n                                    pass  # C-Extension loaders are r/o such as zipimporter with <python 3.7\n                            return spec\n                    finally:\n                        self.fullname = None\n\n        @staticmethod\n        def exec_module(old, module):\n            old(module)\n            if module.__name__ in _DISTUTILS_PATCH:\n                patch_dist(module)\n\n        @staticmethod\n        def load_module(old, name):\n            module = old(name)\n            if module.__name__ in _DISTUTILS_PATCH:\n                patch_dist(module)\n            return module\n\n    sys.meta_path.insert(0, _Finder())\nelse:\n    # https://www.python.org/dev/peps/pep-0302/\n    from imp import find_module\n    from pkgutil import ImpImporter, ImpLoader\n\n    class _VirtualenvImporter(object, ImpImporter):\n        def __init__(self, path=None):\n            object.__init__(self)\n            ImpImporter.__init__(self, path)\n\n        def find_module(self, fullname, path=None):\n            if fullname in _DISTUTILS_PATCH:\n                try:\n                    return _VirtualenvLoader(fullname, *find_module(fullname.split(\".\")[-1], path))\n                except ImportError:\n                    pass\n            return None\n\n    class _VirtualenvLoader(object, ImpLoader):\n        def __init__(self, fullname, file, filename, etc):\n            object.__init__(self)\n            ImpLoader.__init__(self, fullname, file, filename, etc)\n\n        def load_module(self, fullname):\n            module = super(_VirtualenvLoader, self).load_module(fullname)\n            patch_dist(module)\n            module.__loader__ = None  # distlib fallback\n            return module\n\n    sys.meta_path.append(_VirtualenvImporter())\n", 130], "C:\\Python38\\lib\\tkinter\\constants.py": ["# Symbolic constants for Tk\n\n# Booleans\nNO=FALSE=OFF=0\nYES=TRUE=ON=1\n\n# -anchor and -sticky\nN='n'\nS='s'\nW='w'\nE='e'\nNW='nw'\nSW='sw'\nNE='ne'\nSE='se'\nNS='ns'\nEW='ew'\nNSEW='nsew'\nCENTER='center'\n\n# -fill\nNONE='none'\nX='x'\nY='y'\nBOTH='both'\n\n# -side\nLEFT='left'\nTOP='top'\nRIGHT='right'\nBOTTOM='bottom'\n\n# -relief\nRAISED='raised'\nSUNKEN='sunken'\nFLAT='flat'\nRIDGE='ridge'\nGROOVE='groove'\nSOLID = 'solid'\n\n# -orient\nHORIZONTAL='horizontal'\nVERTICAL='vertical'\n\n# -tabs\nNUMERIC='numeric'\n\n# -wrap\nCHAR='char'\nWORD='word'\n\n# -align\nBASELINE='baseline'\n\n# -bordermode\nINSIDE='inside'\nOUTSIDE='outside'\n\n# Special tags, marks and insert positions\nSEL='sel'\nSEL_FIRST='sel.first'\nSEL_LAST='sel.last'\nEND='end'\nINSERT='insert'\nCURRENT='current'\nANCHOR='anchor'\nALL='all' # e.g. Canvas.delete(ALL)\n\n# Text widget and button states\nNORMAL='normal'\nDISABLED='disabled'\nACTIVE='active'\n# Canvas state\nHIDDEN='hidden'\n\n# Menu item types\nCASCADE='cascade'\nCHECKBUTTON='checkbutton'\nCOMMAND='command'\nRADIOBUTTON='radiobutton'\nSEPARATOR='separator'\n\n# Selection modes for list boxes\nSINGLE='single'\nBROWSE='browse'\nMULTIPLE='multiple'\nEXTENDED='extended'\n\n# Activestyle for list boxes\n# NONE='none' is also valid\nDOTBOX='dotbox'\nUNDERLINE='underline'\n\n# Various canvas styles\nPIESLICE='pieslice'\nCHORD='chord'\nARC='arc'\nFIRST='first'\nLAST='last'\nBUTT='butt'\nPROJECTING='projecting'\nROUND='round'\nBEVEL='bevel'\nMITER='miter'\n\n# Arguments to xview/yview\nMOVETO='moveto'\nSCROLL='scroll'\nUNITS='units'\nPAGES='pages'\n", 110], "C:\\Python38\\lib\\sre_compile.py": ["#\n# Secret Labs' Regular Expression Engine\n#\n# convert template to internal format\n#\n# Copyright (c) 1997-2001 by Secret Labs AB.  All rights reserved.\n#\n# See the sre.py file for information on usage and redistribution.\n#\n\n\"\"\"Internal support module for sre\"\"\"\n\nimport _sre\nimport sre_parse\nfrom sre_constants import *\n\nassert _sre.MAGIC == MAGIC, \"SRE module mismatch\"\n\n_LITERAL_CODES = {LITERAL, NOT_LITERAL}\n_REPEATING_CODES = {REPEAT, MIN_REPEAT, MAX_REPEAT}\n_SUCCESS_CODES = {SUCCESS, FAILURE}\n_ASSERT_CODES = {ASSERT, ASSERT_NOT}\n_UNIT_CODES = _LITERAL_CODES | {ANY, IN}\n\n# Sets of lowercase characters which have the same uppercase.\n_equivalences = (\n    # LATIN SMALL LETTER I, LATIN SMALL LETTER DOTLESS I\n    (0x69, 0x131), # i\u0131\n    # LATIN SMALL LETTER S, LATIN SMALL LETTER LONG S\n    (0x73, 0x17f), # s\u017f\n    # MICRO SIGN, GREEK SMALL LETTER MU\n    (0xb5, 0x3bc), # \u00b5\u03bc\n    # COMBINING GREEK YPOGEGRAMMENI, GREEK SMALL LETTER IOTA, GREEK PROSGEGRAMMENI\n    (0x345, 0x3b9, 0x1fbe), # \\u0345\u03b9\u1fbe\n    # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS, GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA\n    (0x390, 0x1fd3), # \u0390\u1fd3\n    # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS, GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA\n    (0x3b0, 0x1fe3), # \u03b0\u1fe3\n    # GREEK SMALL LETTER BETA, GREEK BETA SYMBOL\n    (0x3b2, 0x3d0), # \u03b2\u03d0\n    # GREEK SMALL LETTER EPSILON, GREEK LUNATE EPSILON SYMBOL\n    (0x3b5, 0x3f5), # \u03b5\u03f5\n    # GREEK SMALL LETTER THETA, GREEK THETA SYMBOL\n    (0x3b8, 0x3d1), # \u03b8\u03d1\n    # GREEK SMALL LETTER KAPPA, GREEK KAPPA SYMBOL\n    (0x3ba, 0x3f0), # \u03ba\u03f0\n    # GREEK SMALL LETTER PI, GREEK PI SYMBOL\n    (0x3c0, 0x3d6), # \u03c0\u03d6\n    # GREEK SMALL LETTER RHO, GREEK RHO SYMBOL\n    (0x3c1, 0x3f1), # \u03c1\u03f1\n    # GREEK SMALL LETTER FINAL SIGMA, GREEK SMALL LETTER SIGMA\n    (0x3c2, 0x3c3), # \u03c2\u03c3\n    # GREEK SMALL LETTER PHI, GREEK PHI SYMBOL\n    (0x3c6, 0x3d5), # \u03c6\u03d5\n    # LATIN SMALL LETTER S WITH DOT ABOVE, LATIN SMALL LETTER LONG S WITH DOT ABOVE\n    (0x1e61, 0x1e9b), # \u1e61\u1e9b\n    # LATIN SMALL LIGATURE LONG S T, LATIN SMALL LIGATURE ST\n    (0xfb05, 0xfb06), # \ufb05\ufb06\n)\n\n# Maps the lowercase code to lowercase codes which have the same uppercase.\n_ignorecase_fixes = {i: tuple(j for j in t if i != j)\n                     for t in _equivalences for i in t}\n\ndef _combine_flags(flags, add_flags, del_flags,\n                   TYPE_FLAGS=sre_parse.TYPE_FLAGS):\n    if add_flags & TYPE_FLAGS:\n        flags &= ~TYPE_FLAGS\n    return (flags | add_flags) & ~del_flags\n\ndef _compile(code, pattern, flags):\n    # internal: compile a (sub)pattern\n    emit = code.append\n    _len = len\n    LITERAL_CODES = _LITERAL_CODES\n    REPEATING_CODES = _REPEATING_CODES\n    SUCCESS_CODES = _SUCCESS_CODES\n    ASSERT_CODES = _ASSERT_CODES\n    iscased = None\n    tolower = None\n    fixes = None\n    if flags & SRE_FLAG_IGNORECASE and not flags & SRE_FLAG_LOCALE:\n        if flags & SRE_FLAG_UNICODE:\n            iscased = _sre.unicode_iscased\n            tolower = _sre.unicode_tolower\n            fixes = _ignorecase_fixes\n        else:\n            iscased = _sre.ascii_iscased\n            tolower = _sre.ascii_tolower\n    for op, av in pattern:\n        if op in LITERAL_CODES:\n            if not flags & SRE_FLAG_IGNORECASE:\n                emit(op)\n                emit(av)\n            elif flags & SRE_FLAG_LOCALE:\n                emit(OP_LOCALE_IGNORE[op])\n                emit(av)\n            elif not iscased(av):\n                emit(op)\n                emit(av)\n            else:\n                lo = tolower(av)\n                if not fixes:  # ascii\n                    emit(OP_IGNORE[op])\n                    emit(lo)\n                elif lo not in fixes:\n                    emit(OP_UNICODE_IGNORE[op])\n                    emit(lo)\n                else:\n                    emit(IN_UNI_IGNORE)\n                    skip = _len(code); emit(0)\n                    if op is NOT_LITERAL:\n                        emit(NEGATE)\n                    for k in (lo,) + fixes[lo]:\n                        emit(LITERAL)\n                        emit(k)\n                    emit(FAILURE)\n                    code[skip] = _len(code) - skip\n        elif op is IN:\n            charset, hascased = _optimize_charset(av, iscased, tolower, fixes)\n            if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\n                emit(IN_LOC_IGNORE)\n            elif not hascased:\n                emit(IN)\n            elif not fixes:  # ascii\n                emit(IN_IGNORE)\n            else:\n                emit(IN_UNI_IGNORE)\n            skip = _len(code); emit(0)\n            _compile_charset(charset, flags, code)\n            code[skip] = _len(code) - skip\n        elif op is ANY:\n            if flags & SRE_FLAG_DOTALL:\n                emit(ANY_ALL)\n            else:\n                emit(ANY)\n        elif op in REPEATING_CODES:\n            if flags & SRE_FLAG_TEMPLATE:\n                raise error(\"internal: unsupported template operator %r\" % (op,))\n            if _simple(av[2]):\n                if op is MAX_REPEAT:\n                    emit(REPEAT_ONE)\n                else:\n                    emit(MIN_REPEAT_ONE)\n                skip = _len(code); emit(0)\n                emit(av[0])\n                emit(av[1])\n                _compile(code, av[2], flags)\n                emit(SUCCESS)\n                code[skip] = _len(code) - skip\n            else:\n                emit(REPEAT)\n                skip = _len(code); emit(0)\n                emit(av[0])\n                emit(av[1])\n                _compile(code, av[2], flags)\n                code[skip] = _len(code) - skip\n                if op is MAX_REPEAT:\n                    emit(MAX_UNTIL)\n                else:\n                    emit(MIN_UNTIL)\n        elif op is SUBPATTERN:\n            group, add_flags, del_flags, p = av\n            if group:\n                emit(MARK)\n                emit((group-1)*2)\n            # _compile_info(code, p, _combine_flags(flags, add_flags, del_flags))\n            _compile(code, p, _combine_flags(flags, add_flags, del_flags))\n            if group:\n                emit(MARK)\n                emit((group-1)*2+1)\n        elif op in SUCCESS_CODES:\n            emit(op)\n        elif op in ASSERT_CODES:\n            emit(op)\n            skip = _len(code); emit(0)\n            if av[0] >= 0:\n                emit(0) # look ahead\n            else:\n                lo, hi = av[1].getwidth()\n                if lo != hi:\n                    raise error(\"look-behind requires fixed-width pattern\")\n                emit(lo) # look behind\n            _compile(code, av[1], flags)\n            emit(SUCCESS)\n            code[skip] = _len(code) - skip\n        elif op is CALL:\n            emit(op)\n            skip = _len(code); emit(0)\n            _compile(code, av, flags)\n            emit(SUCCESS)\n            code[skip] = _len(code) - skip\n        elif op is AT:\n            emit(op)\n            if flags & SRE_FLAG_MULTILINE:\n                av = AT_MULTILINE.get(av, av)\n            if flags & SRE_FLAG_LOCALE:\n                av = AT_LOCALE.get(av, av)\n            elif flags & SRE_FLAG_UNICODE:\n                av = AT_UNICODE.get(av, av)\n            emit(av)\n        elif op is BRANCH:\n            emit(op)\n            tail = []\n            tailappend = tail.append\n            for av in av[1]:\n                skip = _len(code); emit(0)\n                # _compile_info(code, av, flags)\n                _compile(code, av, flags)\n                emit(JUMP)\n                tailappend(_len(code)); emit(0)\n                code[skip] = _len(code) - skip\n            emit(FAILURE) # end of branch\n            for tail in tail:\n                code[tail] = _len(code) - tail\n        elif op is CATEGORY:\n            emit(op)\n            if flags & SRE_FLAG_LOCALE:\n                av = CH_LOCALE[av]\n            elif flags & SRE_FLAG_UNICODE:\n                av = CH_UNICODE[av]\n            emit(av)\n        elif op is GROUPREF:\n            if not flags & SRE_FLAG_IGNORECASE:\n                emit(op)\n            elif flags & SRE_FLAG_LOCALE:\n                emit(GROUPREF_LOC_IGNORE)\n            elif not fixes:  # ascii\n                emit(GROUPREF_IGNORE)\n            else:\n                emit(GROUPREF_UNI_IGNORE)\n            emit(av-1)\n        elif op is GROUPREF_EXISTS:\n            emit(op)\n            emit(av[0]-1)\n            skipyes = _len(code); emit(0)\n            _compile(code, av[1], flags)\n            if av[2]:\n                emit(JUMP)\n                skipno = _len(code); emit(0)\n                code[skipyes] = _len(code) - skipyes + 1\n                _compile(code, av[2], flags)\n                code[skipno] = _len(code) - skipno\n            else:\n                code[skipyes] = _len(code) - skipyes + 1\n        else:\n            raise error(\"internal: unsupported operand type %r\" % (op,))\n\ndef _compile_charset(charset, flags, code):\n    # compile charset subprogram\n    emit = code.append\n    for op, av in charset:\n        emit(op)\n        if op is NEGATE:\n            pass\n        elif op is LITERAL:\n            emit(av)\n        elif op is RANGE or op is RANGE_UNI_IGNORE:\n            emit(av[0])\n            emit(av[1])\n        elif op is CHARSET:\n            code.extend(av)\n        elif op is BIGCHARSET:\n            code.extend(av)\n        elif op is CATEGORY:\n            if flags & SRE_FLAG_LOCALE:\n                emit(CH_LOCALE[av])\n            elif flags & SRE_FLAG_UNICODE:\n                emit(CH_UNICODE[av])\n            else:\n                emit(av)\n        else:\n            raise error(\"internal: unsupported set operator %r\" % (op,))\n    emit(FAILURE)\n\ndef _optimize_charset(charset, iscased=None, fixup=None, fixes=None):\n    # internal: optimize character set\n    out = []\n    tail = []\n    charmap = bytearray(256)\n    hascased = False\n    for op, av in charset:\n        while True:\n            try:\n                if op is LITERAL:\n                    if fixup:\n                        lo = fixup(av)\n                        charmap[lo] = 1\n                        if fixes and lo in fixes:\n                            for k in fixes[lo]:\n                                charmap[k] = 1\n                        if not hascased and iscased(av):\n                            hascased = True\n                    else:\n                        charmap[av] = 1\n                elif op is RANGE:\n                    r = range(av[0], av[1]+1)\n                    if fixup:\n                        if fixes:\n                            for i in map(fixup, r):\n                                charmap[i] = 1\n                                if i in fixes:\n                                    for k in fixes[i]:\n                                        charmap[k] = 1\n                        else:\n                            for i in map(fixup, r):\n                                charmap[i] = 1\n                        if not hascased:\n                            hascased = any(map(iscased, r))\n                    else:\n                        for i in r:\n                            charmap[i] = 1\n                elif op is NEGATE:\n                    out.append((op, av))\n                else:\n                    tail.append((op, av))\n            except IndexError:\n                if len(charmap) == 256:\n                    # character set contains non-UCS1 character codes\n                    charmap += b'\\0' * 0xff00\n                    continue\n                # Character set contains non-BMP character codes.\n                if fixup:\n                    hascased = True\n                    # There are only two ranges of cased non-BMP characters:\n                    # 10400-1044F (Deseret) and 118A0-118DF (Warang Citi),\n                    # and for both ranges RANGE_UNI_IGNORE works.\n                    if op is RANGE:\n                        op = RANGE_UNI_IGNORE\n                tail.append((op, av))\n            break\n\n    # compress character map\n    runs = []\n    q = 0\n    while True:\n        p = charmap.find(1, q)\n        if p < 0:\n            break\n        if len(runs) >= 2:\n            runs = None\n            break\n        q = charmap.find(0, p)\n        if q < 0:\n            runs.append((p, len(charmap)))\n            break\n        runs.append((p, q))\n    if runs is not None:\n        # use literal/range\n        for p, q in runs:\n            if q - p == 1:\n                out.append((LITERAL, p))\n            else:\n                out.append((RANGE, (p, q - 1)))\n        out += tail\n        # if the case was changed or new representation is more compact\n        if hascased or len(out) < len(charset):\n            return out, hascased\n        # else original character set is good enough\n        return charset, hascased\n\n    # use bitmap\n    if len(charmap) == 256:\n        data = _mk_bitmap(charmap)\n        out.append((CHARSET, data))\n        out += tail\n        return out, hascased\n\n    # To represent a big charset, first a bitmap of all characters in the\n    # set is constructed. Then, this bitmap is sliced into chunks of 256\n    # characters, duplicate chunks are eliminated, and each chunk is\n    # given a number. In the compiled expression, the charset is\n    # represented by a 32-bit word sequence, consisting of one word for\n    # the number of different chunks, a sequence of 256 bytes (64 words)\n    # of chunk numbers indexed by their original chunk position, and a\n    # sequence of 256-bit chunks (8 words each).\n\n    # Compression is normally good: in a typical charset, large ranges of\n    # Unicode will be either completely excluded (e.g. if only cyrillic\n    # letters are to be matched), or completely included (e.g. if large\n    # subranges of Kanji match). These ranges will be represented by\n    # chunks of all one-bits or all zero-bits.\n\n    # Matching can be also done efficiently: the more significant byte of\n    # the Unicode character is an index into the chunk number, and the\n    # less significant byte is a bit index in the chunk (just like the\n    # CHARSET matching).\n\n    charmap = bytes(charmap) # should be hashable\n    comps = {}\n    mapping = bytearray(256)\n    block = 0\n    data = bytearray()\n    for i in range(0, 65536, 256):\n        chunk = charmap[i: i + 256]\n        if chunk in comps:\n            mapping[i // 256] = comps[chunk]\n        else:\n            mapping[i // 256] = comps[chunk] = block\n            block += 1\n            data += chunk\n    data = _mk_bitmap(data)\n    data[0:0] = [block] + _bytes_to_codes(mapping)\n    out.append((BIGCHARSET, data))\n    out += tail\n    return out, hascased\n\n_CODEBITS = _sre.CODESIZE * 8\nMAXCODE = (1 << _CODEBITS) - 1\n_BITS_TRANS = b'0' + b'1' * 255\ndef _mk_bitmap(bits, _CODEBITS=_CODEBITS, _int=int):\n    s = bits.translate(_BITS_TRANS)[::-1]\n    return [_int(s[i - _CODEBITS: i], 2)\n            for i in range(len(s), 0, -_CODEBITS)]\n\ndef _bytes_to_codes(b):\n    # Convert block indices to word array\n    a = memoryview(b).cast('I')\n    assert a.itemsize == _sre.CODESIZE\n    assert len(a) * a.itemsize == len(b)\n    return a.tolist()\n\ndef _simple(p):\n    # check if this subpattern is a \"simple\" operator\n    if len(p) != 1:\n        return False\n    op, av = p[0]\n    if op is SUBPATTERN:\n        return av[0] is None and _simple(av[-1])\n    return op in _UNIT_CODES\n\ndef _generate_overlap_table(prefix):\n    \"\"\"\n    Generate an overlap table for the following prefix.\n    An overlap table is a table of the same size as the prefix which\n    informs about the potential self-overlap for each index in the prefix:\n    - if overlap[i] == 0, prefix[i:] can't overlap prefix[0:...]\n    - if overlap[i] == k with 0 < k <= i, prefix[i-k+1:i+1] overlaps with\n      prefix[0:k]\n    \"\"\"\n    table = [0] * len(prefix)\n    for i in range(1, len(prefix)):\n        idx = table[i - 1]\n        while prefix[i] != prefix[idx]:\n            if idx == 0:\n                table[i] = 0\n                break\n            idx = table[idx - 1]\n        else:\n            table[i] = idx + 1\n    return table\n\ndef _get_iscased(flags):\n    if not flags & SRE_FLAG_IGNORECASE:\n        return None\n    elif flags & SRE_FLAG_UNICODE:\n        return _sre.unicode_iscased\n    else:\n        return _sre.ascii_iscased\n\ndef _get_literal_prefix(pattern, flags):\n    # look for literal prefix\n    prefix = []\n    prefixappend = prefix.append\n    prefix_skip = None\n    iscased = _get_iscased(flags)\n    for op, av in pattern.data:\n        if op is LITERAL:\n            if iscased and iscased(av):\n                break\n            prefixappend(av)\n        elif op is SUBPATTERN:\n            group, add_flags, del_flags, p = av\n            flags1 = _combine_flags(flags, add_flags, del_flags)\n            if flags1 & SRE_FLAG_IGNORECASE and flags1 & SRE_FLAG_LOCALE:\n                break\n            prefix1, prefix_skip1, got_all = _get_literal_prefix(p, flags1)\n            if prefix_skip is None:\n                if group is not None:\n                    prefix_skip = len(prefix)\n                elif prefix_skip1 is not None:\n                    prefix_skip = len(prefix) + prefix_skip1\n            prefix.extend(prefix1)\n            if not got_all:\n                break\n        else:\n            break\n    else:\n        return prefix, prefix_skip, True\n    return prefix, prefix_skip, False\n\ndef _get_charset_prefix(pattern, flags):\n    while True:\n        if not pattern.data:\n            return None\n        op, av = pattern.data[0]\n        if op is not SUBPATTERN:\n            break\n        group, add_flags, del_flags, pattern = av\n        flags = _combine_flags(flags, add_flags, del_flags)\n        if flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE:\n            return None\n\n    iscased = _get_iscased(flags)\n    if op is LITERAL:\n        if iscased and iscased(av):\n            return None\n        return [(op, av)]\n    elif op is BRANCH:\n        charset = []\n        charsetappend = charset.append\n        for p in av[1]:\n            if not p:\n                return None\n            op, av = p[0]\n            if op is LITERAL and not (iscased and iscased(av)):\n                charsetappend((op, av))\n            else:\n                return None\n        return charset\n    elif op is IN:\n        charset = av\n        if iscased:\n            for op, av in charset:\n                if op is LITERAL:\n                    if iscased(av):\n                        return None\n                elif op is RANGE:\n                    if av[1] > 0xffff:\n                        return None\n                    if any(map(iscased, range(av[0], av[1]+1))):\n                        return None\n        return charset\n    return None\n\ndef _compile_info(code, pattern, flags):\n    # internal: compile an info block.  in the current version,\n    # this contains min/max pattern width, and an optional literal\n    # prefix or a character map\n    lo, hi = pattern.getwidth()\n    if hi > MAXCODE:\n        hi = MAXCODE\n    if lo == 0:\n        code.extend([INFO, 4, 0, lo, hi])\n        return\n    # look for a literal prefix\n    prefix = []\n    prefix_skip = 0\n    charset = [] # not used\n    if not (flags & SRE_FLAG_IGNORECASE and flags & SRE_FLAG_LOCALE):\n        # look for literal prefix\n        prefix, prefix_skip, got_all = _get_literal_prefix(pattern, flags)\n        # if no prefix, look for charset prefix\n        if not prefix:\n            charset = _get_charset_prefix(pattern, flags)\n##     if prefix:\n##         print(\"*** PREFIX\", prefix, prefix_skip)\n##     if charset:\n##         print(\"*** CHARSET\", charset)\n    # add an info block\n    emit = code.append\n    emit(INFO)\n    skip = len(code); emit(0)\n    # literal flag\n    mask = 0\n    if prefix:\n        mask = SRE_INFO_PREFIX\n        if prefix_skip is None and got_all:\n            mask = mask | SRE_INFO_LITERAL\n    elif charset:\n        mask = mask | SRE_INFO_CHARSET\n    emit(mask)\n    # pattern length\n    if lo < MAXCODE:\n        emit(lo)\n    else:\n        emit(MAXCODE)\n        prefix = prefix[:MAXCODE]\n    emit(min(hi, MAXCODE))\n    # add literal prefix\n    if prefix:\n        emit(len(prefix)) # length\n        if prefix_skip is None:\n            prefix_skip =  len(prefix)\n        emit(prefix_skip) # skip\n        code.extend(prefix)\n        # generate overlap table\n        code.extend(_generate_overlap_table(prefix))\n    elif charset:\n        charset, hascased = _optimize_charset(charset)\n        assert not hascased\n        _compile_charset(charset, flags, code)\n    code[skip] = len(code) - skip\n\ndef isstring(obj):\n    return isinstance(obj, (str, bytes))\n\ndef _code(p, flags):\n\n    flags = p.state.flags | flags\n    code = []\n\n    # compile info block\n    _compile_info(code, p, flags)\n\n    # compile the pattern\n    _compile(code, p.data, flags)\n\n    code.append(SUCCESS)\n\n    return code\n\ndef _hex_code(code):\n    return '[%s]' % ', '.join('%#0*x' % (_sre.CODESIZE*2+2, x) for x in code)\n\ndef dis(code):\n    import sys\n\n    labels = set()\n    level = 0\n    offset_width = len(str(len(code) - 1))\n\n    def dis_(start, end):\n        def print_(*args, to=None):\n            if to is not None:\n                labels.add(to)\n                args += ('(to %d)' % (to,),)\n            print('%*d%s ' % (offset_width, start, ':' if start in labels else '.'),\n                  end='  '*(level-1))\n            print(*args)\n\n        def print_2(*args):\n            print(end=' '*(offset_width + 2*level))\n            print(*args)\n\n        nonlocal level\n        level += 1\n        i = start\n        while i < end:\n            start = i\n            op = code[i]\n            i += 1\n            op = OPCODES[op]\n            if op in (SUCCESS, FAILURE, ANY, ANY_ALL,\n                      MAX_UNTIL, MIN_UNTIL, NEGATE):\n                print_(op)\n            elif op in (LITERAL, NOT_LITERAL,\n                        LITERAL_IGNORE, NOT_LITERAL_IGNORE,\n                        LITERAL_UNI_IGNORE, NOT_LITERAL_UNI_IGNORE,\n                        LITERAL_LOC_IGNORE, NOT_LITERAL_LOC_IGNORE):\n                arg = code[i]\n                i += 1\n                print_(op, '%#02x (%r)' % (arg, chr(arg)))\n            elif op is AT:\n                arg = code[i]\n                i += 1\n                arg = str(ATCODES[arg])\n                assert arg[:3] == 'AT_'\n                print_(op, arg[3:])\n            elif op is CATEGORY:\n                arg = code[i]\n                i += 1\n                arg = str(CHCODES[arg])\n                assert arg[:9] == 'CATEGORY_'\n                print_(op, arg[9:])\n            elif op in (IN, IN_IGNORE, IN_UNI_IGNORE, IN_LOC_IGNORE):\n                skip = code[i]\n                print_(op, skip, to=i+skip)\n                dis_(i+1, i+skip)\n                i += skip\n            elif op in (RANGE, RANGE_UNI_IGNORE):\n                lo, hi = code[i: i+2]\n                i += 2\n                print_(op, '%#02x %#02x (%r-%r)' % (lo, hi, chr(lo), chr(hi)))\n            elif op is CHARSET:\n                print_(op, _hex_code(code[i: i + 256//_CODEBITS]))\n                i += 256//_CODEBITS\n            elif op is BIGCHARSET:\n                arg = code[i]\n                i += 1\n                mapping = list(b''.join(x.to_bytes(_sre.CODESIZE, sys.byteorder)\n                                        for x in code[i: i + 256//_sre.CODESIZE]))\n                print_(op, arg, mapping)\n                i += 256//_sre.CODESIZE\n                level += 1\n                for j in range(arg):\n                    print_2(_hex_code(code[i: i + 256//_CODEBITS]))\n                    i += 256//_CODEBITS\n                level -= 1\n            elif op in (MARK, GROUPREF, GROUPREF_IGNORE, GROUPREF_UNI_IGNORE,\n                        GROUPREF_LOC_IGNORE):\n                arg = code[i]\n                i += 1\n                print_(op, arg)\n            elif op is JUMP:\n                skip = code[i]\n                print_(op, skip, to=i+skip)\n                i += 1\n            elif op is BRANCH:\n                skip = code[i]\n                print_(op, skip, to=i+skip)\n                while skip:\n                    dis_(i+1, i+skip)\n                    i += skip\n                    start = i\n                    skip = code[i]\n                    if skip:\n                        print_('branch', skip, to=i+skip)\n                    else:\n                        print_(FAILURE)\n                i += 1\n            elif op in (REPEAT, REPEAT_ONE, MIN_REPEAT_ONE):\n                skip, min, max = code[i: i+3]\n                if max == MAXREPEAT:\n                    max = 'MAXREPEAT'\n                print_(op, skip, min, max, to=i+skip)\n                dis_(i+3, i+skip)\n                i += skip\n            elif op is GROUPREF_EXISTS:\n                arg, skip = code[i: i+2]\n                print_(op, arg, skip, to=i+skip)\n                i += 2\n            elif op in (ASSERT, ASSERT_NOT):\n                skip, arg = code[i: i+2]\n                print_(op, skip, arg, to=i+skip)\n                dis_(i+2, i+skip)\n                i += skip\n            elif op is INFO:\n                skip, flags, min, max = code[i: i+4]\n                if max == MAXREPEAT:\n                    max = 'MAXREPEAT'\n                print_(op, skip, bin(flags), min, max, to=i+skip)\n                start = i+4\n                if flags & SRE_INFO_PREFIX:\n                    prefix_len, prefix_skip = code[i+4: i+6]\n                    print_2('  prefix_skip', prefix_skip)\n                    start = i + 6\n                    prefix = code[start: start+prefix_len]\n                    print_2('  prefix',\n                            '[%s]' % ', '.join('%#02x' % x for x in prefix),\n                            '(%r)' % ''.join(map(chr, prefix)))\n                    start += prefix_len\n                    print_2('  overlap', code[start: start+prefix_len])\n                    start += prefix_len\n                if flags & SRE_INFO_CHARSET:\n                    level += 1\n                    print_2('in')\n                    dis_(start, i+skip)\n                    level -= 1\n                i += skip\n            else:\n                raise ValueError(op)\n\n        level -= 1\n\n    dis_(0, len(code))\n\n\ndef compile(p, flags=0):\n    # internal: convert pattern list to internal format\n\n    if isstring(p):\n        pattern = p\n        p = sre_parse.parse(p, flags)\n    else:\n        pattern = None\n\n    code = _code(p, flags)\n\n    if flags & SRE_FLAG_DEBUG:\n        print()\n        dis(code)\n\n    # map in either direction\n    groupindex = p.state.groupdict\n    indexgroup = [None] * p.state.groups\n    for k, i in groupindex.items():\n        indexgroup[i] = k\n\n    return _sre.compile(\n        pattern, flags | p.state.flags, code,\n        p.state.groups-1,\n        groupindex, tuple(indexgroup)\n        )\n", 784], "C:\\Python38\\lib\\sre_parse.py": ["#\n# Secret Labs' Regular Expression Engine\n#\n# convert re-style regular expression to sre pattern\n#\n# Copyright (c) 1998-2001 by Secret Labs AB.  All rights reserved.\n#\n# See the sre.py file for information on usage and redistribution.\n#\n\n\"\"\"Internal support module for sre\"\"\"\n\n# XXX: show string offset and offending character for all errors\n\nfrom sre_constants import *\n\nSPECIAL_CHARS = \".\\\\[{()*+?^$|\"\nREPEAT_CHARS = \"*+?{\"\n\nDIGITS = frozenset(\"0123456789\")\n\nOCTDIGITS = frozenset(\"01234567\")\nHEXDIGITS = frozenset(\"0123456789abcdefABCDEF\")\nASCIILETTERS = frozenset(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n\nWHITESPACE = frozenset(\" \\t\\n\\r\\v\\f\")\n\n_REPEATCODES = frozenset({MIN_REPEAT, MAX_REPEAT})\n_UNITCODES = frozenset({ANY, RANGE, IN, LITERAL, NOT_LITERAL, CATEGORY})\n\nESCAPES = {\n    r\"\\a\": (LITERAL, ord(\"\\a\")),\n    r\"\\b\": (LITERAL, ord(\"\\b\")),\n    r\"\\f\": (LITERAL, ord(\"\\f\")),\n    r\"\\n\": (LITERAL, ord(\"\\n\")),\n    r\"\\r\": (LITERAL, ord(\"\\r\")),\n    r\"\\t\": (LITERAL, ord(\"\\t\")),\n    r\"\\v\": (LITERAL, ord(\"\\v\")),\n    r\"\\\\\": (LITERAL, ord(\"\\\\\"))\n}\n\nCATEGORIES = {\n    r\"\\A\": (AT, AT_BEGINNING_STRING), # start of string\n    r\"\\b\": (AT, AT_BOUNDARY),\n    r\"\\B\": (AT, AT_NON_BOUNDARY),\n    r\"\\d\": (IN, [(CATEGORY, CATEGORY_DIGIT)]),\n    r\"\\D\": (IN, [(CATEGORY, CATEGORY_NOT_DIGIT)]),\n    r\"\\s\": (IN, [(CATEGORY, CATEGORY_SPACE)]),\n    r\"\\S\": (IN, [(CATEGORY, CATEGORY_NOT_SPACE)]),\n    r\"\\w\": (IN, [(CATEGORY, CATEGORY_WORD)]),\n    r\"\\W\": (IN, [(CATEGORY, CATEGORY_NOT_WORD)]),\n    r\"\\Z\": (AT, AT_END_STRING), # end of string\n}\n\nFLAGS = {\n    # standard flags\n    \"i\": SRE_FLAG_IGNORECASE,\n    \"L\": SRE_FLAG_LOCALE,\n    \"m\": SRE_FLAG_MULTILINE,\n    \"s\": SRE_FLAG_DOTALL,\n    \"x\": SRE_FLAG_VERBOSE,\n    # extensions\n    \"a\": SRE_FLAG_ASCII,\n    \"t\": SRE_FLAG_TEMPLATE,\n    \"u\": SRE_FLAG_UNICODE,\n}\n\nTYPE_FLAGS = SRE_FLAG_ASCII | SRE_FLAG_LOCALE | SRE_FLAG_UNICODE\nGLOBAL_FLAGS = SRE_FLAG_DEBUG | SRE_FLAG_TEMPLATE\n\nclass Verbose(Exception):\n    pass\n\nclass State:\n    # keeps track of state for parsing\n    def __init__(self):\n        self.flags = 0\n        self.groupdict = {}\n        self.groupwidths = [None]  # group 0\n        self.lookbehindgroups = None\n    @property\n    def groups(self):\n        return len(self.groupwidths)\n    def opengroup(self, name=None):\n        gid = self.groups\n        self.groupwidths.append(None)\n        if self.groups > MAXGROUPS:\n            raise error(\"too many groups\")\n        if name is not None:\n            ogid = self.groupdict.get(name, None)\n            if ogid is not None:\n                raise error(\"redefinition of group name %r as group %d; \"\n                            \"was group %d\" % (name, gid,  ogid))\n            self.groupdict[name] = gid\n        return gid\n    def closegroup(self, gid, p):\n        self.groupwidths[gid] = p.getwidth()\n    def checkgroup(self, gid):\n        return gid < self.groups and self.groupwidths[gid] is not None\n\n    def checklookbehindgroup(self, gid, source):\n        if self.lookbehindgroups is not None:\n            if not self.checkgroup(gid):\n                raise source.error('cannot refer to an open group')\n            if gid >= self.lookbehindgroups:\n                raise source.error('cannot refer to group defined in the same '\n                                   'lookbehind subpattern')\n\nclass SubPattern:\n    # a subpattern, in intermediate form\n    def __init__(self, state, data=None):\n        self.state = state\n        if data is None:\n            data = []\n        self.data = data\n        self.width = None\n\n    def dump(self, level=0):\n        nl = True\n        seqtypes = (tuple, list)\n        for op, av in self.data:\n            print(level*\"  \" + str(op), end='')\n            if op is IN:\n                # member sublanguage\n                print()\n                for op, a in av:\n                    print((level+1)*\"  \" + str(op), a)\n            elif op is BRANCH:\n                print()\n                for i, a in enumerate(av[1]):\n                    if i:\n                        print(level*\"  \" + \"OR\")\n                    a.dump(level+1)\n            elif op is GROUPREF_EXISTS:\n                condgroup, item_yes, item_no = av\n                print('', condgroup)\n                item_yes.dump(level+1)\n                if item_no:\n                    print(level*\"  \" + \"ELSE\")\n                    item_no.dump(level+1)\n            elif isinstance(av, seqtypes):\n                nl = False\n                for a in av:\n                    if isinstance(a, SubPattern):\n                        if not nl:\n                            print()\n                        a.dump(level+1)\n                        nl = True\n                    else:\n                        if not nl:\n                            print(' ', end='')\n                        print(a, end='')\n                        nl = False\n                if not nl:\n                    print()\n            else:\n                print('', av)\n    def __repr__(self):\n        return repr(self.data)\n    def __len__(self):\n        return len(self.data)\n    def __delitem__(self, index):\n        del self.data[index]\n    def __getitem__(self, index):\n        if isinstance(index, slice):\n            return SubPattern(self.state, self.data[index])\n        return self.data[index]\n    def __setitem__(self, index, code):\n        self.data[index] = code\n    def insert(self, index, code):\n        self.data.insert(index, code)\n    def append(self, code):\n        self.data.append(code)\n    def getwidth(self):\n        # determine the width (min, max) for this subpattern\n        if self.width is not None:\n            return self.width\n        lo = hi = 0\n        for op, av in self.data:\n            if op is BRANCH:\n                i = MAXREPEAT - 1\n                j = 0\n                for av in av[1]:\n                    l, h = av.getwidth()\n                    i = min(i, l)\n                    j = max(j, h)\n                lo = lo + i\n                hi = hi + j\n            elif op is CALL:\n                i, j = av.getwidth()\n                lo = lo + i\n                hi = hi + j\n            elif op is SUBPATTERN:\n                i, j = av[-1].getwidth()\n                lo = lo + i\n                hi = hi + j\n            elif op in _REPEATCODES:\n                i, j = av[2].getwidth()\n                lo = lo + i * av[0]\n                hi = hi + j * av[1]\n            elif op in _UNITCODES:\n                lo = lo + 1\n                hi = hi + 1\n            elif op is GROUPREF:\n                i, j = self.state.groupwidths[av]\n                lo = lo + i\n                hi = hi + j\n            elif op is GROUPREF_EXISTS:\n                i, j = av[1].getwidth()\n                if av[2] is not None:\n                    l, h = av[2].getwidth()\n                    i = min(i, l)\n                    j = max(j, h)\n                else:\n                    i = 0\n                lo = lo + i\n                hi = hi + j\n            elif op is SUCCESS:\n                break\n        self.width = min(lo, MAXREPEAT - 1), min(hi, MAXREPEAT)\n        return self.width\n\nclass Tokenizer:\n    def __init__(self, string):\n        self.istext = isinstance(string, str)\n        self.string = string\n        if not self.istext:\n            string = str(string, 'latin1')\n        self.decoded_string = string\n        self.index = 0\n        self.next = None\n        self.__next()\n    def __next(self):\n        index = self.index\n        try:\n            char = self.decoded_string[index]\n        except IndexError:\n            self.next = None\n            return\n        if char == \"\\\\\":\n            index += 1\n            try:\n                char += self.decoded_string[index]\n            except IndexError:\n                raise error(\"bad escape (end of pattern)\",\n                            self.string, len(self.string) - 1) from None\n        self.index = index + 1\n        self.next = char\n    def match(self, char):\n        if char == self.next:\n            self.__next()\n            return True\n        return False\n    def get(self):\n        this = self.next\n        self.__next()\n        return this\n    def getwhile(self, n, charset):\n        result = ''\n        for _ in range(n):\n            c = self.next\n            if c not in charset:\n                break\n            result += c\n            self.__next()\n        return result\n    def getuntil(self, terminator, name):\n        result = ''\n        while True:\n            c = self.next\n            self.__next()\n            if c is None:\n                if not result:\n                    raise self.error(\"missing \" + name)\n                raise self.error(\"missing %s, unterminated name\" % terminator,\n                                 len(result))\n            if c == terminator:\n                if not result:\n                    raise self.error(\"missing \" + name, 1)\n                break\n            result += c\n        return result\n    @property\n    def pos(self):\n        return self.index - len(self.next or '')\n    def tell(self):\n        return self.index - len(self.next or '')\n    def seek(self, index):\n        self.index = index\n        self.__next()\n\n    def error(self, msg, offset=0):\n        return error(msg, self.string, self.tell() - offset)\n\ndef _class_escape(source, escape):\n    # handle escape code inside character class\n    code = ESCAPES.get(escape)\n    if code:\n        return code\n    code = CATEGORIES.get(escape)\n    if code and code[0] is IN:\n        return code\n    try:\n        c = escape[1:2]\n        if c == \"x\":\n            # hexadecimal escape (exactly two digits)\n            escape += source.getwhile(2, HEXDIGITS)\n            if len(escape) != 4:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            return LITERAL, int(escape[2:], 16)\n        elif c == \"u\" and source.istext:\n            # unicode escape (exactly four digits)\n            escape += source.getwhile(4, HEXDIGITS)\n            if len(escape) != 6:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            return LITERAL, int(escape[2:], 16)\n        elif c == \"U\" and source.istext:\n            # unicode escape (exactly eight digits)\n            escape += source.getwhile(8, HEXDIGITS)\n            if len(escape) != 10:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            c = int(escape[2:], 16)\n            chr(c) # raise ValueError for invalid code\n            return LITERAL, c\n        elif c == \"N\" and source.istext:\n            import unicodedata\n            # named unicode escape e.g. \\N{EM DASH}\n            if not source.match('{'):\n                raise source.error(\"missing {\")\n            charname = source.getuntil('}', 'character name')\n            try:\n                c = ord(unicodedata.lookup(charname))\n            except KeyError:\n                raise source.error(\"undefined character name %r\" % charname,\n                                   len(charname) + len(r'\\N{}'))\n            return LITERAL, c\n        elif c in OCTDIGITS:\n            # octal escape (up to three digits)\n            escape += source.getwhile(2, OCTDIGITS)\n            c = int(escape[1:], 8)\n            if c > 0o377:\n                raise source.error('octal escape value %s outside of '\n                                   'range 0-0o377' % escape, len(escape))\n            return LITERAL, c\n        elif c in DIGITS:\n            raise ValueError\n        if len(escape) == 2:\n            if c in ASCIILETTERS:\n                raise source.error('bad escape %s' % escape, len(escape))\n            return LITERAL, ord(escape[1])\n    except ValueError:\n        pass\n    raise source.error(\"bad escape %s\" % escape, len(escape))\n\ndef _escape(source, escape, state):\n    # handle escape code in expression\n    code = CATEGORIES.get(escape)\n    if code:\n        return code\n    code = ESCAPES.get(escape)\n    if code:\n        return code\n    try:\n        c = escape[1:2]\n        if c == \"x\":\n            # hexadecimal escape\n            escape += source.getwhile(2, HEXDIGITS)\n            if len(escape) != 4:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            return LITERAL, int(escape[2:], 16)\n        elif c == \"u\" and source.istext:\n            # unicode escape (exactly four digits)\n            escape += source.getwhile(4, HEXDIGITS)\n            if len(escape) != 6:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            return LITERAL, int(escape[2:], 16)\n        elif c == \"U\" and source.istext:\n            # unicode escape (exactly eight digits)\n            escape += source.getwhile(8, HEXDIGITS)\n            if len(escape) != 10:\n                raise source.error(\"incomplete escape %s\" % escape, len(escape))\n            c = int(escape[2:], 16)\n            chr(c) # raise ValueError for invalid code\n            return LITERAL, c\n        elif c == \"N\" and source.istext:\n            import unicodedata\n            # named unicode escape e.g. \\N{EM DASH}\n            if not source.match('{'):\n                raise source.error(\"missing {\")\n            charname = source.getuntil('}', 'character name')\n            try:\n                c = ord(unicodedata.lookup(charname))\n            except KeyError:\n                raise source.error(\"undefined character name %r\" % charname,\n                                   len(charname) + len(r'\\N{}'))\n            return LITERAL, c\n        elif c == \"0\":\n            # octal escape\n            escape += source.getwhile(2, OCTDIGITS)\n            return LITERAL, int(escape[1:], 8)\n        elif c in DIGITS:\n            # octal escape *or* decimal group reference (sigh)\n            if source.next in DIGITS:\n                escape += source.get()\n                if (escape[1] in OCTDIGITS and escape[2] in OCTDIGITS and\n                    source.next in OCTDIGITS):\n                    # got three octal digits; this is an octal escape\n                    escape += source.get()\n                    c = int(escape[1:], 8)\n                    if c > 0o377:\n                        raise source.error('octal escape value %s outside of '\n                                           'range 0-0o377' % escape,\n                                           len(escape))\n                    return LITERAL, c\n            # not an octal escape, so this is a group reference\n            group = int(escape[1:])\n            if group < state.groups:\n                if not state.checkgroup(group):\n                    raise source.error(\"cannot refer to an open group\",\n                                       len(escape))\n                state.checklookbehindgroup(group, source)\n                return GROUPREF, group\n            raise source.error(\"invalid group reference %d\" % group, len(escape) - 1)\n        if len(escape) == 2:\n            if c in ASCIILETTERS:\n                raise source.error(\"bad escape %s\" % escape, len(escape))\n            return LITERAL, ord(escape[1])\n    except ValueError:\n        pass\n    raise source.error(\"bad escape %s\" % escape, len(escape))\n\ndef _uniq(items):\n    return list(dict.fromkeys(items))\n\ndef _parse_sub(source, state, verbose, nested):\n    # parse an alternation: a|b|c\n\n    items = []\n    itemsappend = items.append\n    sourcematch = source.match\n    start = source.tell()\n    while True:\n        itemsappend(_parse(source, state, verbose, nested + 1,\n                           not nested and not items))\n        if not sourcematch(\"|\"):\n            break\n\n    if len(items) == 1:\n        return items[0]\n\n    subpattern = SubPattern(state)\n\n    # check if all items share a common prefix\n    while True:\n        prefix = None\n        for item in items:\n            if not item:\n                break\n            if prefix is None:\n                prefix = item[0]\n            elif item[0] != prefix:\n                break\n        else:\n            # all subitems start with a common \"prefix\".\n            # move it out of the branch\n            for item in items:\n                del item[0]\n            subpattern.append(prefix)\n            continue # check next one\n        break\n\n    # check if the branch can be replaced by a character set\n    set = []\n    for item in items:\n        if len(item) != 1:\n            break\n        op, av = item[0]\n        if op is LITERAL:\n            set.append((op, av))\n        elif op is IN and av[0][0] is not NEGATE:\n            set.extend(av)\n        else:\n            break\n    else:\n        # we can store this as a character set instead of a\n        # branch (the compiler may optimize this even more)\n        subpattern.append((IN, _uniq(set)))\n        return subpattern\n\n    subpattern.append((BRANCH, (None, items)))\n    return subpattern\n\ndef _parse(source, state, verbose, nested, first=False):\n    # parse a simple pattern\n    subpattern = SubPattern(state)\n\n    # precompute constants into local variables\n    subpatternappend = subpattern.append\n    sourceget = source.get\n    sourcematch = source.match\n    _len = len\n    _ord = ord\n\n    while True:\n\n        this = source.next\n        if this is None:\n            break # end of pattern\n        if this in \"|)\":\n            break # end of subpattern\n        sourceget()\n\n        if verbose:\n            # skip whitespace and comments\n            if this in WHITESPACE:\n                continue\n            if this == \"#\":\n                while True:\n                    this = sourceget()\n                    if this is None or this == \"\\n\":\n                        break\n                continue\n\n        if this[0] == \"\\\\\":\n            code = _escape(source, this, state)\n            subpatternappend(code)\n\n        elif this not in SPECIAL_CHARS:\n            subpatternappend((LITERAL, _ord(this)))\n\n        elif this == \"[\":\n            here = source.tell() - 1\n            # character set\n            set = []\n            setappend = set.append\n##          if sourcematch(\":\"):\n##              pass # handle character classes\n            if source.next == '[':\n                import warnings\n                warnings.warn(\n                    'Possible nested set at position %d' % source.tell(),\n                    FutureWarning, stacklevel=nested + 6\n                )\n            negate = sourcematch(\"^\")\n            # check remaining characters\n            while True:\n                this = sourceget()\n                if this is None:\n                    raise source.error(\"unterminated character set\",\n                                       source.tell() - here)\n                if this == \"]\" and set:\n                    break\n                elif this[0] == \"\\\\\":\n                    code1 = _class_escape(source, this)\n                else:\n                    if set and this in '-&~|' and source.next == this:\n                        import warnings\n                        warnings.warn(\n                            'Possible set %s at position %d' % (\n                                'difference' if this == '-' else\n                                'intersection' if this == '&' else\n                                'symmetric difference' if this == '~' else\n                                'union',\n                                source.tell() - 1),\n                            FutureWarning, stacklevel=nested + 6\n                        )\n                    code1 = LITERAL, _ord(this)\n                if sourcematch(\"-\"):\n                    # potential range\n                    that = sourceget()\n                    if that is None:\n                        raise source.error(\"unterminated character set\",\n                                           source.tell() - here)\n                    if that == \"]\":\n                        if code1[0] is IN:\n                            code1 = code1[1][0]\n                        setappend(code1)\n                        setappend((LITERAL, _ord(\"-\")))\n                        break\n                    if that[0] == \"\\\\\":\n                        code2 = _class_escape(source, that)\n                    else:\n                        if that == '-':\n                            import warnings\n                            warnings.warn(\n                                'Possible set difference at position %d' % (\n                                    source.tell() - 2),\n                                FutureWarning, stacklevel=nested + 6\n                            )\n                        code2 = LITERAL, _ord(that)\n                    if code1[0] != LITERAL or code2[0] != LITERAL:\n                        msg = \"bad character range %s-%s\" % (this, that)\n                        raise source.error(msg, len(this) + 1 + len(that))\n                    lo = code1[1]\n                    hi = code2[1]\n                    if hi < lo:\n                        msg = \"bad character range %s-%s\" % (this, that)\n                        raise source.error(msg, len(this) + 1 + len(that))\n                    setappend((RANGE, (lo, hi)))\n                else:\n                    if code1[0] is IN:\n                        code1 = code1[1][0]\n                    setappend(code1)\n\n            set = _uniq(set)\n            # XXX: <fl> should move set optimization to compiler!\n            if _len(set) == 1 and set[0][0] is LITERAL:\n                # optimization\n                if negate:\n                    subpatternappend((NOT_LITERAL, set[0][1]))\n                else:\n                    subpatternappend(set[0])\n            else:\n                if negate:\n                    set.insert(0, (NEGATE, None))\n                # charmap optimization can't be added here because\n                # global flags still are not known\n                subpatternappend((IN, set))\n\n        elif this in REPEAT_CHARS:\n            # repeat previous item\n            here = source.tell()\n            if this == \"?\":\n                min, max = 0, 1\n            elif this == \"*\":\n                min, max = 0, MAXREPEAT\n\n            elif this == \"+\":\n                min, max = 1, MAXREPEAT\n            elif this == \"{\":\n                if source.next == \"}\":\n                    subpatternappend((LITERAL, _ord(this)))\n                    continue\n\n                min, max = 0, MAXREPEAT\n                lo = hi = \"\"\n                while source.next in DIGITS:\n                    lo += sourceget()\n                if sourcematch(\",\"):\n                    while source.next in DIGITS:\n                        hi += sourceget()\n                else:\n                    hi = lo\n                if not sourcematch(\"}\"):\n                    subpatternappend((LITERAL, _ord(this)))\n                    source.seek(here)\n                    continue\n\n                if lo:\n                    min = int(lo)\n                    if min >= MAXREPEAT:\n                        raise OverflowError(\"the repetition number is too large\")\n                if hi:\n                    max = int(hi)\n                    if max >= MAXREPEAT:\n                        raise OverflowError(\"the repetition number is too large\")\n                    if max < min:\n                        raise source.error(\"min repeat greater than max repeat\",\n                                           source.tell() - here)\n            else:\n                raise AssertionError(\"unsupported quantifier %r\" % (char,))\n            # figure out which item to repeat\n            if subpattern:\n                item = subpattern[-1:]\n            else:\n                item = None\n            if not item or item[0][0] is AT:\n                raise source.error(\"nothing to repeat\",\n                                   source.tell() - here + len(this))\n            if item[0][0] in _REPEATCODES:\n                raise source.error(\"multiple repeat\",\n                                   source.tell() - here + len(this))\n            if item[0][0] is SUBPATTERN:\n                group, add_flags, del_flags, p = item[0][1]\n                if group is None and not add_flags and not del_flags:\n                    item = p\n            if sourcematch(\"?\"):\n                subpattern[-1] = (MIN_REPEAT, (min, max, item))\n            else:\n                subpattern[-1] = (MAX_REPEAT, (min, max, item))\n\n        elif this == \".\":\n            subpatternappend((ANY, None))\n\n        elif this == \"(\":\n            start = source.tell() - 1\n            group = True\n            name = None\n            add_flags = 0\n            del_flags = 0\n            if sourcematch(\"?\"):\n                # options\n                char = sourceget()\n                if char is None:\n                    raise source.error(\"unexpected end of pattern\")\n                if char == \"P\":\n                    # python extensions\n                    if sourcematch(\"<\"):\n                        # named group: skip forward to end of name\n                        name = source.getuntil(\">\", \"group name\")\n                        if not name.isidentifier():\n                            msg = \"bad character in group name %r\" % name\n                            raise source.error(msg, len(name) + 1)\n                    elif sourcematch(\"=\"):\n                        # named backreference\n                        name = source.getuntil(\")\", \"group name\")\n                        if not name.isidentifier():\n                            msg = \"bad character in group name %r\" % name\n                            raise source.error(msg, len(name) + 1)\n                        gid = state.groupdict.get(name)\n                        if gid is None:\n                            msg = \"unknown group name %r\" % name\n                            raise source.error(msg, len(name) + 1)\n                        if not state.checkgroup(gid):\n                            raise source.error(\"cannot refer to an open group\",\n                                               len(name) + 1)\n                        state.checklookbehindgroup(gid, source)\n                        subpatternappend((GROUPREF, gid))\n                        continue\n\n                    else:\n                        char = sourceget()\n                        if char is None:\n                            raise source.error(\"unexpected end of pattern\")\n                        raise source.error(\"unknown extension ?P\" + char,\n                                           len(char) + 2)\n                elif char == \":\":\n                    # non-capturing group\n                    group = None\n                elif char == \"#\":\n                    # comment\n                    while True:\n                        if source.next is None:\n                            raise source.error(\"missing ), unterminated comment\",\n                                               source.tell() - start)\n                        if sourceget() == \")\":\n                            break\n                    continue\n\n                elif char in \"=!<\":\n                    # lookahead assertions\n                    dir = 1\n                    if char == \"<\":\n                        char = sourceget()\n                        if char is None:\n                            raise source.error(\"unexpected end of pattern\")\n                        if char not in \"=!\":\n                            raise source.error(\"unknown extension ?<\" + char,\n                                               len(char) + 2)\n                        dir = -1 # lookbehind\n                        lookbehindgroups = state.lookbehindgroups\n                        if lookbehindgroups is None:\n                            state.lookbehindgroups = state.groups\n                    p = _parse_sub(source, state, verbose, nested + 1)\n                    if dir < 0:\n                        if lookbehindgroups is None:\n                            state.lookbehindgroups = None\n                    if not sourcematch(\")\"):\n                        raise source.error(\"missing ), unterminated subpattern\",\n                                           source.tell() - start)\n                    if char == \"=\":\n                        subpatternappend((ASSERT, (dir, p)))\n                    else:\n                        subpatternappend((ASSERT_NOT, (dir, p)))\n                    continue\n\n                elif char == \"(\":\n                    # conditional backreference group\n                    condname = source.getuntil(\")\", \"group name\")\n                    if condname.isidentifier():\n                        condgroup = state.groupdict.get(condname)\n                        if condgroup is None:\n                            msg = \"unknown group name %r\" % condname\n                            raise source.error(msg, len(condname) + 1)\n                    else:\n                        try:\n                            condgroup = int(condname)\n                            if condgroup < 0:\n                                raise ValueError\n                        except ValueError:\n                            msg = \"bad character in group name %r\" % condname\n                            raise source.error(msg, len(condname) + 1) from None\n                        if not condgroup:\n                            raise source.error(\"bad group number\",\n                                               len(condname) + 1)\n                        if condgroup >= MAXGROUPS:\n                            msg = \"invalid group reference %d\" % condgroup\n                            raise source.error(msg, len(condname) + 1)\n                    state.checklookbehindgroup(condgroup, source)\n                    item_yes = _parse(source, state, verbose, nested + 1)\n                    if source.match(\"|\"):\n                        item_no = _parse(source, state, verbose, nested + 1)\n                        if source.next == \"|\":\n                            raise source.error(\"conditional backref with more than two branches\")\n                    else:\n                        item_no = None\n                    if not source.match(\")\"):\n                        raise source.error(\"missing ), unterminated subpattern\",\n                                           source.tell() - start)\n                    subpatternappend((GROUPREF_EXISTS, (condgroup, item_yes, item_no)))\n                    continue\n\n                elif char in FLAGS or char == \"-\":\n                    # flags\n                    flags = _parse_flags(source, state, char)\n                    if flags is None:  # global flags\n                        if not first or subpattern:\n                            import warnings\n                            warnings.warn(\n                                'Flags not at the start of the expression %r%s' % (\n                                    source.string[:20],  # truncate long regexes\n                                    ' (truncated)' if len(source.string) > 20 else '',\n                                ),\n                                DeprecationWarning, stacklevel=nested + 6\n                            )\n                        if (state.flags & SRE_FLAG_VERBOSE) and not verbose:\n                            raise Verbose\n                        continue\n\n                    add_flags, del_flags = flags\n                    group = None\n                else:\n                    raise source.error(\"unknown extension ?\" + char,\n                                       len(char) + 1)\n\n            # parse group contents\n            if group is not None:\n                try:\n                    group = state.opengroup(name)\n                except error as err:\n                    raise source.error(err.msg, len(name) + 1) from None\n            sub_verbose = ((verbose or (add_flags & SRE_FLAG_VERBOSE)) and\n                           not (del_flags & SRE_FLAG_VERBOSE))\n            p = _parse_sub(source, state, sub_verbose, nested + 1)\n            if not source.match(\")\"):\n                raise source.error(\"missing ), unterminated subpattern\",\n                                   source.tell() - start)\n            if group is not None:\n                state.closegroup(group, p)\n            subpatternappend((SUBPATTERN, (group, add_flags, del_flags, p)))\n\n        elif this == \"^\":\n            subpatternappend((AT, AT_BEGINNING))\n\n        elif this == \"$\":\n            subpatternappend((AT, AT_END))\n\n        else:\n            raise AssertionError(\"unsupported special character %r\" % (char,))\n\n    # unpack non-capturing groups\n    for i in range(len(subpattern))[::-1]:\n        op, av = subpattern[i]\n        if op is SUBPATTERN:\n            group, add_flags, del_flags, p = av\n            if group is None and not add_flags and not del_flags:\n                subpattern[i: i+1] = p\n\n    return subpattern\n\ndef _parse_flags(source, state, char):\n    sourceget = source.get\n    add_flags = 0\n    del_flags = 0\n    if char != \"-\":\n        while True:\n            flag = FLAGS[char]\n            if source.istext:\n                if char == 'L':\n                    msg = \"bad inline flags: cannot use 'L' flag with a str pattern\"\n                    raise source.error(msg)\n            else:\n                if char == 'u':\n                    msg = \"bad inline flags: cannot use 'u' flag with a bytes pattern\"\n                    raise source.error(msg)\n            add_flags |= flag\n            if (flag & TYPE_FLAGS) and (add_flags & TYPE_FLAGS) != flag:\n                msg = \"bad inline flags: flags 'a', 'u' and 'L' are incompatible\"\n                raise source.error(msg)\n            char = sourceget()\n            if char is None:\n                raise source.error(\"missing -, : or )\")\n            if char in \")-:\":\n                break\n            if char not in FLAGS:\n                msg = \"unknown flag\" if char.isalpha() else \"missing -, : or )\"\n                raise source.error(msg, len(char))\n    if char == \")\":\n        state.flags |= add_flags\n        return None\n    if add_flags & GLOBAL_FLAGS:\n        raise source.error(\"bad inline flags: cannot turn on global flag\", 1)\n    if char == \"-\":\n        char = sourceget()\n        if char is None:\n            raise source.error(\"missing flag\")\n        if char not in FLAGS:\n            msg = \"unknown flag\" if char.isalpha() else \"missing flag\"\n            raise source.error(msg, len(char))\n        while True:\n            flag = FLAGS[char]\n            if flag & TYPE_FLAGS:\n                msg = \"bad inline flags: cannot turn off flags 'a', 'u' and 'L'\"\n                raise source.error(msg)\n            del_flags |= flag\n            char = sourceget()\n            if char is None:\n                raise source.error(\"missing :\")\n            if char == \":\":\n                break\n            if char not in FLAGS:\n                msg = \"unknown flag\" if char.isalpha() else \"missing :\"\n                raise source.error(msg, len(char))\n    assert char == \":\"\n    if del_flags & GLOBAL_FLAGS:\n        raise source.error(\"bad inline flags: cannot turn off global flag\", 1)\n    if add_flags & del_flags:\n        raise source.error(\"bad inline flags: flag turned on and off\", 1)\n    return add_flags, del_flags\n\ndef fix_flags(src, flags):\n    # Check and fix flags according to the type of pattern (str or bytes)\n    if isinstance(src, str):\n        if flags & SRE_FLAG_LOCALE:\n            raise ValueError(\"cannot use LOCALE flag with a str pattern\")\n        if not flags & SRE_FLAG_ASCII:\n            flags |= SRE_FLAG_UNICODE\n        elif flags & SRE_FLAG_UNICODE:\n            raise ValueError(\"ASCII and UNICODE flags are incompatible\")\n    else:\n        if flags & SRE_FLAG_UNICODE:\n            raise ValueError(\"cannot use UNICODE flag with a bytes pattern\")\n        if flags & SRE_FLAG_LOCALE and flags & SRE_FLAG_ASCII:\n            raise ValueError(\"ASCII and LOCALE flags are incompatible\")\n    return flags\n\ndef parse(str, flags=0, state=None):\n    # parse 're' pattern into list of (opcode, argument) tuples\n\n    source = Tokenizer(str)\n\n    if state is None:\n        state = State()\n    state.flags = flags\n    state.str = str\n\n    try:\n        p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\n    except Verbose:\n        # the VERBOSE flag was switched on inside the pattern.  to be\n        # on the safe side, we'll parse the whole thing again...\n        state = State()\n        state.flags = flags | SRE_FLAG_VERBOSE\n        state.str = str\n        source.seek(0)\n        p = _parse_sub(source, state, True, 0)\n\n    p.state.flags = fix_flags(str, p.state.flags)\n\n    if source.next is not None:\n        assert source.next == \")\"\n        raise source.error(\"unbalanced parenthesis\")\n\n    if flags & SRE_FLAG_DEBUG:\n        p.dump()\n\n    return p\n\ndef parse_template(source, state):\n    # parse 're' replacement string into list of literals and\n    # group references\n    s = Tokenizer(source)\n    sget = s.get\n    groups = []\n    literals = []\n    literal = []\n    lappend = literal.append\n    def addgroup(index, pos):\n        if index > state.groups:\n            raise s.error(\"invalid group reference %d\" % index, pos)\n        if literal:\n            literals.append(''.join(literal))\n            del literal[:]\n        groups.append((len(literals), index))\n        literals.append(None)\n    groupindex = state.groupindex\n    while True:\n        this = sget()\n        if this is None:\n            break # end of replacement string\n        if this[0] == \"\\\\\":\n            # group\n            c = this[1]\n            if c == \"g\":\n                name = \"\"\n                if not s.match(\"<\"):\n                    raise s.error(\"missing <\")\n                name = s.getuntil(\">\", \"group name\")\n                if name.isidentifier():\n                    try:\n                        index = groupindex[name]\n                    except KeyError:\n                        raise IndexError(\"unknown group name %r\" % name)\n                else:\n                    try:\n                        index = int(name)\n                        if index < 0:\n                            raise ValueError\n                    except ValueError:\n                        raise s.error(\"bad character in group name %r\" % name,\n                                      len(name) + 1) from None\n                    if index >= MAXGROUPS:\n                        raise s.error(\"invalid group reference %d\" % index,\n                                      len(name) + 1)\n                addgroup(index, len(name) + 1)\n            elif c == \"0\":\n                if s.next in OCTDIGITS:\n                    this += sget()\n                    if s.next in OCTDIGITS:\n                        this += sget()\n                lappend(chr(int(this[1:], 8) & 0xff))\n            elif c in DIGITS:\n                isoctal = False\n                if s.next in DIGITS:\n                    this += sget()\n                    if (c in OCTDIGITS and this[2] in OCTDIGITS and\n                        s.next in OCTDIGITS):\n                        this += sget()\n                        isoctal = True\n                        c = int(this[1:], 8)\n                        if c > 0o377:\n                            raise s.error('octal escape value %s outside of '\n                                          'range 0-0o377' % this, len(this))\n                        lappend(chr(c))\n                if not isoctal:\n                    addgroup(int(this[1:]), len(this) - 1)\n            else:\n                try:\n                    this = chr(ESCAPES[this][1])\n                except KeyError:\n                    if c in ASCIILETTERS:\n                        raise s.error('bad escape %s' % this, len(this))\n                lappend(this)\n        else:\n            lappend(this)\n    if literal:\n        literals.append(''.join(literal))\n    if not isinstance(source, str):\n        # The tokenizer implicitly decodes bytes objects as latin-1, we must\n        # therefore re-encode the final representation.\n        literals = [None if s is None else s.encode('latin-1') for s in literals]\n    return groups, literals\n\ndef expand_template(template, match):\n    g = match.group\n    empty = match.string[:0]\n    groups, literals = template\n    literals = literals[:]\n    try:\n        for index, group in groups:\n            literals[index] = g(group) or empty\n    except IndexError:\n        raise error(\"invalid group reference %d\" % index)\n    return empty.join(literals)\n", 1064], "C:\\Python38\\lib\\enum.py": ["import sys\nfrom types import MappingProxyType, DynamicClassAttribute\n\n\n__all__ = [\n        'EnumMeta',\n        'Enum', 'IntEnum', 'Flag', 'IntFlag',\n        'auto', 'unique',\n        ]\n\n\ndef _is_descriptor(obj):\n    \"\"\"\n    Returns True if obj is a descriptor, False otherwise.\n    \"\"\"\n    return (\n            hasattr(obj, '__get__') or\n            hasattr(obj, '__set__') or\n            hasattr(obj, '__delete__')\n            )\n\ndef _is_dunder(name):\n    \"\"\"\n    Returns True if a __dunder__ name, False otherwise.\n    \"\"\"\n    return (\n            len(name) > 4 and\n            name[:2] == name[-2:] == '__' and\n            name[2] != '_' and\n            name[-3] != '_'\n            )\n\ndef _is_sunder(name):\n    \"\"\"\n    Returns True if a _sunder_ name, False otherwise.\n    \"\"\"\n    return (\n            len(name) > 2 and\n            name[0] == name[-1] == '_' and\n            name[1:2] != '_' and\n            name[-2:-1] != '_'\n            )\n\ndef _make_class_unpicklable(cls):\n    \"\"\"\n    Make the given class un-picklable.\n    \"\"\"\n    def _break_on_call_reduce(self, proto):\n        raise TypeError('%r cannot be pickled' % self)\n    cls.__reduce_ex__ = _break_on_call_reduce\n    cls.__module__ = '<unknown>'\n\n_auto_null = object()\nclass auto:\n    \"\"\"\n    Instances are replaced with an appropriate value in Enum class suites.\n    \"\"\"\n    value = _auto_null\n\n\nclass _EnumDict(dict):\n    \"\"\"\n    Track enum member order and ensure member names are not reused.\n\n    EnumMeta will use the names found in self._member_names as the\n    enumeration member names.\n    \"\"\"\n    def __init__(self):\n        super().__init__()\n        self._member_names = []\n        self._last_values = []\n        self._ignore = []\n        self._auto_called = False\n\n    def __setitem__(self, key, value):\n        \"\"\"\n        Changes anything not dundered or not a descriptor.\n\n        If an enum member name is used twice, an error is raised; duplicate\n        values are not checked for.\n\n        Single underscore (sunder) names are reserved.\n        \"\"\"\n        if _is_sunder(key):\n            if key not in (\n                    '_order_', '_create_pseudo_member_',\n                    '_generate_next_value_', '_missing_', '_ignore_',\n                    ):\n                raise ValueError('_names_ are reserved for future Enum use')\n            if key == '_generate_next_value_':\n                # check if members already defined as auto()\n                if self._auto_called:\n                    raise TypeError(\"_generate_next_value_ must be defined before members\")\n                setattr(self, '_generate_next_value', value)\n            elif key == '_ignore_':\n                if isinstance(value, str):\n                    value = value.replace(',',' ').split()\n                else:\n                    value = list(value)\n                self._ignore = value\n                already = set(value) & set(self._member_names)\n                if already:\n                    raise ValueError(\n                            '_ignore_ cannot specify already set names: %r'\n                            % (already, )\n                            )\n        elif _is_dunder(key):\n            if key == '__order__':\n                key = '_order_'\n        elif key in self._member_names:\n            # descriptor overwriting an enum?\n            raise TypeError('Attempted to reuse key: %r' % key)\n        elif key in self._ignore:\n            pass\n        elif not _is_descriptor(value):\n            if key in self:\n                # enum overwriting a descriptor?\n                raise TypeError('%r already defined as: %r' % (key, self[key]))\n            if isinstance(value, auto):\n                if value.value == _auto_null:\n                    value.value = self._generate_next_value(\n                            key,\n                            1,\n                            len(self._member_names),\n                            self._last_values[:],\n                            )\n                    self._auto_called = True\n                value = value.value\n            self._member_names.append(key)\n            self._last_values.append(value)\n        super().__setitem__(key, value)\n\n\n# Dummy value for Enum as EnumMeta explicitly checks for it, but of course\n# until EnumMeta finishes running the first time the Enum class doesn't exist.\n# This is also why there are checks in EnumMeta like `if Enum is not None`\nEnum = None\n\nclass EnumMeta(type):\n    \"\"\"\n    Metaclass for Enum\n    \"\"\"\n    @classmethod\n    def __prepare__(metacls, cls, bases):\n        # check that previous enum members do not exist\n        metacls._check_for_existing_members(cls, bases)\n        # create the namespace dict\n        enum_dict = _EnumDict()\n        # inherit previous flags and _generate_next_value_ function\n        member_type, first_enum = metacls._get_mixins_(cls, bases)\n        if first_enum is not None:\n            enum_dict['_generate_next_value_'] = getattr(\n                    first_enum, '_generate_next_value_', None,\n                    )\n        return enum_dict\n\n    def __new__(metacls, cls, bases, classdict):\n        # an Enum class is final once enumeration items have been defined; it\n        # cannot be mixed with other types (int, float, etc.) if it has an\n        # inherited __new__ unless a new __new__ is defined (or the resulting\n        # class will fail).\n        #\n        # remove any keys listed in _ignore_\n        classdict.setdefault('_ignore_', []).append('_ignore_')\n        ignore = classdict['_ignore_']\n        for key in ignore:\n            classdict.pop(key, None)\n        member_type, first_enum = metacls._get_mixins_(cls, bases)\n        __new__, save_new, use_args = metacls._find_new_(\n                classdict, member_type, first_enum,\n                )\n\n        # save enum items into separate mapping so they don't get baked into\n        # the new class\n        enum_members = {k: classdict[k] for k in classdict._member_names}\n        for name in classdict._member_names:\n            del classdict[name]\n\n        # adjust the sunders\n        _order_ = classdict.pop('_order_', None)\n\n        # check for illegal enum names (any others?)\n        invalid_names = set(enum_members) & {'mro', ''}\n        if invalid_names:\n            raise ValueError('Invalid enum member name: {0}'.format(\n                ','.join(invalid_names)))\n\n        # create a default docstring if one has not been provided\n        if '__doc__' not in classdict:\n            classdict['__doc__'] = 'An enumeration.'\n\n        # create our new Enum type\n        enum_class = super().__new__(metacls, cls, bases, classdict)\n        enum_class._member_names_ = []               # names in definition order\n        enum_class._member_map_ = {}                 # name->value map\n        enum_class._member_type_ = member_type\n\n        # save DynamicClassAttribute attributes from super classes so we know\n        # if we can take the shortcut of storing members in the class dict\n        dynamic_attributes = {\n                k for c in enum_class.mro()\n                for k, v in c.__dict__.items()\n                if isinstance(v, DynamicClassAttribute)\n                }\n\n        # Reverse value->name map for hashable values.\n        enum_class._value2member_map_ = {}\n\n        # If a custom type is mixed into the Enum, and it does not know how\n        # to pickle itself, pickle.dumps will succeed but pickle.loads will\n        # fail.  Rather than have the error show up later and possibly far\n        # from the source, sabotage the pickle protocol for this class so\n        # that pickle.dumps also fails.\n        #\n        # However, if the new class implements its own __reduce_ex__, do not\n        # sabotage -- it's on them to make sure it works correctly.  We use\n        # __reduce_ex__ instead of any of the others as it is preferred by\n        # pickle over __reduce__, and it handles all pickle protocols.\n        if '__reduce_ex__' not in classdict:\n            if member_type is not object:\n                methods = ('__getnewargs_ex__', '__getnewargs__',\n                        '__reduce_ex__', '__reduce__')\n                if not any(m in member_type.__dict__ for m in methods):\n                    _make_class_unpicklable(enum_class)\n\n        # instantiate them, checking for duplicates as we go\n        # we instantiate first instead of checking for duplicates first in case\n        # a custom __new__ is doing something funky with the values -- such as\n        # auto-numbering ;)\n        for member_name in classdict._member_names:\n            value = enum_members[member_name]\n            if not isinstance(value, tuple):\n                args = (value, )\n            else:\n                args = value\n            if member_type is tuple:   # special case for tuple enums\n                args = (args, )     # wrap it one more time\n            if not use_args:\n                enum_member = __new__(enum_class)\n                if not hasattr(enum_member, '_value_'):\n                    enum_member._value_ = value\n            else:\n                enum_member = __new__(enum_class, *args)\n                if not hasattr(enum_member, '_value_'):\n                    if member_type is object:\n                        enum_member._value_ = value\n                    else:\n                        enum_member._value_ = member_type(*args)\n            value = enum_member._value_\n            enum_member._name_ = member_name\n            enum_member.__objclass__ = enum_class\n            enum_member.__init__(*args)\n            # If another member with the same value was already defined, the\n            # new member becomes an alias to the existing one.\n            for name, canonical_member in enum_class._member_map_.items():\n                if canonical_member._value_ == enum_member._value_:\n                    enum_member = canonical_member\n                    break\n            else:\n                # Aliases don't appear in member names (only in __members__).\n                enum_class._member_names_.append(member_name)\n            # performance boost for any member that would not shadow\n            # a DynamicClassAttribute\n            if member_name not in dynamic_attributes:\n                setattr(enum_class, member_name, enum_member)\n            # now add to _member_map_\n            enum_class._member_map_[member_name] = enum_member\n            try:\n                # This may fail if value is not hashable. We can't add the value\n                # to the map, and by-value lookups for this value will be\n                # linear.\n                enum_class._value2member_map_[value] = enum_member\n            except TypeError:\n                pass\n\n        # double check that repr and friends are not the mixin's or various\n        # things break (such as pickle)\n        # however, if the method is defined in the Enum itself, don't replace\n        # it\n        for name in ('__repr__', '__str__', '__format__', '__reduce_ex__'):\n            if name in classdict:\n                continue\n            class_method = getattr(enum_class, name)\n            obj_method = getattr(member_type, name, None)\n            enum_method = getattr(first_enum, name, None)\n            if obj_method is not None and obj_method is class_method:\n                setattr(enum_class, name, enum_method)\n\n        # replace any other __new__ with our own (as long as Enum is not None,\n        # anyway) -- again, this is to support pickle\n        if Enum is not None:\n            # if the user defined their own __new__, save it before it gets\n            # clobbered in case they subclass later\n            if save_new:\n                enum_class.__new_member__ = __new__\n            enum_class.__new__ = Enum.__new__\n\n        # py3 support for definition order (helps keep py2/py3 code in sync)\n        if _order_ is not None:\n            if isinstance(_order_, str):\n                _order_ = _order_.replace(',', ' ').split()\n            if _order_ != enum_class._member_names_:\n                raise TypeError('member order does not match _order_')\n\n        return enum_class\n\n    def __bool__(self):\n        \"\"\"\n        classes/types should always be True.\n        \"\"\"\n        return True\n\n    def __call__(cls, value, names=None, *, module=None, qualname=None, type=None, start=1):\n        \"\"\"\n        Either returns an existing member, or creates a new enum class.\n\n        This method is used both when an enum class is given a value to match\n        to an enumeration member (i.e. Color(3)) and for the functional API\n        (i.e. Color = Enum('Color', names='RED GREEN BLUE')).\n\n        When used for the functional API:\n\n        `value` will be the name of the new class.\n\n        `names` should be either a string of white-space/comma delimited names\n        (values will start at `start`), or an iterator/mapping of name, value pairs.\n\n        `module` should be set to the module this class is being created in;\n        if it is not set, an attempt to find that module will be made, but if\n        it fails the class will not be picklable.\n\n        `qualname` should be set to the actual location this class can be found\n        at in its module; by default it is set to the global scope.  If this is\n        not correct, unpickling will fail in some circumstances.\n\n        `type`, if set, will be mixed in as the first base class.\n        \"\"\"\n        if names is None:  # simple value lookup\n            return cls.__new__(cls, value)\n        # otherwise, functional API: we're creating a new Enum type\n        return cls._create_(\n                value,\n                names,\n                module=module,\n                qualname=qualname,\n                type=type,\n                start=start,\n                )\n\n    def __contains__(cls, member):\n        if not isinstance(member, Enum):\n            raise TypeError(\n                \"unsupported operand type(s) for 'in': '%s' and '%s'\" % (\n                    type(member).__qualname__, cls.__class__.__qualname__))\n        return isinstance(member, cls) and member._name_ in cls._member_map_\n\n    def __delattr__(cls, attr):\n        # nicer error message when someone tries to delete an attribute\n        # (see issue19025).\n        if attr in cls._member_map_:\n            raise AttributeError(\"%s: cannot delete Enum member.\" % cls.__name__)\n        super().__delattr__(attr)\n\n    def __dir__(self):\n        return (\n                ['__class__', '__doc__', '__members__', '__module__']\n                + self._member_names_\n                )\n\n    def __getattr__(cls, name):\n        \"\"\"\n        Return the enum member matching `name`\n\n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n            raise AttributeError(name) from None\n\n    def __getitem__(cls, name):\n        return cls._member_map_[name]\n\n    def __iter__(cls):\n        \"\"\"\n        Returns members in definition order.\n        \"\"\"\n        return (cls._member_map_[name] for name in cls._member_names_)\n\n    def __len__(cls):\n        return len(cls._member_names_)\n\n    @property\n    def __members__(cls):\n        \"\"\"\n        Returns a mapping of member name->value.\n\n        This mapping lists all enum members, including aliases. Note that this\n        is a read-only view of the internal mapping.\n        \"\"\"\n        return MappingProxyType(cls._member_map_)\n\n    def __repr__(cls):\n        return \"<enum %r>\" % cls.__name__\n\n    def __reversed__(cls):\n        \"\"\"\n        Returns members in reverse definition order.\n        \"\"\"\n        return (cls._member_map_[name] for name in reversed(cls._member_names_))\n\n    def __setattr__(cls, name, value):\n        \"\"\"\n        Block attempts to reassign Enum members.\n\n        A simple assignment to the class namespace only changes one of the\n        several possible ways to get an Enum member from the Enum class,\n        resulting in an inconsistent Enumeration.\n        \"\"\"\n        member_map = cls.__dict__.get('_member_map_', {})\n        if name in member_map:\n            raise AttributeError('Cannot reassign members.')\n        super().__setattr__(name, value)\n\n    def _create_(cls, class_name, names, *, module=None, qualname=None, type=None, start=1):\n        \"\"\"\n        Convenience method to create a new Enum class.\n\n        `names` can be:\n\n        * A string containing member names, separated either with spaces or\n          commas.  Values are incremented by 1 from `start`.\n        * An iterable of member names.  Values are incremented by 1 from `start`.\n        * An iterable of (member name, value) pairs.\n        * A mapping of member name -> value pairs.\n        \"\"\"\n        metacls = cls.__class__\n        bases = (cls, ) if type is None else (type, cls)\n        _, first_enum = cls._get_mixins_(cls, bases)\n        classdict = metacls.__prepare__(class_name, bases)\n\n        # special processing needed for names?\n        if isinstance(names, str):\n            names = names.replace(',', ' ').split()\n        if isinstance(names, (tuple, list)) and names and isinstance(names[0], str):\n            original_names, names = names, []\n            last_values = []\n            for count, name in enumerate(original_names):\n                value = first_enum._generate_next_value_(name, start, count, last_values[:])\n                last_values.append(value)\n                names.append((name, value))\n\n        # Here, names is either an iterable of (name, value) or a mapping.\n        for item in names:\n            if isinstance(item, str):\n                member_name, member_value = item, names[item]\n            else:\n                member_name, member_value = item\n            classdict[member_name] = member_value\n        enum_class = metacls.__new__(metacls, class_name, bases, classdict)\n\n        # TODO: replace the frame hack if a blessed way to know the calling\n        # module is ever developed\n        if module is None:\n            try:\n                module = sys._getframe(2).f_globals['__name__']\n            except (AttributeError, ValueError, KeyError) as exc:\n                pass\n        if module is None:\n            _make_class_unpicklable(enum_class)\n        else:\n            enum_class.__module__ = module\n        if qualname is not None:\n            enum_class.__qualname__ = qualname\n\n        return enum_class\n\n    def _convert_(cls, name, module, filter, source=None):\n        \"\"\"\n        Create a new Enum subclass that replaces a collection of global constants\n        \"\"\"\n        # convert all constants from source (or module) that pass filter() to\n        # a new Enum called name, and export the enum and its members back to\n        # module;\n        # also, replace the __reduce_ex__ method so unpickling works in\n        # previous Python versions\n        module_globals = vars(sys.modules[module])\n        if source:\n            source = vars(source)\n        else:\n            source = module_globals\n        # _value2member_map_ is populated in the same order every time\n        # for a consistent reverse mapping of number to name when there\n        # are multiple names for the same number.\n        members = [\n                (name, value)\n                for name, value in source.items()\n                if filter(name)]\n        try:\n            # sort by value\n            members.sort(key=lambda t: (t[1], t[0]))\n        except TypeError:\n            # unless some values aren't comparable, in which case sort by name\n            members.sort(key=lambda t: t[0])\n        cls = cls(name, members, module=module)\n        cls.__reduce_ex__ = _reduce_ex_by_name\n        module_globals.update(cls.__members__)\n        module_globals[name] = cls\n        return cls\n\n    def _convert(cls, *args, **kwargs):\n        import warnings\n        warnings.warn(\"_convert is deprecated and will be removed in 3.9, use \"\n                      \"_convert_ instead.\", DeprecationWarning, stacklevel=2)\n        return cls._convert_(*args, **kwargs)\n\n    @staticmethod\n    def _check_for_existing_members(class_name, bases):\n        for chain in bases:\n            for base in chain.__mro__:\n                if issubclass(base, Enum) and base._member_names_:\n                    raise TypeError(\n                            \"%s: cannot extend enumeration %r\"\n                            % (class_name, base.__name__)\n                            )\n\n    @staticmethod\n    def _get_mixins_(class_name, bases):\n        \"\"\"\n        Returns the type for creating enum members, and the first inherited\n        enum class.\n\n        bases: the tuple of bases that was given to __new__\n        \"\"\"\n        if not bases:\n            return object, Enum\n\n        def _find_data_type(bases):\n            data_types = []\n            for chain in bases:\n                candidate = None\n                for base in chain.__mro__:\n                    if base is object:\n                        continue\n                    elif issubclass(base, Enum):\n                        if base._member_type_ is not object:\n                            data_types.append(base._member_type_)\n                            break\n                    elif '__new__' in base.__dict__:\n                        if issubclass(base, Enum):\n                            continue\n                        data_types.append(candidate or base)\n                        break\n                    else:\n                        candidate = base\n            if len(data_types) > 1:\n                raise TypeError('%r: too many data types: %r' % (class_name, data_types))\n            elif data_types:\n                return data_types[0]\n            else:\n                return None\n\n        # ensure final parent class is an Enum derivative, find any concrete\n        # data type, and check that Enum has no members\n        first_enum = bases[-1]\n        if not issubclass(first_enum, Enum):\n            raise TypeError(\"new enumerations should be created as \"\n                    \"`EnumName([mixin_type, ...] [data_type,] enum_type)`\")\n        member_type = _find_data_type(bases) or object\n        if first_enum._member_names_:\n            raise TypeError(\"Cannot extend enumerations\")\n        return member_type, first_enum\n\n    @staticmethod\n    def _find_new_(classdict, member_type, first_enum):\n        \"\"\"\n        Returns the __new__ to be used for creating the enum members.\n\n        classdict: the class dictionary given to __new__\n        member_type: the data type whose __new__ will be used by default\n        first_enum: enumeration to check for an overriding __new__\n        \"\"\"\n        # now find the correct __new__, checking to see of one was defined\n        # by the user; also check earlier enum classes in case a __new__ was\n        # saved as __new_member__\n        __new__ = classdict.get('__new__', None)\n\n        # should __new__ be saved as __new_member__ later?\n        save_new = __new__ is not None\n\n        if __new__ is None:\n            # check all possibles for __new_member__ before falling back to\n            # __new__\n            for method in ('__new_member__', '__new__'):\n                for possible in (member_type, first_enum):\n                    target = getattr(possible, method, None)\n                    if target not in {\n                            None,\n                            None.__new__,\n                            object.__new__,\n                            Enum.__new__,\n                            }:\n                        __new__ = target\n                        break\n                if __new__ is not None:\n                    break\n            else:\n                __new__ = object.__new__\n\n        # if a non-object.__new__ is used then whatever value/tuple was\n        # assigned to the enum member name will be passed to __new__ and to the\n        # new enum member's __init__\n        if __new__ is object.__new__:\n            use_args = False\n        else:\n            use_args = True\n        return __new__, save_new, use_args\n\n\nclass Enum(metaclass=EnumMeta):\n    \"\"\"\n    Generic enumeration.\n\n    Derive from this class to define new enumerations.\n    \"\"\"\n    def __new__(cls, value):\n        # all enum instances are actually created during class construction\n        # without calling this method; this method is called by the metaclass'\n        # __call__ (i.e. Color(3) ), and by pickle\n        if type(value) is cls:\n            # For lookups like Color(Color.RED)\n            return value\n        # by-value search for a matching enum member\n        # see if it's in the reverse mapping (for hashable values)\n        try:\n            return cls._value2member_map_[value]\n        except KeyError:\n            # Not found, no need to do long O(n) search\n            pass\n        except TypeError:\n            # not there, now do long search -- O(n) behavior\n            for member in cls._member_map_.values():\n                if member._value_ == value:\n                    return member\n        # still not found -- try _missing_ hook\n        try:\n            exc = None\n            result = cls._missing_(value)\n        except Exception as e:\n            exc = e\n            result = None\n        try:\n            if isinstance(result, cls):\n                return result\n            else:\n                ve_exc = ValueError(\"%r is not a valid %s\" % (value, cls.__name__))\n                if result is None and exc is None:\n                    raise ve_exc\n                elif exc is None:\n                    exc = TypeError(\n                            'error in %s._missing_: returned %r instead of None or a valid member'\n                            % (cls.__name__, result)\n                            )\n                exc.__context__ = ve_exc\n                raise exc\n        finally:\n            # ensure all variables that could hold an exception are destroyed\n            exc = None\n            ve_exc = None\n\n    def _generate_next_value_(name, start, count, last_values):\n        \"\"\"\n        Generate the next value when not given.\n\n        name: the name of the member\n        start: the initial start value or None\n        count: the number of existing members\n        last_value: the last value assigned or None\n        \"\"\"\n        for last_value in reversed(last_values):\n            try:\n                return last_value + 1\n            except TypeError:\n                pass\n        else:\n            return start\n\n    @classmethod\n    def _missing_(cls, value):\n        return None\n\n    def __repr__(self):\n        return \"<%s.%s: %r>\" % (\n                self.__class__.__name__, self._name_, self._value_)\n\n    def __str__(self):\n        return \"%s.%s\" % (self.__class__.__name__, self._name_)\n\n    def __dir__(self):\n        \"\"\"\n        Returns all members and all public methods\n        \"\"\"\n        added_behavior = [\n                m\n                for cls in self.__class__.mro()\n                for m in cls.__dict__\n                if m[0] != '_' and m not in self._member_map_\n                ] + [m for m in self.__dict__ if m[0] != '_']\n        return (['__class__', '__doc__', '__module__'] + added_behavior)\n\n    def __format__(self, format_spec):\n        \"\"\"\n        Returns format using actual value type unless __str__ has been overridden.\n        \"\"\"\n        # mixed-in Enums should use the mixed-in type's __format__, otherwise\n        # we can get strange results with the Enum name showing up instead of\n        # the value\n\n        # pure Enum branch, or branch with __str__ explicitly overridden\n        str_overridden = type(self).__str__ not in (Enum.__str__, Flag.__str__)\n        if self._member_type_ is object or str_overridden:\n            cls = str\n            val = str(self)\n        # mix-in branch\n        else:\n            cls = self._member_type_\n            val = self._value_\n        return cls.__format__(val, format_spec)\n\n    def __hash__(self):\n        return hash(self._name_)\n\n    def __reduce_ex__(self, proto):\n        return self.__class__, (self._value_, )\n\n    # DynamicClassAttribute is used to provide access to the `name` and\n    # `value` properties of enum members while keeping some measure of\n    # protection from modification, while still allowing for an enumeration\n    # to have members named `name` and `value`.  This works because enumeration\n    # members are not set directly on the enum class -- __getattr__ is\n    # used to look them up.\n\n    @DynamicClassAttribute\n    def name(self):\n        \"\"\"The name of the Enum member.\"\"\"\n        return self._name_\n\n    @DynamicClassAttribute\n    def value(self):\n        \"\"\"The value of the Enum member.\"\"\"\n        return self._value_\n\n\nclass IntEnum(int, Enum):\n    \"\"\"Enum where members are also (and must be) ints\"\"\"\n\n\ndef _reduce_ex_by_name(self, proto):\n    return self.name\n\nclass Flag(Enum):\n    \"\"\"\n    Support for flags\n    \"\"\"\n\n    def _generate_next_value_(name, start, count, last_values):\n        \"\"\"\n        Generate the next value when not given.\n\n        name: the name of the member\n        start: the initial start value or None\n        count: the number of existing members\n        last_value: the last value assigned or None\n        \"\"\"\n        if not count:\n            return start if start is not None else 1\n        for last_value in reversed(last_values):\n            try:\n                high_bit = _high_bit(last_value)\n                break\n            except Exception:\n                raise TypeError('Invalid Flag value: %r' % last_value) from None\n        return 2 ** (high_bit+1)\n\n    @classmethod\n    def _missing_(cls, value):\n        \"\"\"\n        Returns member (possibly creating it) if one can be found for value.\n        \"\"\"\n        original_value = value\n        if value < 0:\n            value = ~value\n        possible_member = cls._create_pseudo_member_(value)\n        if original_value < 0:\n            possible_member = ~possible_member\n        return possible_member\n\n    @classmethod\n    def _create_pseudo_member_(cls, value):\n        \"\"\"\n        Create a composite member iff value contains only members.\n        \"\"\"\n        pseudo_member = cls._value2member_map_.get(value, None)\n        if pseudo_member is None:\n            # verify all bits are accounted for\n            _, extra_flags = _decompose(cls, value)\n            if extra_flags:\n                raise ValueError(\"%r is not a valid %s\" % (value, cls.__name__))\n            # construct a singleton enum pseudo-member\n            pseudo_member = object.__new__(cls)\n            pseudo_member._name_ = None\n            pseudo_member._value_ = value\n            # use setdefault in case another thread already created a composite\n            # with this value\n            pseudo_member = cls._value2member_map_.setdefault(value, pseudo_member)\n        return pseudo_member\n\n    def __contains__(self, other):\n        \"\"\"\n        Returns True if self has at least the same flags set as other.\n        \"\"\"\n        if not isinstance(other, self.__class__):\n            raise TypeError(\n                \"unsupported operand type(s) for 'in': '%s' and '%s'\" % (\n                    type(other).__qualname__, self.__class__.__qualname__))\n        return other._value_ & self._value_ == other._value_\n\n    def __repr__(self):\n        cls = self.__class__\n        if self._name_ is not None:\n            return '<%s.%s: %r>' % (cls.__name__, self._name_, self._value_)\n        members, uncovered = _decompose(cls, self._value_)\n        return '<%s.%s: %r>' % (\n                cls.__name__,\n                '|'.join([str(m._name_ or m._value_) for m in members]),\n                self._value_,\n                )\n\n    def __str__(self):\n        cls = self.__class__\n        if self._name_ is not None:\n            return '%s.%s' % (cls.__name__, self._name_)\n        members, uncovered = _decompose(cls, self._value_)\n        if len(members) == 1 and members[0]._name_ is None:\n            return '%s.%r' % (cls.__name__, members[0]._value_)\n        else:\n            return '%s.%s' % (\n                    cls.__name__,\n                    '|'.join([str(m._name_ or m._value_) for m in members]),\n                    )\n\n    def __bool__(self):\n        return bool(self._value_)\n\n    def __or__(self, other):\n        if not isinstance(other, self.__class__):\n            return NotImplemented\n        return self.__class__(self._value_ | other._value_)\n\n    def __and__(self, other):\n        if not isinstance(other, self.__class__):\n            return NotImplemented\n        return self.__class__(self._value_ & other._value_)\n\n    def __xor__(self, other):\n        if not isinstance(other, self.__class__):\n            return NotImplemented\n        return self.__class__(self._value_ ^ other._value_)\n\n    def __invert__(self):\n        members, uncovered = _decompose(self.__class__, self._value_)\n        inverted = self.__class__(0)\n        for m in self.__class__:\n            if m not in members and not (m._value_ & self._value_):\n                inverted = inverted | m\n        return self.__class__(inverted)\n\n\nclass IntFlag(int, Flag):\n    \"\"\"\n    Support for integer-based Flags\n    \"\"\"\n\n    @classmethod\n    def _missing_(cls, value):\n        \"\"\"\n        Returns member (possibly creating it) if one can be found for value.\n        \"\"\"\n        if not isinstance(value, int):\n            raise ValueError(\"%r is not a valid %s\" % (value, cls.__name__))\n        new_member = cls._create_pseudo_member_(value)\n        return new_member\n\n    @classmethod\n    def _create_pseudo_member_(cls, value):\n        \"\"\"\n        Create a composite member iff value contains only members.\n        \"\"\"\n        pseudo_member = cls._value2member_map_.get(value, None)\n        if pseudo_member is None:\n            need_to_create = [value]\n            # get unaccounted for bits\n            _, extra_flags = _decompose(cls, value)\n            # timer = 10\n            while extra_flags:\n                # timer -= 1\n                bit = _high_bit(extra_flags)\n                flag_value = 2 ** bit\n                if (flag_value not in cls._value2member_map_ and\n                        flag_value not in need_to_create\n                        ):\n                    need_to_create.append(flag_value)\n                if extra_flags == -flag_value:\n                    extra_flags = 0\n                else:\n                    extra_flags ^= flag_value\n            for value in reversed(need_to_create):\n                # construct singleton pseudo-members\n                pseudo_member = int.__new__(cls, value)\n                pseudo_member._name_ = None\n                pseudo_member._value_ = value\n                # use setdefault in case another thread already created a composite\n                # with this value\n                pseudo_member = cls._value2member_map_.setdefault(value, pseudo_member)\n        return pseudo_member\n\n    def __or__(self, other):\n        if not isinstance(other, (self.__class__, int)):\n            return NotImplemented\n        result = self.__class__(self._value_ | self.__class__(other)._value_)\n        return result\n\n    def __and__(self, other):\n        if not isinstance(other, (self.__class__, int)):\n            return NotImplemented\n        return self.__class__(self._value_ & self.__class__(other)._value_)\n\n    def __xor__(self, other):\n        if not isinstance(other, (self.__class__, int)):\n            return NotImplemented\n        return self.__class__(self._value_ ^ self.__class__(other)._value_)\n\n    __ror__ = __or__\n    __rand__ = __and__\n    __rxor__ = __xor__\n\n    def __invert__(self):\n        result = self.__class__(~self._value_)\n        return result\n\n\ndef _high_bit(value):\n    \"\"\"\n    returns index of highest bit, or -1 if value is zero or negative\n    \"\"\"\n    return value.bit_length() - 1\n\ndef unique(enumeration):\n    \"\"\"\n    Class decorator for enumerations ensuring unique member values.\n    \"\"\"\n    duplicates = []\n    for name, member in enumeration.__members__.items():\n        if name != member.name:\n            duplicates.append((name, member.name))\n    if duplicates:\n        alias_details = ', '.join(\n                [\"%s -> %s\" % (alias, name) for (alias, name) in duplicates])\n        raise ValueError('duplicate values found in %r: %s' %\n                (enumeration, alias_details))\n    return enumeration\n\ndef _decompose(flag, value):\n    \"\"\"\n    Extract all members from the value.\n    \"\"\"\n    # _decompose is only called if the value is not named\n    not_covered = value\n    negative = value < 0\n    # issue29167: wrap accesses to _value2member_map_ in a list to avoid race\n    #             conditions between iterating over it and having more pseudo-\n    #             members added to it\n    if negative:\n        # only check for named flags\n        flags_to_check = [\n                (m, v)\n                for v, m in list(flag._value2member_map_.items())\n                if m.name is not None\n                ]\n    else:\n        # check for named flags and powers-of-two flags\n        flags_to_check = [\n                (m, v)\n                for v, m in list(flag._value2member_map_.items())\n                if m.name is not None or _power_of_two(v)\n                ]\n    members = []\n    for member, member_value in flags_to_check:\n        if member_value and member_value & value == member_value:\n            members.append(member)\n            not_covered &= ~member_value\n    if not members and value in flag._value2member_map_:\n        members.append(flag._value2member_map_[value])\n    members.sort(key=lambda m: m._value_, reverse=True)\n    if len(members) > 1 and members[0].value == value:\n        # we have the breakdown, don't need the value member itself\n        members.pop(0)\n    return members, not_covered\n\ndef _power_of_two(value):\n    if value < 1:\n        return False\n    return value == 2 ** _high_bit(value)\n", 1018], "C:\\Python38\\lib\\re.py": ["#\n# Secret Labs' Regular Expression Engine\n#\n# re-compatible interface for the sre matching engine\n#\n# Copyright (c) 1998-2001 by Secret Labs AB.  All rights reserved.\n#\n# This version of the SRE library can be redistributed under CNRI's\n# Python 1.6 license.  For any other use, please contact Secret Labs\n# AB (info@pythonware.com).\n#\n# Portions of this engine have been developed in cooperation with\n# CNRI.  Hewlett-Packard provided funding for 1.6 integration and\n# other compatibility work.\n#\n\nr\"\"\"Support for regular expressions (RE).\n\nThis module provides regular expression matching operations similar to\nthose found in Perl.  It supports both 8-bit and Unicode strings; both\nthe pattern and the strings being processed can contain null bytes and\ncharacters outside the US ASCII range.\n\nRegular expressions can contain both special and ordinary characters.\nMost ordinary characters, like \"A\", \"a\", or \"0\", are the simplest\nregular expressions; they simply match themselves.  You can\nconcatenate ordinary characters, so last matches the string 'last'.\n\nThe special characters are:\n    \".\"      Matches any character except a newline.\n    \"^\"      Matches the start of the string.\n    \"$\"      Matches the end of the string or just before the newline at\n             the end of the string.\n    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.\n             Greedy means that it will match as many repetitions as possible.\n    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.\n    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.\n    *?,+?,?? Non-greedy versions of the previous three special characters.\n    {m,n}    Matches from m to n repetitions of the preceding RE.\n    {m,n}?   Non-greedy version of the above.\n    \"\\\\\"     Either escapes special characters or signals a special sequence.\n    []       Indicates a set of characters.\n             A \"^\" as the first character indicates a complementing set.\n    \"|\"      A|B, creates an RE that will match either A or B.\n    (...)    Matches the RE inside the parentheses.\n             The contents can be retrieved or matched later in the string.\n    (?aiLmsux) The letters set the corresponding flags defined below.\n    (?:...)  Non-grouping version of regular parentheses.\n    (?P<name>...) The substring matched by the group is accessible by name.\n    (?P=name)     Matches the text matched earlier by the group named name.\n    (?#...)  A comment; ignored.\n    (?=...)  Matches if ... matches next, but doesn't consume the string.\n    (?!...)  Matches if ... doesn't match next.\n    (?<=...) Matches if preceded by ... (must be fixed length).\n    (?<!...) Matches if not preceded by ... (must be fixed length).\n    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,\n                       the (optional) no pattern otherwise.\n\nThe special sequences consist of \"\\\\\" and a character from the list\nbelow.  If the ordinary character is not on the list, then the\nresulting RE will match the second character.\n    \\number  Matches the contents of the group of the same number.\n    \\A       Matches only at the start of the string.\n    \\Z       Matches only at the end of the string.\n    \\b       Matches the empty string, but only at the start or end of a word.\n    \\B       Matches the empty string, but not at the start or end of a word.\n    \\d       Matches any decimal digit; equivalent to the set [0-9] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode digits.\n    \\D       Matches any non-digit character; equivalent to [^\\d].\n    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v] in\n             bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the whole\n             range of Unicode whitespace characters.\n    \\S       Matches any non-whitespace character; equivalent to [^\\s].\n    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]\n             in bytes patterns or string patterns with the ASCII flag.\n             In string patterns without the ASCII flag, it will match the\n             range of Unicode alphanumeric characters (letters plus digits\n             plus underscore).\n             With LOCALE, it will match the set [0-9_] plus characters defined\n             as letters for the current locale.\n    \\W       Matches the complement of \\w.\n    \\\\       Matches a literal backslash.\n\nThis module exports the following functions:\n    match     Match a regular expression pattern to the beginning of a string.\n    fullmatch Match a regular expression pattern to all of a string.\n    search    Search a string for the presence of a pattern.\n    sub       Substitute occurrences of a pattern found in a string.\n    subn      Same as sub, but also return the number of substitutions made.\n    split     Split a string by the occurrences of a pattern.\n    findall   Find all occurrences of a pattern in a string.\n    finditer  Return an iterator yielding a Match object for each match.\n    compile   Compile a pattern into a Pattern object.\n    purge     Clear the regular expression cache.\n    escape    Backslash all non-alphanumerics in a string.\n\nEach function other than purge and escape can take an optional 'flags' argument\nconsisting of one or more of the following module constants, joined by \"|\".\nA, L, and U are mutually exclusive.\n    A  ASCII       For string patterns, make \\w, \\W, \\b, \\B, \\d, \\D\n                   match the corresponding ASCII character categories\n                   (rather than the whole Unicode categories, which is the\n                   default).\n                   For bytes patterns, this flag is the only available\n                   behaviour and needn't be specified.\n    I  IGNORECASE  Perform case-insensitive matching.\n    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.\n    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)\n                   as well as the string.\n                   \"$\" matches the end of lines (before a newline) as well\n                   as the end of the string.\n    S  DOTALL      \".\" matches any character at all, including the newline.\n    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.\n    U  UNICODE     For compatibility only. Ignored for string patterns (it\n                   is the default), and forbidden for bytes patterns.\n\nThis module also defines an exception 'error'.\n\n\"\"\"\n\nimport enum\nimport sre_compile\nimport sre_parse\nimport functools\ntry:\n    import _locale\nexcept ImportError:\n    _locale = None\n\n\n# public symbols\n__all__ = [\n    \"match\", \"fullmatch\", \"search\", \"sub\", \"subn\", \"split\",\n    \"findall\", \"finditer\", \"compile\", \"purge\", \"template\", \"escape\",\n    \"error\", \"Pattern\", \"Match\", \"A\", \"I\", \"L\", \"M\", \"S\", \"X\", \"U\",\n    \"ASCII\", \"IGNORECASE\", \"LOCALE\", \"MULTILINE\", \"DOTALL\", \"VERBOSE\",\n    \"UNICODE\",\n]\n\n__version__ = \"2.2.1\"\n\nclass RegexFlag(enum.IntFlag):\n    ASCII = A = sre_compile.SRE_FLAG_ASCII # assume ascii \"locale\"\n    IGNORECASE = I = sre_compile.SRE_FLAG_IGNORECASE # ignore case\n    LOCALE = L = sre_compile.SRE_FLAG_LOCALE # assume current 8-bit locale\n    UNICODE = U = sre_compile.SRE_FLAG_UNICODE # assume unicode \"locale\"\n    MULTILINE = M = sre_compile.SRE_FLAG_MULTILINE # make anchors look for newline\n    DOTALL = S = sre_compile.SRE_FLAG_DOTALL # make dot match newline\n    VERBOSE = X = sre_compile.SRE_FLAG_VERBOSE # ignore whitespace and comments\n    # sre extensions (experimental, don't rely on these)\n    TEMPLATE = T = sre_compile.SRE_FLAG_TEMPLATE # disable backtracking\n    DEBUG = sre_compile.SRE_FLAG_DEBUG # dump pattern after compilation\n\n    def __repr__(self):\n        if self._name_ is not None:\n            return f're.{self._name_}'\n        value = self._value_\n        members = []\n        negative = value < 0\n        if negative:\n            value = ~value\n        for m in self.__class__:\n            if value & m._value_:\n                value &= ~m._value_\n                members.append(f're.{m._name_}')\n        if value:\n            members.append(hex(value))\n        res = '|'.join(members)\n        if negative:\n            if len(members) > 1:\n                res = f'~({res})'\n            else:\n                res = f'~{res}'\n        return res\n    __str__ = object.__str__\n\nglobals().update(RegexFlag.__members__)\n\n# sre exception\nerror = sre_compile.error\n\n# --------------------------------------------------------------------\n# public interface\n\ndef match(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern at the start of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).match(string)\n\ndef fullmatch(pattern, string, flags=0):\n    \"\"\"Try to apply the pattern to all of the string, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).fullmatch(string)\n\ndef search(pattern, string, flags=0):\n    \"\"\"Scan through string looking for a match to the pattern, returning\n    a Match object, or None if no match was found.\"\"\"\n    return _compile(pattern, flags).search(string)\n\ndef sub(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a string, backslash escapes in it are processed.  If it is\n    a callable, it's passed the Match object and must return\n    a replacement string to be used.\"\"\"\n    return _compile(pattern, flags).sub(repl, string, count)\n\ndef subn(pattern, repl, string, count=0, flags=0):\n    \"\"\"Return a 2-tuple containing (new_string, number).\n    new_string is the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in the source\n    string by the replacement repl.  number is the number of\n    substitutions that were made. repl can be either a string or a\n    callable; if a string, backslash escapes in it are processed.\n    If it is a callable, it's passed the Match object and must\n    return a replacement string to be used.\"\"\"\n    return _compile(pattern, flags).subn(repl, string, count)\n\ndef split(pattern, string, maxsplit=0, flags=0):\n    \"\"\"Split the source string by the occurrences of the pattern,\n    returning a list containing the resulting substrings.  If\n    capturing parentheses are used in pattern, then the text of all\n    groups in the pattern are also returned as part of the resulting\n    list.  If maxsplit is nonzero, at most maxsplit splits occur,\n    and the remainder of the string is returned as the final element\n    of the list.\"\"\"\n    return _compile(pattern, flags).split(string, maxsplit)\n\ndef findall(pattern, string, flags=0):\n    \"\"\"Return a list of all non-overlapping matches in the string.\n\n    If one or more capturing groups are present in the pattern, return\n    a list of groups; this will be a list of tuples if the pattern\n    has more than one group.\n\n    Empty matches are included in the result.\"\"\"\n    return _compile(pattern, flags).findall(string)\n\ndef finditer(pattern, string, flags=0):\n    \"\"\"Return an iterator over all non-overlapping matches in the\n    string.  For each match, the iterator returns a Match object.\n\n    Empty matches are included in the result.\"\"\"\n    return _compile(pattern, flags).finditer(string)\n\ndef compile(pattern, flags=0):\n    \"Compile a regular expression pattern, returning a Pattern object.\"\n    return _compile(pattern, flags)\n\ndef purge():\n    \"Clear the regular expression caches\"\n    _cache.clear()\n    _compile_repl.cache_clear()\n\ndef template(pattern, flags=0):\n    \"Compile a template pattern, returning a Pattern object\"\n    return _compile(pattern, flags|T)\n\n# SPECIAL_CHARS\n# closing ')', '}' and ']'\n# '-' (a range in character set)\n# '&', '~', (extended character set operations)\n# '#' (comment) and WHITESPACE (ignored) in verbose mode\n_special_chars_map = {i: '\\\\' + chr(i) for i in b'()[]{}?*+-|^$\\\\.&~# \\t\\n\\r\\v\\f'}\n\ndef escape(pattern):\n    \"\"\"\n    Escape special characters in a string.\n    \"\"\"\n    if isinstance(pattern, str):\n        return pattern.translate(_special_chars_map)\n    else:\n        pattern = str(pattern, 'latin1')\n        return pattern.translate(_special_chars_map).encode('latin1')\n\nPattern = type(sre_compile.compile('', 0))\nMatch = type(sre_compile.compile('', 0).match(''))\n\n# --------------------------------------------------------------------\n# internals\n\n_cache = {}  # ordered!\n\n_MAXCACHE = 512\ndef _compile(pattern, flags):\n    # internal: compile pattern\n    if isinstance(flags, RegexFlag):\n        flags = flags.value\n    try:\n        return _cache[type(pattern), pattern, flags]\n    except KeyError:\n        pass\n    if isinstance(pattern, Pattern):\n        if flags:\n            raise ValueError(\n                \"cannot process flags argument with a compiled pattern\")\n        return pattern\n    if not sre_compile.isstring(pattern):\n        raise TypeError(\"first argument must be string or compiled pattern\")\n    p = sre_compile.compile(pattern, flags)\n    if not (flags & DEBUG):\n        if len(_cache) >= _MAXCACHE:\n            # Drop the oldest item\n            try:\n                del _cache[next(iter(_cache))]\n            except (StopIteration, RuntimeError, KeyError):\n                pass\n        _cache[type(pattern), pattern, flags] = p\n    return p\n\n@functools.lru_cache(_MAXCACHE)\ndef _compile_repl(repl, pattern):\n    # internal: compile replacement pattern\n    return sre_parse.parse_template(repl, pattern)\n\ndef _expand(pattern, match, template):\n    # internal: Match.expand implementation hook\n    template = sre_parse.parse_template(template, pattern)\n    return sre_parse.expand_template(template, match)\n\ndef _subx(pattern, template):\n    # internal: Pattern.sub/subn implementation helper\n    template = _compile_repl(template, pattern)\n    if not template[0] and len(template[1]) == 1:\n        # literal replacement\n        return template[1][0]\n    def filter(match, template=template):\n        return sre_parse.expand_template(template, match)\n    return filter\n\n# register myself for pickling\n\nimport copyreg\n\ndef _pickle(p):\n    return _compile, (p.pattern, p.flags)\n\ncopyreg.pickle(Pattern, _pickle, _compile)\n\n# --------------------------------------------------------------------\n# experimental stuff (see python-dev discussions for details)\n\nclass Scanner:\n    def __init__(self, lexicon, flags=0):\n        from sre_constants import BRANCH, SUBPATTERN\n        if isinstance(flags, RegexFlag):\n            flags = flags.value\n        self.lexicon = lexicon\n        # combine phrases into a compound pattern\n        p = []\n        s = sre_parse.State()\n        s.flags = flags\n        for phrase, action in lexicon:\n            gid = s.opengroup()\n            p.append(sre_parse.SubPattern(s, [\n                (SUBPATTERN, (gid, 0, 0, sre_parse.parse(phrase, flags))),\n                ]))\n            s.closegroup(gid, p[-1])\n        p = sre_parse.SubPattern(s, [(BRANCH, (None, p))])\n        self.scanner = sre_compile.compile(p)\n    def scan(self, string):\n        result = []\n        append = result.append\n        match = self.scanner.scanner(string).match\n        i = 0\n        while True:\n            m = match()\n            if not m:\n                break\n            j = m.end()\n            if i == j:\n                break\n            action = self.lexicon[m.lastindex-1][1]\n            if callable(action):\n                self.match = m\n                action = action(self, m.group())\n            if action is not None:\n                append(action)\n            i = j\n        return result, string[i:]\n", 384], "C:\\Python38\\lib\\types.py": ["\"\"\"\nDefine names for built-in types that aren't directly accessible as a builtin.\n\"\"\"\nimport sys\n\n# Iterators in Python aren't a matter of type but of protocol.  A large\n# and changing number of builtin types implement *some* flavor of\n# iterator.  Don't check the type!  Use hasattr to check for both\n# \"__iter__\" and \"__next__\" attributes instead.\n\ndef _f(): pass\nFunctionType = type(_f)\nLambdaType = type(lambda: None)         # Same as FunctionType\nCodeType = type(_f.__code__)\nMappingProxyType = type(type.__dict__)\nSimpleNamespace = type(sys.implementation)\n\ndef _cell_factory():\n    a = 1\n    def f():\n        nonlocal a\n    return f.__closure__[0]\nCellType = type(_cell_factory())\n\ndef _g():\n    yield 1\nGeneratorType = type(_g())\n\nasync def _c(): pass\n_c = _c()\nCoroutineType = type(_c)\n_c.close()  # Prevent ResourceWarning\n\nasync def _ag():\n    yield\n_ag = _ag()\nAsyncGeneratorType = type(_ag)\n\nclass _C:\n    def _m(self): pass\nMethodType = type(_C()._m)\n\nBuiltinFunctionType = type(len)\nBuiltinMethodType = type([].append)     # Same as BuiltinFunctionType\n\nWrapperDescriptorType = type(object.__init__)\nMethodWrapperType = type(object().__str__)\nMethodDescriptorType = type(str.join)\nClassMethodDescriptorType = type(dict.__dict__['fromkeys'])\n\nModuleType = type(sys)\n\ntry:\n    raise TypeError\nexcept TypeError:\n    tb = sys.exc_info()[2]\n    TracebackType = type(tb)\n    FrameType = type(tb.tb_frame)\n    tb = None; del tb\n\n# For Jython, the following two types are identical\nGetSetDescriptorType = type(FunctionType.__code__)\nMemberDescriptorType = type(FunctionType.__globals__)\n\ndel sys, _f, _g, _C, _c, _ag  # Not for export\n\n\n# Provide a PEP 3115 compliant mechanism for class creation\ndef new_class(name, bases=(), kwds=None, exec_body=None):\n    \"\"\"Create a class object dynamically using the appropriate metaclass.\"\"\"\n    resolved_bases = resolve_bases(bases)\n    meta, ns, kwds = prepare_class(name, resolved_bases, kwds)\n    if exec_body is not None:\n        exec_body(ns)\n    if resolved_bases is not bases:\n        ns['__orig_bases__'] = bases\n    return meta(name, resolved_bases, ns, **kwds)\n\ndef resolve_bases(bases):\n    \"\"\"Resolve MRO entries dynamically as specified by PEP 560.\"\"\"\n    new_bases = list(bases)\n    updated = False\n    shift = 0\n    for i, base in enumerate(bases):\n        if isinstance(base, type):\n            continue\n        if not hasattr(base, \"__mro_entries__\"):\n            continue\n        new_base = base.__mro_entries__(bases)\n        updated = True\n        if not isinstance(new_base, tuple):\n            raise TypeError(\"__mro_entries__ must return a tuple\")\n        else:\n            new_bases[i+shift:i+shift+1] = new_base\n            shift += len(new_base) - 1\n    if not updated:\n        return bases\n    return tuple(new_bases)\n\ndef prepare_class(name, bases=(), kwds=None):\n    \"\"\"Call the __prepare__ method of the appropriate metaclass.\n\n    Returns (metaclass, namespace, kwds) as a 3-tuple\n\n    *metaclass* is the appropriate metaclass\n    *namespace* is the prepared class namespace\n    *kwds* is an updated copy of the passed in kwds argument with any\n    'metaclass' entry removed. If no kwds argument is passed in, this will\n    be an empty dict.\n    \"\"\"\n    if kwds is None:\n        kwds = {}\n    else:\n        kwds = dict(kwds) # Don't alter the provided mapping\n    if 'metaclass' in kwds:\n        meta = kwds.pop('metaclass')\n    else:\n        if bases:\n            meta = type(bases[0])\n        else:\n            meta = type\n    if isinstance(meta, type):\n        # when meta is a type, we first determine the most-derived metaclass\n        # instead of invoking the initial candidate directly\n        meta = _calculate_meta(meta, bases)\n    if hasattr(meta, '__prepare__'):\n        ns = meta.__prepare__(name, bases, **kwds)\n    else:\n        ns = {}\n    return meta, ns, kwds\n\ndef _calculate_meta(meta, bases):\n    \"\"\"Calculate the most derived metaclass.\"\"\"\n    winner = meta\n    for base in bases:\n        base_meta = type(base)\n        if issubclass(winner, base_meta):\n            continue\n        if issubclass(base_meta, winner):\n            winner = base_meta\n            continue\n        # else:\n        raise TypeError(\"metaclass conflict: \"\n                        \"the metaclass of a derived class \"\n                        \"must be a (non-strict) subclass \"\n                        \"of the metaclasses of all its bases\")\n    return winner\n\nclass DynamicClassAttribute:\n    \"\"\"Route attribute access on a class to __getattr__.\n\n    This is a descriptor, used to define attributes that act differently when\n    accessed through an instance and through a class.  Instance access remains\n    normal, but access to an attribute through a class will be routed to the\n    class's __getattr__ method; this is done by raising AttributeError.\n\n    This allows one to have properties active on an instance, and have virtual\n    attributes on the class with the same name (see Enum for an example).\n\n    \"\"\"\n    def __init__(self, fget=None, fset=None, fdel=None, doc=None):\n        self.fget = fget\n        self.fset = fset\n        self.fdel = fdel\n        # next two lines make DynamicClassAttribute act the same as property\n        self.__doc__ = doc or fget.__doc__\n        self.overwrite_doc = doc is None\n        # support for abstract methods\n        self.__isabstractmethod__ = bool(getattr(fget, '__isabstractmethod__', False))\n\n    def __get__(self, instance, ownerclass=None):\n        if instance is None:\n            if self.__isabstractmethod__:\n                return self\n            raise AttributeError()\n        elif self.fget is None:\n            raise AttributeError(\"unreadable attribute\")\n        return self.fget(instance)\n\n    def __set__(self, instance, value):\n        if self.fset is None:\n            raise AttributeError(\"can't set attribute\")\n        self.fset(instance, value)\n\n    def __delete__(self, instance):\n        if self.fdel is None:\n            raise AttributeError(\"can't delete attribute\")\n        self.fdel(instance)\n\n    def getter(self, fget):\n        fdoc = fget.__doc__ if self.overwrite_doc else None\n        result = type(self)(fget, self.fset, self.fdel, fdoc or self.__doc__)\n        result.overwrite_doc = self.overwrite_doc\n        return result\n\n    def setter(self, fset):\n        result = type(self)(self.fget, fset, self.fdel, self.__doc__)\n        result.overwrite_doc = self.overwrite_doc\n        return result\n\n    def deleter(self, fdel):\n        result = type(self)(self.fget, self.fset, fdel, self.__doc__)\n        result.overwrite_doc = self.overwrite_doc\n        return result\n\n\nclass _GeneratorWrapper:\n    # TODO: Implement this in C.\n    def __init__(self, gen):\n        self.__wrapped = gen\n        self.__isgen = gen.__class__ is GeneratorType\n        self.__name__ = getattr(gen, '__name__', None)\n        self.__qualname__ = getattr(gen, '__qualname__', None)\n    def send(self, val):\n        return self.__wrapped.send(val)\n    def throw(self, tp, *rest):\n        return self.__wrapped.throw(tp, *rest)\n    def close(self):\n        return self.__wrapped.close()\n    @property\n    def gi_code(self):\n        return self.__wrapped.gi_code\n    @property\n    def gi_frame(self):\n        return self.__wrapped.gi_frame\n    @property\n    def gi_running(self):\n        return self.__wrapped.gi_running\n    @property\n    def gi_yieldfrom(self):\n        return self.__wrapped.gi_yieldfrom\n    cr_code = gi_code\n    cr_frame = gi_frame\n    cr_running = gi_running\n    cr_await = gi_yieldfrom\n    def __next__(self):\n        return next(self.__wrapped)\n    def __iter__(self):\n        if self.__isgen:\n            return self.__wrapped\n        return self\n    __await__ = __iter__\n\ndef coroutine(func):\n    \"\"\"Convert regular generator function to a coroutine.\"\"\"\n\n    if not callable(func):\n        raise TypeError('types.coroutine() expects a callable')\n\n    if (func.__class__ is FunctionType and\n        getattr(func, '__code__', None).__class__ is CodeType):\n\n        co_flags = func.__code__.co_flags\n\n        # Check if 'func' is a coroutine function.\n        # (0x180 == CO_COROUTINE | CO_ITERABLE_COROUTINE)\n        if co_flags & 0x180:\n            return func\n\n        # Check if 'func' is a generator function.\n        # (0x20 == CO_GENERATOR)\n        if co_flags & 0x20:\n            # TODO: Implement this in C.\n            co = func.__code__\n            # 0x100 == CO_ITERABLE_COROUTINE\n            func.__code__ = co.replace(co_flags=co.co_flags | 0x100)\n            return func\n\n    # The following code is primarily to support functions that\n    # return generator-like objects (for instance generators\n    # compiled with Cython).\n\n    # Delay functools and _collections_abc import for speeding up types import.\n    import functools\n    import _collections_abc\n    @functools.wraps(func)\n    def wrapped(*args, **kwargs):\n        coro = func(*args, **kwargs)\n        if (coro.__class__ is CoroutineType or\n            coro.__class__ is GeneratorType and coro.gi_code.co_flags & 0x100):\n            # 'coro' is a native coroutine object or an iterable coroutine\n            return coro\n        if (isinstance(coro, _collections_abc.Generator) and\n            not isinstance(coro, _collections_abc.Coroutine)):\n            # 'coro' is either a pure Python generator iterator, or it\n            # implements collections.abc.Generator (and does not implement\n            # collections.abc.Coroutine).\n            return _GeneratorWrapper(coro)\n        # 'coro' is either an instance of collections.abc.Coroutine or\n        # some other object -- pass it through.\n        return coro\n\n    return wrapped\n\n\n__all__ = [n for n in globals() if n[:1] != '_']\n", 296], "C:\\Python38\\lib\\tkinter\\__init__.py": ["\"\"\"Wrapper functions for Tcl/Tk.\n\nTkinter provides classes which allow the display, positioning and\ncontrol of widgets. Toplevel widgets are Tk and Toplevel. Other\nwidgets are Frame, Label, Entry, Text, Canvas, Button, Radiobutton,\nCheckbutton, Scale, Listbox, Scrollbar, OptionMenu, Spinbox\nLabelFrame and PanedWindow.\n\nProperties of the widgets are specified with keyword arguments.\nKeyword arguments have the same name as the corresponding resource\nunder Tk.\n\nWidgets are positioned with one of the geometry managers Place, Pack\nor Grid. These managers can be called with methods place, pack, grid\navailable in every Widget.\n\nActions are bound to events by resources (e.g. keyword argument\ncommand) or with the method bind.\n\nExample (Hello, World):\nimport tkinter\nfrom tkinter.constants import *\ntk = tkinter.Tk()\nframe = tkinter.Frame(tk, relief=RIDGE, borderwidth=2)\nframe.pack(fill=BOTH,expand=1)\nlabel = tkinter.Label(frame, text=\"Hello, World\")\nlabel.pack(fill=X, expand=1)\nbutton = tkinter.Button(frame,text=\"Exit\",command=tk.destroy)\nbutton.pack(side=BOTTOM)\ntk.mainloop()\n\"\"\"\n\nimport enum\nimport sys\n\nimport _tkinter # If this fails your Python may not be configured for Tk\nTclError = _tkinter.TclError\nfrom tkinter.constants import *\nimport re\n\n\nwantobjects = 1\n\nTkVersion = float(_tkinter.TK_VERSION)\nTclVersion = float(_tkinter.TCL_VERSION)\n\nREADABLE = _tkinter.READABLE\nWRITABLE = _tkinter.WRITABLE\nEXCEPTION = _tkinter.EXCEPTION\n\n\n_magic_re = re.compile(r'([\\\\{}])')\n_space_re = re.compile(r'([\\s])', re.ASCII)\n\n\ndef _join(value):\n    \"\"\"Internal function.\"\"\"\n    return ' '.join(map(_stringify, value))\n\n\ndef _stringify(value):\n    \"\"\"Internal function.\"\"\"\n    if isinstance(value, (list, tuple)):\n        if len(value) == 1:\n            value = _stringify(value[0])\n            if _magic_re.search(value):\n                value = '{%s}' % value\n        else:\n            value = '{%s}' % _join(value)\n    else:\n        value = str(value)\n        if not value:\n            value = '{}'\n        elif _magic_re.search(value):\n            # add '\\' before special characters and spaces\n            value = _magic_re.sub(r'\\\\\\1', value)\n            value = value.replace('\\n', r'\\n')\n            value = _space_re.sub(r'\\\\\\1', value)\n            if value[0] == '\"':\n                value = '\\\\' + value\n        elif value[0] == '\"' or _space_re.search(value):\n            value = '{%s}' % value\n    return value\n\n\ndef _flatten(seq):\n    \"\"\"Internal function.\"\"\"\n    res = ()\n    for item in seq:\n        if isinstance(item, (tuple, list)):\n            res = res + _flatten(item)\n        elif item is not None:\n            res = res + (item,)\n    return res\n\n\ntry: _flatten = _tkinter._flatten\nexcept AttributeError: pass\n\n\ndef _cnfmerge(cnfs):\n    \"\"\"Internal function.\"\"\"\n    if isinstance(cnfs, dict):\n        return cnfs\n    elif isinstance(cnfs, (type(None), str)):\n        return cnfs\n    else:\n        cnf = {}\n        for c in _flatten(cnfs):\n            try:\n                cnf.update(c)\n            except (AttributeError, TypeError) as msg:\n                print(\"_cnfmerge: fallback due to:\", msg)\n                for k, v in c.items():\n                    cnf[k] = v\n        return cnf\n\n\ntry: _cnfmerge = _tkinter._cnfmerge\nexcept AttributeError: pass\n\n\ndef _splitdict(tk, v, cut_minus=True, conv=None):\n    \"\"\"Return a properly formatted dict built from Tcl list pairs.\n\n    If cut_minus is True, the supposed '-' prefix will be removed from\n    keys. If conv is specified, it is used to convert values.\n\n    Tcl list is expected to contain an even number of elements.\n    \"\"\"\n    t = tk.splitlist(v)\n    if len(t) % 2:\n        raise RuntimeError('Tcl list representing a dict is expected '\n                           'to contain an even number of elements')\n    it = iter(t)\n    dict = {}\n    for key, value in zip(it, it):\n        key = str(key)\n        if cut_minus and key[0] == '-':\n            key = key[1:]\n        if conv:\n            value = conv(value)\n        dict[key] = value\n    return dict\n\n\nclass EventType(str, enum.Enum):\n    KeyPress = '2'\n    Key = KeyPress\n    KeyRelease = '3'\n    ButtonPress = '4'\n    Button = ButtonPress\n    ButtonRelease = '5'\n    Motion = '6'\n    Enter = '7'\n    Leave = '8'\n    FocusIn = '9'\n    FocusOut = '10'\n    Keymap = '11'           # undocumented\n    Expose = '12'\n    GraphicsExpose = '13'   # undocumented\n    NoExpose = '14'         # undocumented\n    Visibility = '15'\n    Create = '16'\n    Destroy = '17'\n    Unmap = '18'\n    Map = '19'\n    MapRequest = '20'\n    Reparent = '21'\n    Configure = '22'\n    ConfigureRequest = '23'\n    Gravity = '24'\n    ResizeRequest = '25'\n    Circulate = '26'\n    CirculateRequest = '27'\n    Property = '28'\n    SelectionClear = '29'   # undocumented\n    SelectionRequest = '30' # undocumented\n    Selection = '31'        # undocumented\n    Colormap = '32'\n    ClientMessage = '33'    # undocumented\n    Mapping = '34'          # undocumented\n    VirtualEvent = '35'     # undocumented\n    Activate = '36'\n    Deactivate = '37'\n    MouseWheel = '38'\n\n    __str__ = str.__str__\n\n\nclass Event:\n    \"\"\"Container for the properties of an event.\n\n    Instances of this type are generated if one of the following events occurs:\n\n    KeyPress, KeyRelease - for keyboard events\n    ButtonPress, ButtonRelease, Motion, Enter, Leave, MouseWheel - for mouse events\n    Visibility, Unmap, Map, Expose, FocusIn, FocusOut, Circulate,\n    Colormap, Gravity, Reparent, Property, Destroy, Activate,\n    Deactivate - for window events.\n\n    If a callback function for one of these events is registered\n    using bind, bind_all, bind_class, or tag_bind, the callback is\n    called with an Event as first argument. It will have the\n    following attributes (in braces are the event types for which\n    the attribute is valid):\n\n        serial - serial number of event\n    num - mouse button pressed (ButtonPress, ButtonRelease)\n    focus - whether the window has the focus (Enter, Leave)\n    height - height of the exposed window (Configure, Expose)\n    width - width of the exposed window (Configure, Expose)\n    keycode - keycode of the pressed key (KeyPress, KeyRelease)\n    state - state of the event as a number (ButtonPress, ButtonRelease,\n                            Enter, KeyPress, KeyRelease,\n                            Leave, Motion)\n    state - state as a string (Visibility)\n    time - when the event occurred\n    x - x-position of the mouse\n    y - y-position of the mouse\n    x_root - x-position of the mouse on the screen\n             (ButtonPress, ButtonRelease, KeyPress, KeyRelease, Motion)\n    y_root - y-position of the mouse on the screen\n             (ButtonPress, ButtonRelease, KeyPress, KeyRelease, Motion)\n    char - pressed character (KeyPress, KeyRelease)\n    send_event - see X/Windows documentation\n    keysym - keysym of the event as a string (KeyPress, KeyRelease)\n    keysym_num - keysym of the event as a number (KeyPress, KeyRelease)\n    type - type of the event as a number\n    widget - widget in which the event occurred\n    delta - delta of wheel movement (MouseWheel)\n    \"\"\"\n\n    def __repr__(self):\n        attrs = {k: v for k, v in self.__dict__.items() if v != '??'}\n        if not self.char:\n            del attrs['char']\n        elif self.char != '??':\n            attrs['char'] = repr(self.char)\n        if not getattr(self, 'send_event', True):\n            del attrs['send_event']\n        if self.state == 0:\n            del attrs['state']\n        elif isinstance(self.state, int):\n            state = self.state\n            mods = ('Shift', 'Lock', 'Control',\n                    'Mod1', 'Mod2', 'Mod3', 'Mod4', 'Mod5',\n                    'Button1', 'Button2', 'Button3', 'Button4', 'Button5')\n            s = []\n            for i, n in enumerate(mods):\n                if state & (1 << i):\n                    s.append(n)\n            state = state & ~((1<< len(mods)) - 1)\n            if state or not s:\n                s.append(hex(state))\n            attrs['state'] = '|'.join(s)\n        if self.delta == 0:\n            del attrs['delta']\n        # widget usually is known\n        # serial and time are not very interesting\n        # keysym_num duplicates keysym\n        # x_root and y_root mostly duplicate x and y\n        keys = ('send_event',\n                'state', 'keysym', 'keycode', 'char',\n                'num', 'delta', 'focus',\n                'x', 'y', 'width', 'height')\n        return '<%s event%s>' % (\n            getattr(self.type, 'name', self.type),\n            ''.join(' %s=%s' % (k, attrs[k]) for k in keys if k in attrs)\n        )\n\n\n_support_default_root = True\n_default_root = None\n\n\ndef NoDefaultRoot():\n    \"\"\"Inhibit setting of default root window.\n\n    Call this function to inhibit that the first instance of\n    Tk is used for windows without an explicit parent window.\n    \"\"\"\n    global _support_default_root, _default_root\n    _support_default_root = False\n    # Delete, so any use of _default_root will immediately raise an exception.\n    # Rebind before deletion, so repeated calls will not fail.\n    _default_root = None\n    del _default_root\n\n\ndef _get_default_root(what=None):\n    if not _support_default_root:\n        raise RuntimeError(\"No master specified and tkinter is \"\n                           \"configured to not support default root\")\n    if not _default_root:\n        if what:\n            raise RuntimeError(f\"Too early to {what}: no default root window\")\n        root = Tk()\n        assert _default_root is root\n    return _default_root\n\n\ndef _tkerror(err):\n    \"\"\"Internal function.\"\"\"\n    pass\n\n\ndef _exit(code=0):\n    \"\"\"Internal function. Calling it will raise the exception SystemExit.\"\"\"\n    try:\n        code = int(code)\n    except ValueError:\n        pass\n    raise SystemExit(code)\n\n\n_varnum = 0\n\n\nclass Variable:\n    \"\"\"Class to define value holders for e.g. buttons.\n\n    Subclasses StringVar, IntVar, DoubleVar, BooleanVar are specializations\n    that constrain the type of the value returned from get().\"\"\"\n    _default = \"\"\n    _tk = None\n    _tclCommands = None\n\n    def __init__(self, master=None, value=None, name=None):\n        \"\"\"Construct a variable\n\n        MASTER can be given as master widget.\n        VALUE is an optional value (defaults to \"\")\n        NAME is an optional Tcl name (defaults to PY_VARnum).\n\n        If NAME matches an existing variable and VALUE is omitted\n        then the existing value is retained.\n        \"\"\"\n        # check for type of NAME parameter to override weird error message\n        # raised from Modules/_tkinter.c:SetVar like:\n        # TypeError: setvar() takes exactly 3 arguments (2 given)\n        if name is not None and not isinstance(name, str):\n            raise TypeError(\"name must be a string\")\n        global _varnum\n        if not master:\n            master = _get_default_root('create variable')\n        self._root = master._root()\n        self._tk = master.tk\n        if name:\n            self._name = name\n        else:\n            self._name = 'PY_VAR' + repr(_varnum)\n            _varnum += 1\n        if value is not None:\n            self.initialize(value)\n        elif not self._tk.getboolean(self._tk.call(\"info\", \"exists\", self._name)):\n            self.initialize(self._default)\n\n    def __del__(self):\n        \"\"\"Unset the variable in Tcl.\"\"\"\n        if self._tk is None:\n            return\n        if self._tk.getboolean(self._tk.call(\"info\", \"exists\", self._name)):\n            self._tk.globalunsetvar(self._name)\n        if self._tclCommands is not None:\n            for name in self._tclCommands:\n                #print '- Tkinter: deleted command', name\n                self._tk.deletecommand(name)\n            self._tclCommands = None\n\n    def __str__(self):\n        \"\"\"Return the name of the variable in Tcl.\"\"\"\n        return self._name\n\n    def set(self, value):\n        \"\"\"Set the variable to VALUE.\"\"\"\n        return self._tk.globalsetvar(self._name, value)\n\n    initialize = set\n\n    def get(self):\n        \"\"\"Return value of variable.\"\"\"\n        return self._tk.globalgetvar(self._name)\n\n    def _register(self, callback):\n        f = CallWrapper(callback, None, self._root).__call__\n        cbname = repr(id(f))\n        try:\n            callback = callback.__func__\n        except AttributeError:\n            pass\n        try:\n            cbname = cbname + callback.__name__\n        except AttributeError:\n            pass\n        self._tk.createcommand(cbname, f)\n        if self._tclCommands is None:\n            self._tclCommands = []\n        self._tclCommands.append(cbname)\n        return cbname\n\n    def trace_add(self, mode, callback):\n        \"\"\"Define a trace callback for the variable.\n\n        Mode is one of \"read\", \"write\", \"unset\", or a list or tuple of\n        such strings.\n        Callback must be a function which is called when the variable is\n        read, written or unset.\n\n        Return the name of the callback.\n        \"\"\"\n        cbname = self._register(callback)\n        self._tk.call('trace', 'add', 'variable',\n                      self._name, mode, (cbname,))\n        return cbname\n\n    def trace_remove(self, mode, cbname):\n        \"\"\"Delete the trace callback for a variable.\n\n        Mode is one of \"read\", \"write\", \"unset\" or a list or tuple of\n        such strings.  Must be same as were specified in trace_add().\n        cbname is the name of the callback returned from trace_add().\n        \"\"\"\n        self._tk.call('trace', 'remove', 'variable',\n                      self._name, mode, cbname)\n        for m, ca in self.trace_info():\n            if self._tk.splitlist(ca)[0] == cbname:\n                break\n        else:\n            self._tk.deletecommand(cbname)\n            try:\n                self._tclCommands.remove(cbname)\n            except ValueError:\n                pass\n\n    def trace_info(self):\n        \"\"\"Return all trace callback information.\"\"\"\n        splitlist = self._tk.splitlist\n        return [(splitlist(k), v) for k, v in map(splitlist,\n            splitlist(self._tk.call('trace', 'info', 'variable', self._name)))]\n\n    def trace_variable(self, mode, callback):\n        \"\"\"Define a trace callback for the variable.\n\n        MODE is one of \"r\", \"w\", \"u\" for read, write, undefine.\n        CALLBACK must be a function which is called when\n        the variable is read, written or undefined.\n\n        Return the name of the callback.\n\n        This deprecated method wraps a deprecated Tcl method that will\n        likely be removed in the future.  Use trace_add() instead.\n        \"\"\"\n        # TODO: Add deprecation warning\n        cbname = self._register(callback)\n        self._tk.call(\"trace\", \"variable\", self._name, mode, cbname)\n        return cbname\n\n    trace = trace_variable\n\n    def trace_vdelete(self, mode, cbname):\n        \"\"\"Delete the trace callback for a variable.\n\n        MODE is one of \"r\", \"w\", \"u\" for read, write, undefine.\n        CBNAME is the name of the callback returned from trace_variable or trace.\n\n        This deprecated method wraps a deprecated Tcl method that will\n        likely be removed in the future.  Use trace_remove() instead.\n        \"\"\"\n        # TODO: Add deprecation warning\n        self._tk.call(\"trace\", \"vdelete\", self._name, mode, cbname)\n        cbname = self._tk.splitlist(cbname)[0]\n        for m, ca in self.trace_info():\n            if self._tk.splitlist(ca)[0] == cbname:\n                break\n        else:\n            self._tk.deletecommand(cbname)\n            try:\n                self._tclCommands.remove(cbname)\n            except ValueError:\n                pass\n\n    def trace_vinfo(self):\n        \"\"\"Return all trace callback information.\n\n        This deprecated method wraps a deprecated Tcl method that will\n        likely be removed in the future.  Use trace_info() instead.\n        \"\"\"\n        # TODO: Add deprecation warning\n        return [self._tk.splitlist(x) for x in self._tk.splitlist(\n            self._tk.call(\"trace\", \"vinfo\", self._name))]\n\n    def __eq__(self, other):\n        if not isinstance(other, Variable):\n            return NotImplemented\n        return (self._name == other._name\n                and self.__class__.__name__ == other.__class__.__name__\n                and self._tk == other._tk)\n\n\nclass StringVar(Variable):\n    \"\"\"Value holder for strings variables.\"\"\"\n    _default = \"\"\n\n    def __init__(self, master=None, value=None, name=None):\n        \"\"\"Construct a string variable.\n\n        MASTER can be given as master widget.\n        VALUE is an optional value (defaults to \"\")\n        NAME is an optional Tcl name (defaults to PY_VARnum).\n\n        If NAME matches an existing variable and VALUE is omitted\n        then the existing value is retained.\n        \"\"\"\n        Variable.__init__(self, master, value, name)\n\n    def get(self):\n        \"\"\"Return value of variable as string.\"\"\"\n        value = self._tk.globalgetvar(self._name)\n        if isinstance(value, str):\n            return value\n        return str(value)\n\n\nclass IntVar(Variable):\n    \"\"\"Value holder for integer variables.\"\"\"\n    _default = 0\n\n    def __init__(self, master=None, value=None, name=None):\n        \"\"\"Construct an integer variable.\n\n        MASTER can be given as master widget.\n        VALUE is an optional value (defaults to 0)\n        NAME is an optional Tcl name (defaults to PY_VARnum).\n\n        If NAME matches an existing variable and VALUE is omitted\n        then the existing value is retained.\n        \"\"\"\n        Variable.__init__(self, master, value, name)\n\n    def get(self):\n        \"\"\"Return the value of the variable as an integer.\"\"\"\n        value = self._tk.globalgetvar(self._name)\n        try:\n            return self._tk.getint(value)\n        except (TypeError, TclError):\n            return int(self._tk.getdouble(value))\n\n\nclass DoubleVar(Variable):\n    \"\"\"Value holder for float variables.\"\"\"\n    _default = 0.0\n\n    def __init__(self, master=None, value=None, name=None):\n        \"\"\"Construct a float variable.\n\n        MASTER can be given as master widget.\n        VALUE is an optional value (defaults to 0.0)\n        NAME is an optional Tcl name (defaults to PY_VARnum).\n\n        If NAME matches an existing variable and VALUE is omitted\n        then the existing value is retained.\n        \"\"\"\n        Variable.__init__(self, master, value, name)\n\n    def get(self):\n        \"\"\"Return the value of the variable as a float.\"\"\"\n        return self._tk.getdouble(self._tk.globalgetvar(self._name))\n\n\nclass BooleanVar(Variable):\n    \"\"\"Value holder for boolean variables.\"\"\"\n    _default = False\n\n    def __init__(self, master=None, value=None, name=None):\n        \"\"\"Construct a boolean variable.\n\n        MASTER can be given as master widget.\n        VALUE is an optional value (defaults to False)\n        NAME is an optional Tcl name (defaults to PY_VARnum).\n\n        If NAME matches an existing variable and VALUE is omitted\n        then the existing value is retained.\n        \"\"\"\n        Variable.__init__(self, master, value, name)\n\n    def set(self, value):\n        \"\"\"Set the variable to VALUE.\"\"\"\n        return self._tk.globalsetvar(self._name, self._tk.getboolean(value))\n\n    initialize = set\n\n    def get(self):\n        \"\"\"Return the value of the variable as a bool.\"\"\"\n        try:\n            return self._tk.getboolean(self._tk.globalgetvar(self._name))\n        except TclError:\n            raise ValueError(\"invalid literal for getboolean()\")\n\n\ndef mainloop(n=0):\n    \"\"\"Run the main loop of Tcl.\"\"\"\n    _get_default_root('run the main loop').tk.mainloop(n)\n\n\ngetint = int\n\ngetdouble = float\n\n\ndef getboolean(s):\n    \"\"\"Convert Tcl object to True or False.\"\"\"\n    try:\n        return _get_default_root('use getboolean()').tk.getboolean(s)\n    except TclError:\n        raise ValueError(\"invalid literal for getboolean()\")\n\n\n# Methods defined on both toplevel and interior widgets\n\nclass Misc:\n    \"\"\"Internal class.\n\n    Base class which defines methods common for interior widgets.\"\"\"\n\n    # used for generating child widget names\n    _last_child_ids = None\n\n    # XXX font command?\n    _tclCommands = None\n\n    def destroy(self):\n        \"\"\"Internal function.\n\n        Delete all Tcl commands created for\n        this widget in the Tcl interpreter.\"\"\"\n        if self._tclCommands is not None:\n            for name in self._tclCommands:\n                #print '- Tkinter: deleted command', name\n                self.tk.deletecommand(name)\n            self._tclCommands = None\n\n    def deletecommand(self, name):\n        \"\"\"Internal function.\n\n        Delete the Tcl command provided in NAME.\"\"\"\n        #print '- Tkinter: deleted command', name\n        self.tk.deletecommand(name)\n        try:\n            self._tclCommands.remove(name)\n        except ValueError:\n            pass\n\n    def tk_strictMotif(self, boolean=None):\n        \"\"\"Set Tcl internal variable, whether the look and feel\n        should adhere to Motif.\n\n        A parameter of 1 means adhere to Motif (e.g. no color\n        change if mouse passes over slider).\n        Returns the set value.\"\"\"\n        return self.tk.getboolean(self.tk.call(\n            'set', 'tk_strictMotif', boolean))\n\n    def tk_bisque(self):\n        \"\"\"Change the color scheme to light brown as used in Tk 3.6 and before.\"\"\"\n        self.tk.call('tk_bisque')\n\n    def tk_setPalette(self, *args, **kw):\n        \"\"\"Set a new color scheme for all widget elements.\n\n        A single color as argument will cause that all colors of Tk\n        widget elements are derived from this.\n        Alternatively several keyword parameters and its associated\n        colors can be given. The following keywords are valid:\n        activeBackground, foreground, selectColor,\n        activeForeground, highlightBackground, selectBackground,\n        background, highlightColor, selectForeground,\n        disabledForeground, insertBackground, troughColor.\"\"\"\n        self.tk.call(('tk_setPalette',)\n              + _flatten(args) + _flatten(list(kw.items())))\n\n    def wait_variable(self, name='PY_VAR'):\n        \"\"\"Wait until the variable is modified.\n\n        A parameter of type IntVar, StringVar, DoubleVar or\n        BooleanVar must be given.\"\"\"\n        self.tk.call('tkwait', 'variable', name)\n    waitvar = wait_variable # XXX b/w compat\n\n    def wait_window(self, window=None):\n        \"\"\"Wait until a WIDGET is destroyed.\n\n        If no parameter is given self is used.\"\"\"\n        if window is None:\n            window = self\n        self.tk.call('tkwait', 'window', window._w)\n\n    def wait_visibility(self, window=None):\n        \"\"\"Wait until the visibility of a WIDGET changes\n        (e.g. it appears).\n\n        If no parameter is given self is used.\"\"\"\n        if window is None:\n            window = self\n        self.tk.call('tkwait', 'visibility', window._w)\n\n    def setvar(self, name='PY_VAR', value='1'):\n        \"\"\"Set Tcl variable NAME to VALUE.\"\"\"\n        self.tk.setvar(name, value)\n\n    def getvar(self, name='PY_VAR'):\n        \"\"\"Return value of Tcl variable NAME.\"\"\"\n        return self.tk.getvar(name)\n\n    def getint(self, s):\n        try:\n            return self.tk.getint(s)\n        except TclError as exc:\n            raise ValueError(str(exc))\n\n    def getdouble(self, s):\n        try:\n            return self.tk.getdouble(s)\n        except TclError as exc:\n            raise ValueError(str(exc))\n\n    def getboolean(self, s):\n        \"\"\"Return a boolean value for Tcl boolean values true and false given as parameter.\"\"\"\n        try:\n            return self.tk.getboolean(s)\n        except TclError:\n            raise ValueError(\"invalid literal for getboolean()\")\n\n    def focus_set(self):\n        \"\"\"Direct input focus to this widget.\n\n        If the application currently does not have the focus\n        this widget will get the focus if the application gets\n        the focus through the window manager.\"\"\"\n        self.tk.call('focus', self._w)\n    focus = focus_set # XXX b/w compat?\n\n    def focus_force(self):\n        \"\"\"Direct input focus to this widget even if the\n        application does not have the focus. Use with\n        caution!\"\"\"\n        self.tk.call('focus', '-force', self._w)\n\n    def focus_get(self):\n        \"\"\"Return the widget which has currently the focus in the\n        application.\n\n        Use focus_displayof to allow working with several\n        displays. Return None if application does not have\n        the focus.\"\"\"\n        name = self.tk.call('focus')\n        if name == 'none' or not name: return None\n        return self._nametowidget(name)\n\n    def focus_displayof(self):\n        \"\"\"Return the widget which has currently the focus on the\n        display where this widget is located.\n\n        Return None if the application does not have the focus.\"\"\"\n        name = self.tk.call('focus', '-displayof', self._w)\n        if name == 'none' or not name: return None\n        return self._nametowidget(name)\n\n    def focus_lastfor(self):\n        \"\"\"Return the widget which would have the focus if top level\n        for this widget gets the focus from the window manager.\"\"\"\n        name = self.tk.call('focus', '-lastfor', self._w)\n        if name == 'none' or not name: return None\n        return self._nametowidget(name)\n\n    def tk_focusFollowsMouse(self):\n        \"\"\"The widget under mouse will get automatically focus. Can not\n        be disabled easily.\"\"\"\n        self.tk.call('tk_focusFollowsMouse')\n\n    def tk_focusNext(self):\n        \"\"\"Return the next widget in the focus order which follows\n        widget which has currently the focus.\n\n        The focus order first goes to the next child, then to\n        the children of the child recursively and then to the\n        next sibling which is higher in the stacking order.  A\n        widget is omitted if it has the takefocus resource set\n        to 0.\"\"\"\n        name = self.tk.call('tk_focusNext', self._w)\n        if not name: return None\n        return self._nametowidget(name)\n\n    def tk_focusPrev(self):\n        \"\"\"Return previous widget in the focus order. See tk_focusNext for details.\"\"\"\n        name = self.tk.call('tk_focusPrev', self._w)\n        if not name: return None\n        return self._nametowidget(name)\n\n    def after(self, ms, func=None, *args):\n        \"\"\"Call function once after given time.\n\n        MS specifies the time in milliseconds. FUNC gives the\n        function which shall be called. Additional parameters\n        are given as parameters to the function call.  Return\n        identifier to cancel scheduling with after_cancel.\"\"\"\n        if not func:\n            # I'd rather use time.sleep(ms*0.001)\n            self.tk.call('after', ms)\n            return None\n        else:\n            def callit():\n                try:\n                    func(*args)\n                finally:\n                    try:\n                        self.deletecommand(name)\n                    except TclError:\n                        pass\n            callit.__name__ = func.__name__\n            name = self._register(callit)\n            return self.tk.call('after', ms, name)\n\n    def after_idle(self, func, *args):\n        \"\"\"Call FUNC once if the Tcl main loop has no event to\n        process.\n\n        Return an identifier to cancel the scheduling with\n        after_cancel.\"\"\"\n        return self.after('idle', func, *args)\n\n    def after_cancel(self, id):\n        \"\"\"Cancel scheduling of function identified with ID.\n\n        Identifier returned by after or after_idle must be\n        given as first parameter.\n        \"\"\"\n        if not id:\n            raise ValueError('id must be a valid identifier returned from '\n                             'after or after_idle')\n        try:\n            data = self.tk.call('after', 'info', id)\n            script = self.tk.splitlist(data)[0]\n            self.deletecommand(script)\n        except TclError:\n            pass\n        self.tk.call('after', 'cancel', id)\n\n    def bell(self, displayof=0):\n        \"\"\"Ring a display's bell.\"\"\"\n        self.tk.call(('bell',) + self._displayof(displayof))\n\n    # Clipboard handling:\n    def clipboard_get(self, **kw):\n        \"\"\"Retrieve data from the clipboard on window's display.\n\n        The window keyword defaults to the root window of the Tkinter\n        application.\n\n        The type keyword specifies the form in which the data is\n        to be returned and should be an atom name such as STRING\n        or FILE_NAME.  Type defaults to STRING, except on X11, where the default\n        is to try UTF8_STRING and fall back to STRING.\n\n        This command is equivalent to:\n\n        selection_get(CLIPBOARD)\n        \"\"\"\n        if 'type' not in kw and self._windowingsystem == 'x11':\n            try:\n                kw['type'] = 'UTF8_STRING'\n                return self.tk.call(('clipboard', 'get') + self._options(kw))\n            except TclError:\n                del kw['type']\n        return self.tk.call(('clipboard', 'get') + self._options(kw))\n\n    def clipboard_clear(self, **kw):\n        \"\"\"Clear the data in the Tk clipboard.\n\n        A widget specified for the optional displayof keyword\n        argument specifies the target display.\"\"\"\n        if 'displayof' not in kw: kw['displayof'] = self._w\n        self.tk.call(('clipboard', 'clear') + self._options(kw))\n\n    def clipboard_append(self, string, **kw):\n        \"\"\"Append STRING to the Tk clipboard.\n\n        A widget specified at the optional displayof keyword\n        argument specifies the target display. The clipboard\n        can be retrieved with selection_get.\"\"\"\n        if 'displayof' not in kw: kw['displayof'] = self._w\n        self.tk.call(('clipboard', 'append') + self._options(kw)\n              + ('--', string))\n    # XXX grab current w/o window argument\n\n    def grab_current(self):\n        \"\"\"Return widget which has currently the grab in this application\n        or None.\"\"\"\n        name = self.tk.call('grab', 'current', self._w)\n        if not name: return None\n        return self._nametowidget(name)\n\n    def grab_release(self):\n        \"\"\"Release grab for this widget if currently set.\"\"\"\n        self.tk.call('grab', 'release', self._w)\n\n    def grab_set(self):\n        \"\"\"Set grab for this widget.\n\n        A grab directs all events to this and descendant\n        widgets in the application.\"\"\"\n        self.tk.call('grab', 'set', self._w)\n\n    def grab_set_global(self):\n        \"\"\"Set global grab for this widget.\n\n        A global grab directs all events to this and\n        descendant widgets on the display. Use with caution -\n        other applications do not get events anymore.\"\"\"\n        self.tk.call('grab', 'set', '-global', self._w)\n\n    def grab_status(self):\n        \"\"\"Return None, \"local\" or \"global\" if this widget has\n        no, a local or a global grab.\"\"\"\n        status = self.tk.call('grab', 'status', self._w)\n        if status == 'none': status = None\n        return status\n\n    def option_add(self, pattern, value, priority = None):\n        \"\"\"Set a VALUE (second parameter) for an option\n        PATTERN (first parameter).\n\n        An optional third parameter gives the numeric priority\n        (defaults to 80).\"\"\"\n        self.tk.call('option', 'add', pattern, value, priority)\n\n    def option_clear(self):\n        \"\"\"Clear the option database.\n\n        It will be reloaded if option_add is called.\"\"\"\n        self.tk.call('option', 'clear')\n\n    def option_get(self, name, className):\n        \"\"\"Return the value for an option NAME for this widget\n        with CLASSNAME.\n\n        Values with higher priority override lower values.\"\"\"\n        return self.tk.call('option', 'get', self._w, name, className)\n\n    def option_readfile(self, fileName, priority = None):\n        \"\"\"Read file FILENAME into the option database.\n\n        An optional second parameter gives the numeric\n        priority.\"\"\"\n        self.tk.call('option', 'readfile', fileName, priority)\n\n    def selection_clear(self, **kw):\n        \"\"\"Clear the current X selection.\"\"\"\n        if 'displayof' not in kw: kw['displayof'] = self._w\n        self.tk.call(('selection', 'clear') + self._options(kw))\n\n    def selection_get(self, **kw):\n        \"\"\"Return the contents of the current X selection.\n\n        A keyword parameter selection specifies the name of\n        the selection and defaults to PRIMARY.  A keyword\n        parameter displayof specifies a widget on the display\n        to use. A keyword parameter type specifies the form of data to be\n        fetched, defaulting to STRING except on X11, where UTF8_STRING is tried\n        before STRING.\"\"\"\n        if 'displayof' not in kw: kw['displayof'] = self._w\n        if 'type' not in kw and self._windowingsystem == 'x11':\n            try:\n                kw['type'] = 'UTF8_STRING'\n                return self.tk.call(('selection', 'get') + self._options(kw))\n            except TclError:\n                del kw['type']\n        return self.tk.call(('selection', 'get') + self._options(kw))\n\n    def selection_handle(self, command, **kw):\n        \"\"\"Specify a function COMMAND to call if the X\n        selection owned by this widget is queried by another\n        application.\n\n        This function must return the contents of the\n        selection. The function will be called with the\n        arguments OFFSET and LENGTH which allows the chunking\n        of very long selections. The following keyword\n        parameters can be provided:\n        selection - name of the selection (default PRIMARY),\n        type - type of the selection (e.g. STRING, FILE_NAME).\"\"\"\n        name = self._register(command)\n        self.tk.call(('selection', 'handle') + self._options(kw)\n              + (self._w, name))\n\n    def selection_own(self, **kw):\n        \"\"\"Become owner of X selection.\n\n        A keyword parameter selection specifies the name of\n        the selection (default PRIMARY).\"\"\"\n        self.tk.call(('selection', 'own') +\n                 self._options(kw) + (self._w,))\n\n    def selection_own_get(self, **kw):\n        \"\"\"Return owner of X selection.\n\n        The following keyword parameter can\n        be provided:\n        selection - name of the selection (default PRIMARY),\n        type - type of the selection (e.g. STRING, FILE_NAME).\"\"\"\n        if 'displayof' not in kw: kw['displayof'] = self._w\n        name = self.tk.call(('selection', 'own') + self._options(kw))\n        if not name: return None\n        return self._nametowidget(name)\n\n    def send(self, interp, cmd, *args):\n        \"\"\"Send Tcl command CMD to different interpreter INTERP to be executed.\"\"\"\n        return self.tk.call(('send', interp, cmd) + args)\n\n    def lower(self, belowThis=None):\n        \"\"\"Lower this widget in the stacking order.\"\"\"\n        self.tk.call('lower', self._w, belowThis)\n\n    def tkraise(self, aboveThis=None):\n        \"\"\"Raise this widget in the stacking order.\"\"\"\n        self.tk.call('raise', self._w, aboveThis)\n\n    lift = tkraise\n\n    def winfo_atom(self, name, displayof=0):\n        \"\"\"Return integer which represents atom NAME.\"\"\"\n        args = ('winfo', 'atom') + self._displayof(displayof) + (name,)\n        return self.tk.getint(self.tk.call(args))\n\n    def winfo_atomname(self, id, displayof=0):\n        \"\"\"Return name of atom with identifier ID.\"\"\"\n        args = ('winfo', 'atomname') \\\n               + self._displayof(displayof) + (id,)\n        return self.tk.call(args)\n\n    def winfo_cells(self):\n        \"\"\"Return number of cells in the colormap for this widget.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'cells', self._w))\n\n    def winfo_children(self):\n        \"\"\"Return a list of all widgets which are children of this widget.\"\"\"\n        result = []\n        for child in self.tk.splitlist(\n            self.tk.call('winfo', 'children', self._w)):\n            try:\n                # Tcl sometimes returns extra windows, e.g. for\n                # menus; those need to be skipped\n                result.append(self._nametowidget(child))\n            except KeyError:\n                pass\n        return result\n\n    def winfo_class(self):\n        \"\"\"Return window class name of this widget.\"\"\"\n        return self.tk.call('winfo', 'class', self._w)\n\n    def winfo_colormapfull(self):\n        \"\"\"Return True if at the last color request the colormap was full.\"\"\"\n        return self.tk.getboolean(\n            self.tk.call('winfo', 'colormapfull', self._w))\n\n    def winfo_containing(self, rootX, rootY, displayof=0):\n        \"\"\"Return the widget which is at the root coordinates ROOTX, ROOTY.\"\"\"\n        args = ('winfo', 'containing') \\\n               + self._displayof(displayof) + (rootX, rootY)\n        name = self.tk.call(args)\n        if not name: return None\n        return self._nametowidget(name)\n\n    def winfo_depth(self):\n        \"\"\"Return the number of bits per pixel.\"\"\"\n        return self.tk.getint(self.tk.call('winfo', 'depth', self._w))\n\n    def winfo_exists(self):\n        \"\"\"Return true if this widget exists.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'exists', self._w))\n\n    def winfo_fpixels(self, number):\n        \"\"\"Return the number of pixels for the given distance NUMBER\n        (e.g. \"3c\") as float.\"\"\"\n        return self.tk.getdouble(self.tk.call(\n            'winfo', 'fpixels', self._w, number))\n\n    def winfo_geometry(self):\n        \"\"\"Return geometry string for this widget in the form \"widthxheight+X+Y\".\"\"\"\n        return self.tk.call('winfo', 'geometry', self._w)\n\n    def winfo_height(self):\n        \"\"\"Return height of this widget.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'height', self._w))\n\n    def winfo_id(self):\n        \"\"\"Return identifier ID for this widget.\"\"\"\n        return int(self.tk.call('winfo', 'id', self._w), 0)\n\n    def winfo_interps(self, displayof=0):\n        \"\"\"Return the name of all Tcl interpreters for this display.\"\"\"\n        args = ('winfo', 'interps') + self._displayof(displayof)\n        return self.tk.splitlist(self.tk.call(args))\n\n    def winfo_ismapped(self):\n        \"\"\"Return true if this widget is mapped.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'ismapped', self._w))\n\n    def winfo_manager(self):\n        \"\"\"Return the window manager name for this widget.\"\"\"\n        return self.tk.call('winfo', 'manager', self._w)\n\n    def winfo_name(self):\n        \"\"\"Return the name of this widget.\"\"\"\n        return self.tk.call('winfo', 'name', self._w)\n\n    def winfo_parent(self):\n        \"\"\"Return the name of the parent of this widget.\"\"\"\n        return self.tk.call('winfo', 'parent', self._w)\n\n    def winfo_pathname(self, id, displayof=0):\n        \"\"\"Return the pathname of the widget given by ID.\"\"\"\n        args = ('winfo', 'pathname') \\\n               + self._displayof(displayof) + (id,)\n        return self.tk.call(args)\n\n    def winfo_pixels(self, number):\n        \"\"\"Rounded integer value of winfo_fpixels.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'pixels', self._w, number))\n\n    def winfo_pointerx(self):\n        \"\"\"Return the x coordinate of the pointer on the root window.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'pointerx', self._w))\n\n    def winfo_pointerxy(self):\n        \"\"\"Return a tuple of x and y coordinates of the pointer on the root window.\"\"\"\n        return self._getints(\n            self.tk.call('winfo', 'pointerxy', self._w))\n\n    def winfo_pointery(self):\n        \"\"\"Return the y coordinate of the pointer on the root window.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'pointery', self._w))\n\n    def winfo_reqheight(self):\n        \"\"\"Return requested height of this widget.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'reqheight', self._w))\n\n    def winfo_reqwidth(self):\n        \"\"\"Return requested width of this widget.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'reqwidth', self._w))\n\n    def winfo_rgb(self, color):\n        \"\"\"Return a tuple of integer RGB values in range(65536) for color in this widget.\"\"\"\n        return self._getints(\n            self.tk.call('winfo', 'rgb', self._w, color))\n\n    def winfo_rootx(self):\n        \"\"\"Return x coordinate of upper left corner of this widget on the\n        root window.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'rootx', self._w))\n\n    def winfo_rooty(self):\n        \"\"\"Return y coordinate of upper left corner of this widget on the\n        root window.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'rooty', self._w))\n\n    def winfo_screen(self):\n        \"\"\"Return the screen name of this widget.\"\"\"\n        return self.tk.call('winfo', 'screen', self._w)\n\n    def winfo_screencells(self):\n        \"\"\"Return the number of the cells in the colormap of the screen\n        of this widget.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'screencells', self._w))\n\n    def winfo_screendepth(self):\n        \"\"\"Return the number of bits per pixel of the root window of the\n        screen of this widget.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'screendepth', self._w))\n\n    def winfo_screenheight(self):\n        \"\"\"Return the number of pixels of the height of the screen of this widget\n        in pixel.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'screenheight', self._w))\n\n    def winfo_screenmmheight(self):\n        \"\"\"Return the number of pixels of the height of the screen of\n        this widget in mm.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'screenmmheight', self._w))\n\n    def winfo_screenmmwidth(self):\n        \"\"\"Return the number of pixels of the width of the screen of\n        this widget in mm.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'screenmmwidth', self._w))\n\n    def winfo_screenvisual(self):\n        \"\"\"Return one of the strings directcolor, grayscale, pseudocolor,\n        staticcolor, staticgray, or truecolor for the default\n        colormodel of this screen.\"\"\"\n        return self.tk.call('winfo', 'screenvisual', self._w)\n\n    def winfo_screenwidth(self):\n        \"\"\"Return the number of pixels of the width of the screen of\n        this widget in pixel.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'screenwidth', self._w))\n\n    def winfo_server(self):\n        \"\"\"Return information of the X-Server of the screen of this widget in\n        the form \"XmajorRminor vendor vendorVersion\".\"\"\"\n        return self.tk.call('winfo', 'server', self._w)\n\n    def winfo_toplevel(self):\n        \"\"\"Return the toplevel widget of this widget.\"\"\"\n        return self._nametowidget(self.tk.call(\n            'winfo', 'toplevel', self._w))\n\n    def winfo_viewable(self):\n        \"\"\"Return true if the widget and all its higher ancestors are mapped.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'viewable', self._w))\n\n    def winfo_visual(self):\n        \"\"\"Return one of the strings directcolor, grayscale, pseudocolor,\n        staticcolor, staticgray, or truecolor for the\n        colormodel of this widget.\"\"\"\n        return self.tk.call('winfo', 'visual', self._w)\n\n    def winfo_visualid(self):\n        \"\"\"Return the X identifier for the visual for this widget.\"\"\"\n        return self.tk.call('winfo', 'visualid', self._w)\n\n    def winfo_visualsavailable(self, includeids=False):\n        \"\"\"Return a list of all visuals available for the screen\n        of this widget.\n\n        Each item in the list consists of a visual name (see winfo_visual), a\n        depth and if includeids is true is given also the X identifier.\"\"\"\n        data = self.tk.call('winfo', 'visualsavailable', self._w,\n                            'includeids' if includeids else None)\n        data = [self.tk.splitlist(x) for x in self.tk.splitlist(data)]\n        return [self.__winfo_parseitem(x) for x in data]\n\n    def __winfo_parseitem(self, t):\n        \"\"\"Internal function.\"\"\"\n        return t[:1] + tuple(map(self.__winfo_getint, t[1:]))\n\n    def __winfo_getint(self, x):\n        \"\"\"Internal function.\"\"\"\n        return int(x, 0)\n\n    def winfo_vrootheight(self):\n        \"\"\"Return the height of the virtual root window associated with this\n        widget in pixels. If there is no virtual root window return the\n        height of the screen.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'vrootheight', self._w))\n\n    def winfo_vrootwidth(self):\n        \"\"\"Return the width of the virtual root window associated with this\n        widget in pixel. If there is no virtual root window return the\n        width of the screen.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'vrootwidth', self._w))\n\n    def winfo_vrootx(self):\n        \"\"\"Return the x offset of the virtual root relative to the root\n        window of the screen of this widget.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'vrootx', self._w))\n\n    def winfo_vrooty(self):\n        \"\"\"Return the y offset of the virtual root relative to the root\n        window of the screen of this widget.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'vrooty', self._w))\n\n    def winfo_width(self):\n        \"\"\"Return the width of this widget.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'width', self._w))\n\n    def winfo_x(self):\n        \"\"\"Return the x coordinate of the upper left corner of this widget\n        in the parent.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'x', self._w))\n\n    def winfo_y(self):\n        \"\"\"Return the y coordinate of the upper left corner of this widget\n        in the parent.\"\"\"\n        return self.tk.getint(\n            self.tk.call('winfo', 'y', self._w))\n\n    def update(self):\n        \"\"\"Enter event loop until all pending events have been processed by Tcl.\"\"\"\n        self.tk.call('update')\n\n    def update_idletasks(self):\n        \"\"\"Enter event loop until all idle callbacks have been called. This\n        will update the display of windows but not process events caused by\n        the user.\"\"\"\n        self.tk.call('update', 'idletasks')\n\n    def bindtags(self, tagList=None):\n        \"\"\"Set or get the list of bindtags for this widget.\n\n        With no argument return the list of all bindtags associated with\n        this widget. With a list of strings as argument the bindtags are\n        set to this list. The bindtags determine in which order events are\n        processed (see bind).\"\"\"\n        if tagList is None:\n            return self.tk.splitlist(\n                self.tk.call('bindtags', self._w))\n        else:\n            self.tk.call('bindtags', self._w, tagList)\n\n    def _bind(self, what, sequence, func, add, needcleanup=1):\n        \"\"\"Internal function.\"\"\"\n        if isinstance(func, str):\n            self.tk.call(what + (sequence, func))\n        elif func:\n            funcid = self._register(func, self._substitute,\n                        needcleanup)\n            cmd = ('%sif {\"[%s %s]\" == \"break\"} break\\n'\n                   %\n                   (add and '+' or '',\n                funcid, self._subst_format_str))\n            self.tk.call(what + (sequence, cmd))\n            return funcid\n        elif sequence:\n            return self.tk.call(what + (sequence,))\n        else:\n            return self.tk.splitlist(self.tk.call(what))\n\n    def bind(self, sequence=None, func=None, add=None):\n        \"\"\"Bind to this widget at event SEQUENCE a call to function FUNC.\n\n        SEQUENCE is a string of concatenated event\n        patterns. An event pattern is of the form\n        <MODIFIER-MODIFIER-TYPE-DETAIL> where MODIFIER is one\n        of Control, Mod2, M2, Shift, Mod3, M3, Lock, Mod4, M4,\n        Button1, B1, Mod5, M5 Button2, B2, Meta, M, Button3,\n        B3, Alt, Button4, B4, Double, Button5, B5 Triple,\n        Mod1, M1. TYPE is one of Activate, Enter, Map,\n        ButtonPress, Button, Expose, Motion, ButtonRelease\n        FocusIn, MouseWheel, Circulate, FocusOut, Property,\n        Colormap, Gravity Reparent, Configure, KeyPress, Key,\n        Unmap, Deactivate, KeyRelease Visibility, Destroy,\n        Leave and DETAIL is the button number for ButtonPress,\n        ButtonRelease and DETAIL is the Keysym for KeyPress and\n        KeyRelease. Examples are\n        <Control-Button-1> for pressing Control and mouse button 1 or\n        <Alt-A> for pressing A and the Alt key (KeyPress can be omitted).\n        An event pattern can also be a virtual event of the form\n        <<AString>> where AString can be arbitrary. This\n        event can be generated by event_generate.\n        If events are concatenated they must appear shortly\n        after each other.\n\n        FUNC will be called if the event sequence occurs with an\n        instance of Event as argument. If the return value of FUNC is\n        \"break\" no further bound function is invoked.\n\n        An additional boolean parameter ADD specifies whether FUNC will\n        be called additionally to the other bound function or whether\n        it will replace the previous function.\n\n        Bind will return an identifier to allow deletion of the bound function with\n        unbind without memory leak.\n\n        If FUNC or SEQUENCE is omitted the bound function or list\n        of bound events are returned.\"\"\"\n\n        return self._bind(('bind', self._w), sequence, func, add)\n\n    def unbind(self, sequence, funcid=None):\n        \"\"\"Unbind for this widget for event SEQUENCE  the\n        function identified with FUNCID.\"\"\"\n        self.tk.call('bind', self._w, sequence, '')\n        if funcid:\n            self.deletecommand(funcid)\n\n    def bind_all(self, sequence=None, func=None, add=None):\n        \"\"\"Bind to all widgets at an event SEQUENCE a call to function FUNC.\n        An additional boolean parameter ADD specifies whether FUNC will\n        be called additionally to the other bound function or whether\n        it will replace the previous function. See bind for the return value.\"\"\"\n        return self._bind(('bind', 'all'), sequence, func, add, 0)\n\n    def unbind_all(self, sequence):\n        \"\"\"Unbind for all widgets for event SEQUENCE all functions.\"\"\"\n        self.tk.call('bind', 'all' , sequence, '')\n\n    def bind_class(self, className, sequence=None, func=None, add=None):\n        \"\"\"Bind to widgets with bindtag CLASSNAME at event\n        SEQUENCE a call of function FUNC. An additional\n        boolean parameter ADD specifies whether FUNC will be\n        called additionally to the other bound function or\n        whether it will replace the previous function. See bind for\n        the return value.\"\"\"\n\n        return self._bind(('bind', className), sequence, func, add, 0)\n\n    def unbind_class(self, className, sequence):\n        \"\"\"Unbind for all widgets with bindtag CLASSNAME for event SEQUENCE\n        all functions.\"\"\"\n        self.tk.call('bind', className , sequence, '')\n\n    def mainloop(self, n=0):\n        \"\"\"Call the mainloop of Tk.\"\"\"\n        self.tk.mainloop(n)\n\n    def quit(self):\n        \"\"\"Quit the Tcl interpreter. All widgets will be destroyed.\"\"\"\n        self.tk.quit()\n\n    def _getints(self, string):\n        \"\"\"Internal function.\"\"\"\n        if string:\n            return tuple(map(self.tk.getint, self.tk.splitlist(string)))\n\n    def _getdoubles(self, string):\n        \"\"\"Internal function.\"\"\"\n        if string:\n            return tuple(map(self.tk.getdouble, self.tk.splitlist(string)))\n\n    def _getboolean(self, string):\n        \"\"\"Internal function.\"\"\"\n        if string:\n            return self.tk.getboolean(string)\n\n    def _displayof(self, displayof):\n        \"\"\"Internal function.\"\"\"\n        if displayof:\n            return ('-displayof', displayof)\n        if displayof is None:\n            return ('-displayof', self._w)\n        return ()\n\n    @property\n    def _windowingsystem(self):\n        \"\"\"Internal function.\"\"\"\n        try:\n            return self._root()._windowingsystem_cached\n        except AttributeError:\n            ws = self._root()._windowingsystem_cached = \\\n                        self.tk.call('tk', 'windowingsystem')\n            return ws\n\n    def _options(self, cnf, kw = None):\n        \"\"\"Internal function.\"\"\"\n        if kw:\n            cnf = _cnfmerge((cnf, kw))\n        else:\n            cnf = _cnfmerge(cnf)\n        res = ()\n        for k, v in cnf.items():\n            if v is not None:\n                if k[-1] == '_': k = k[:-1]\n                if callable(v):\n                    v = self._register(v)\n                elif isinstance(v, (tuple, list)):\n                    nv = []\n                    for item in v:\n                        if isinstance(item, int):\n                            nv.append(str(item))\n                        elif isinstance(item, str):\n                            nv.append(_stringify(item))\n                        else:\n                            break\n                    else:\n                        v = ' '.join(nv)\n                res = res + ('-'+k, v)\n        return res\n\n    def nametowidget(self, name):\n        \"\"\"Return the Tkinter instance of a widget identified by\n        its Tcl name NAME.\"\"\"\n        name = str(name).split('.')\n        w = self\n\n        if not name[0]:\n            w = w._root()\n            name = name[1:]\n\n        for n in name:\n            if not n:\n                break\n            w = w.children[n]\n\n        return w\n\n    _nametowidget = nametowidget\n\n    def _register(self, func, subst=None, needcleanup=1):\n        \"\"\"Return a newly created Tcl function. If this\n        function is called, the Python function FUNC will\n        be executed. An optional function SUBST can\n        be given which will be executed before FUNC.\"\"\"\n        f = CallWrapper(func, subst, self).__call__\n        name = repr(id(f))\n        try:\n            func = func.__func__\n        except AttributeError:\n            pass\n        try:\n            name = name + func.__name__\n        except AttributeError:\n            pass\n        self.tk.createcommand(name, f)\n        if needcleanup:\n            if self._tclCommands is None:\n                self._tclCommands = []\n            self._tclCommands.append(name)\n        return name\n\n    register = _register\n\n    def _root(self):\n        \"\"\"Internal function.\"\"\"\n        w = self\n        while w.master: w = w.master\n        return w\n    _subst_format = ('%#', '%b', '%f', '%h', '%k',\n             '%s', '%t', '%w', '%x', '%y',\n             '%A', '%E', '%K', '%N', '%W', '%T', '%X', '%Y', '%D')\n    _subst_format_str = \" \".join(_subst_format)\n\n    def _substitute(self, *args):\n        \"\"\"Internal function.\"\"\"\n        if len(args) != len(self._subst_format): return args\n        getboolean = self.tk.getboolean\n\n        getint = self.tk.getint\n        def getint_event(s):\n            \"\"\"Tk changed behavior in 8.4.2, returning \"??\" rather more often.\"\"\"\n            try:\n                return getint(s)\n            except (ValueError, TclError):\n                return s\n\n        nsign, b, f, h, k, s, t, w, x, y, A, E, K, N, W, T, X, Y, D = args\n        # Missing: (a, c, d, m, o, v, B, R)\n        e = Event()\n        # serial field: valid for all events\n        # number of button: ButtonPress and ButtonRelease events only\n        # height field: Configure, ConfigureRequest, Create,\n        # ResizeRequest, and Expose events only\n        # keycode field: KeyPress and KeyRelease events only\n        # time field: \"valid for events that contain a time field\"\n        # width field: Configure, ConfigureRequest, Create, ResizeRequest,\n        # and Expose events only\n        # x field: \"valid for events that contain an x field\"\n        # y field: \"valid for events that contain a y field\"\n        # keysym as decimal: KeyPress and KeyRelease events only\n        # x_root, y_root fields: ButtonPress, ButtonRelease, KeyPress,\n        # KeyRelease, and Motion events\n        e.serial = getint(nsign)\n        e.num = getint_event(b)\n        try: e.focus = getboolean(f)\n        except TclError: pass\n        e.height = getint_event(h)\n        e.keycode = getint_event(k)\n        e.state = getint_event(s)\n        e.time = getint_event(t)\n        e.width = getint_event(w)\n        e.x = getint_event(x)\n        e.y = getint_event(y)\n        e.char = A\n        try: e.send_event = getboolean(E)\n        except TclError: pass\n        e.keysym = K\n        e.keysym_num = getint_event(N)\n        try:\n            e.type = EventType(T)\n        except ValueError:\n            e.type = T\n        try:\n            e.widget = self._nametowidget(W)\n        except KeyError:\n            e.widget = W\n        e.x_root = getint_event(X)\n        e.y_root = getint_event(Y)\n        try:\n            e.delta = getint(D)\n        except (ValueError, TclError):\n            e.delta = 0\n        return (e,)\n\n    def _report_exception(self):\n        \"\"\"Internal function.\"\"\"\n        exc, val, tb = sys.exc_info()\n        root = self._root()\n        root.report_callback_exception(exc, val, tb)\n\n    def _getconfigure(self, *args):\n        \"\"\"Call Tcl configure command and return the result as a dict.\"\"\"\n        cnf = {}\n        for x in self.tk.splitlist(self.tk.call(*args)):\n            x = self.tk.splitlist(x)\n            cnf[x[0][1:]] = (x[0][1:],) + x[1:]\n        return cnf\n\n    def _getconfigure1(self, *args):\n        x = self.tk.splitlist(self.tk.call(*args))\n        return (x[0][1:],) + x[1:]\n\n    def _configure(self, cmd, cnf, kw):\n        \"\"\"Internal function.\"\"\"\n        if kw:\n            cnf = _cnfmerge((cnf, kw))\n        elif cnf:\n            cnf = _cnfmerge(cnf)\n        if cnf is None:\n            return self._getconfigure(_flatten((self._w, cmd)))\n        if isinstance(cnf, str):\n            return self._getconfigure1(_flatten((self._w, cmd, '-'+cnf)))\n        self.tk.call(_flatten((self._w, cmd)) + self._options(cnf))\n    # These used to be defined in Widget:\n\n    def configure(self, cnf=None, **kw):\n        \"\"\"Configure resources of a widget.\n\n        The values for resources are specified as keyword\n        arguments. To get an overview about\n        the allowed keyword arguments call the method keys.\n        \"\"\"\n        return self._configure('configure', cnf, kw)\n\n    config = configure\n\n    def cget(self, key):\n        \"\"\"Return the resource value for a KEY given as string.\"\"\"\n        return self.tk.call(self._w, 'cget', '-' + key)\n\n    __getitem__ = cget\n\n    def __setitem__(self, key, value):\n        self.configure({key: value})\n\n    def keys(self):\n        \"\"\"Return a list of all resource names of this widget.\"\"\"\n        splitlist = self.tk.splitlist\n        return [splitlist(x)[0][1:] for x in\n                splitlist(self.tk.call(self._w, 'configure'))]\n\n    def __str__(self):\n        \"\"\"Return the window path name of this widget.\"\"\"\n        return self._w\n\n    def __repr__(self):\n        return '<%s.%s object %s>' % (\n            self.__class__.__module__, self.__class__.__qualname__, self._w)\n\n    # Pack methods that apply to the master\n    _noarg_ = ['_noarg_']\n\n    def pack_propagate(self, flag=_noarg_):\n        \"\"\"Set or get the status for propagation of geometry information.\n\n        A boolean argument specifies whether the geometry information\n        of the slaves will determine the size of this widget. If no argument\n        is given the current setting will be returned.\n        \"\"\"\n        if flag is Misc._noarg_:\n            return self._getboolean(self.tk.call(\n                'pack', 'propagate', self._w))\n        else:\n            self.tk.call('pack', 'propagate', self._w, flag)\n\n    propagate = pack_propagate\n\n    def pack_slaves(self):\n        \"\"\"Return a list of all slaves of this widget\n        in its packing order.\"\"\"\n        return [self._nametowidget(x) for x in\n                self.tk.splitlist(\n                   self.tk.call('pack', 'slaves', self._w))]\n\n    slaves = pack_slaves\n\n    # Place method that applies to the master\n    def place_slaves(self):\n        \"\"\"Return a list of all slaves of this widget\n        in its packing order.\"\"\"\n        return [self._nametowidget(x) for x in\n                self.tk.splitlist(\n                   self.tk.call(\n                       'place', 'slaves', self._w))]\n\n    # Grid methods that apply to the master\n\n    def grid_anchor(self, anchor=None): # new in Tk 8.5\n        \"\"\"The anchor value controls how to place the grid within the\n        master when no row/column has any weight.\n\n        The default anchor is nw.\"\"\"\n        self.tk.call('grid', 'anchor', self._w, anchor)\n\n    anchor = grid_anchor\n\n    def grid_bbox(self, column=None, row=None, col2=None, row2=None):\n        \"\"\"Return a tuple of integer coordinates for the bounding\n        box of this widget controlled by the geometry manager grid.\n\n        If COLUMN, ROW is given the bounding box applies from\n        the cell with row and column 0 to the specified\n        cell. If COL2 and ROW2 are given the bounding box\n        starts at that cell.\n\n        The returned integers specify the offset of the upper left\n        corner in the master widget and the width and height.\n        \"\"\"\n        args = ('grid', 'bbox', self._w)\n        if column is not None and row is not None:\n            args = args + (column, row)\n        if col2 is not None and row2 is not None:\n            args = args + (col2, row2)\n        return self._getints(self.tk.call(*args)) or None\n\n    bbox = grid_bbox\n\n    def _gridconvvalue(self, value):\n        if isinstance(value, (str, _tkinter.Tcl_Obj)):\n            try:\n                svalue = str(value)\n                if not svalue:\n                    return None\n                elif '.' in svalue:\n                    return self.tk.getdouble(svalue)\n                else:\n                    return self.tk.getint(svalue)\n            except (ValueError, TclError):\n                pass\n        return value\n\n    def _grid_configure(self, command, index, cnf, kw):\n        \"\"\"Internal function.\"\"\"\n        if isinstance(cnf, str) and not kw:\n            if cnf[-1:] == '_':\n                cnf = cnf[:-1]\n            if cnf[:1] != '-':\n                cnf = '-'+cnf\n            options = (cnf,)\n        else:\n            options = self._options(cnf, kw)\n        if not options:\n            return _splitdict(\n                self.tk,\n                self.tk.call('grid', command, self._w, index),\n                conv=self._gridconvvalue)\n        res = self.tk.call(\n                  ('grid', command, self._w, index)\n                  + options)\n        if len(options) == 1:\n            return self._gridconvvalue(res)\n\n    def grid_columnconfigure(self, index, cnf={}, **kw):\n        \"\"\"Configure column INDEX of a grid.\n\n        Valid resources are minsize (minimum size of the column),\n        weight (how much does additional space propagate to this column)\n        and pad (how much space to let additionally).\"\"\"\n        return self._grid_configure('columnconfigure', index, cnf, kw)\n\n    columnconfigure = grid_columnconfigure\n\n    def grid_location(self, x, y):\n        \"\"\"Return a tuple of column and row which identify the cell\n        at which the pixel at position X and Y inside the master\n        widget is located.\"\"\"\n        return self._getints(\n            self.tk.call(\n                'grid', 'location', self._w, x, y)) or None\n\n    def grid_propagate(self, flag=_noarg_):\n        \"\"\"Set or get the status for propagation of geometry information.\n\n        A boolean argument specifies whether the geometry information\n        of the slaves will determine the size of this widget. If no argument\n        is given, the current setting will be returned.\n        \"\"\"\n        if flag is Misc._noarg_:\n            return self._getboolean(self.tk.call(\n                'grid', 'propagate', self._w))\n        else:\n            self.tk.call('grid', 'propagate', self._w, flag)\n\n    def grid_rowconfigure(self, index, cnf={}, **kw):\n        \"\"\"Configure row INDEX of a grid.\n\n        Valid resources are minsize (minimum size of the row),\n        weight (how much does additional space propagate to this row)\n        and pad (how much space to let additionally).\"\"\"\n        return self._grid_configure('rowconfigure', index, cnf, kw)\n\n    rowconfigure = grid_rowconfigure\n\n    def grid_size(self):\n        \"\"\"Return a tuple of the number of column and rows in the grid.\"\"\"\n        return self._getints(\n            self.tk.call('grid', 'size', self._w)) or None\n\n    size = grid_size\n\n    def grid_slaves(self, row=None, column=None):\n        \"\"\"Return a list of all slaves of this widget\n        in its packing order.\"\"\"\n        args = ()\n        if row is not None:\n            args = args + ('-row', row)\n        if column is not None:\n            args = args + ('-column', column)\n        return [self._nametowidget(x) for x in\n                self.tk.splitlist(self.tk.call(\n                   ('grid', 'slaves', self._w) + args))]\n\n    # Support for the \"event\" command, new in Tk 4.2.\n    # By Case Roole.\n\n    def event_add(self, virtual, *sequences):\n        \"\"\"Bind a virtual event VIRTUAL (of the form <<Name>>)\n        to an event SEQUENCE such that the virtual event is triggered\n        whenever SEQUENCE occurs.\"\"\"\n        args = ('event', 'add', virtual) + sequences\n        self.tk.call(args)\n\n    def event_delete(self, virtual, *sequences):\n        \"\"\"Unbind a virtual event VIRTUAL from SEQUENCE.\"\"\"\n        args = ('event', 'delete', virtual) + sequences\n        self.tk.call(args)\n\n    def event_generate(self, sequence, **kw):\n        \"\"\"Generate an event SEQUENCE. Additional\n        keyword arguments specify parameter of the event\n        (e.g. x, y, rootx, rooty).\"\"\"\n        args = ('event', 'generate', self._w, sequence)\n        for k, v in kw.items():\n            args = args + ('-%s' % k, str(v))\n        self.tk.call(args)\n\n    def event_info(self, virtual=None):\n        \"\"\"Return a list of all virtual events or the information\n        about the SEQUENCE bound to the virtual event VIRTUAL.\"\"\"\n        return self.tk.splitlist(\n            self.tk.call('event', 'info', virtual))\n\n    # Image related commands\n\n    def image_names(self):\n        \"\"\"Return a list of all existing image names.\"\"\"\n        return self.tk.splitlist(self.tk.call('image', 'names'))\n\n    def image_types(self):\n        \"\"\"Return a list of all available image types (e.g. photo bitmap).\"\"\"\n        return self.tk.splitlist(self.tk.call('image', 'types'))\n\n\nclass CallWrapper:\n    \"\"\"Internal class. Stores function to call when some user\n    defined Tcl function is called e.g. after an event occurred.\"\"\"\n\n    def __init__(self, func, subst, widget):\n        \"\"\"Store FUNC, SUBST and WIDGET as members.\"\"\"\n        self.func = func\n        self.subst = subst\n        self.widget = widget\n\n    def __call__(self, *args):\n        \"\"\"Apply first function SUBST to arguments, than FUNC.\"\"\"\n        try:\n            if self.subst:\n                args = self.subst(*args)\n            return self.func(*args)\n        except SystemExit:\n            raise\n        except:\n            self.widget._report_exception()\n\n\nclass XView:\n    \"\"\"Mix-in class for querying and changing the horizontal position\n    of a widget's window.\"\"\"\n\n    def xview(self, *args):\n        \"\"\"Query and change the horizontal position of the view.\"\"\"\n        res = self.tk.call(self._w, 'xview', *args)\n        if not args:\n            return self._getdoubles(res)\n\n    def xview_moveto(self, fraction):\n        \"\"\"Adjusts the view in the window so that FRACTION of the\n        total width of the canvas is off-screen to the left.\"\"\"\n        self.tk.call(self._w, 'xview', 'moveto', fraction)\n\n    def xview_scroll(self, number, what):\n        \"\"\"Shift the x-view according to NUMBER which is measured in \"units\"\n        or \"pages\" (WHAT).\"\"\"\n        self.tk.call(self._w, 'xview', 'scroll', number, what)\n\n\nclass YView:\n    \"\"\"Mix-in class for querying and changing the vertical position\n    of a widget's window.\"\"\"\n\n    def yview(self, *args):\n        \"\"\"Query and change the vertical position of the view.\"\"\"\n        res = self.tk.call(self._w, 'yview', *args)\n        if not args:\n            return self._getdoubles(res)\n\n    def yview_moveto(self, fraction):\n        \"\"\"Adjusts the view in the window so that FRACTION of the\n        total height of the canvas is off-screen to the top.\"\"\"\n        self.tk.call(self._w, 'yview', 'moveto', fraction)\n\n    def yview_scroll(self, number, what):\n        \"\"\"Shift the y-view according to NUMBER which is measured in\n        \"units\" or \"pages\" (WHAT).\"\"\"\n        self.tk.call(self._w, 'yview', 'scroll', number, what)\n\n\nclass Wm:\n    \"\"\"Provides functions for the communication with the window manager.\"\"\"\n\n    def wm_aspect(self,\n              minNumer=None, minDenom=None,\n              maxNumer=None, maxDenom=None):\n        \"\"\"Instruct the window manager to set the aspect ratio (width/height)\n        of this widget to be between MINNUMER/MINDENOM and MAXNUMER/MAXDENOM. Return a tuple\n        of the actual values if no argument is given.\"\"\"\n        return self._getints(\n            self.tk.call('wm', 'aspect', self._w,\n                     minNumer, minDenom,\n                     maxNumer, maxDenom))\n\n    aspect = wm_aspect\n\n    def wm_attributes(self, *args):\n        \"\"\"This subcommand returns or sets platform specific attributes\n\n        The first form returns a list of the platform specific flags and\n        their values. The second form returns the value for the specific\n        option. The third form sets one or more of the values. The values\n        are as follows:\n\n        On Windows, -disabled gets or sets whether the window is in a\n        disabled state. -toolwindow gets or sets the style of the window\n        to toolwindow (as defined in the MSDN). -topmost gets or sets\n        whether this is a topmost window (displays above all other\n        windows).\n\n        On Macintosh, XXXXX\n\n        On Unix, there are currently no special attribute values.\n        \"\"\"\n        args = ('wm', 'attributes', self._w) + args\n        return self.tk.call(args)\n\n    attributes = wm_attributes\n\n    def wm_client(self, name=None):\n        \"\"\"Store NAME in WM_CLIENT_MACHINE property of this widget. Return\n        current value.\"\"\"\n        return self.tk.call('wm', 'client', self._w, name)\n\n    client = wm_client\n\n    def wm_colormapwindows(self, *wlist):\n        \"\"\"Store list of window names (WLIST) into WM_COLORMAPWINDOWS property\n        of this widget. This list contains windows whose colormaps differ from their\n        parents. Return current list of widgets if WLIST is empty.\"\"\"\n        if len(wlist) > 1:\n            wlist = (wlist,) # Tk needs a list of windows here\n        args = ('wm', 'colormapwindows', self._w) + wlist\n        if wlist:\n            self.tk.call(args)\n        else:\n            return [self._nametowidget(x)\n                    for x in self.tk.splitlist(self.tk.call(args))]\n\n    colormapwindows = wm_colormapwindows\n\n    def wm_command(self, value=None):\n        \"\"\"Store VALUE in WM_COMMAND property. It is the command\n        which shall be used to invoke the application. Return current\n        command if VALUE is None.\"\"\"\n        return self.tk.call('wm', 'command', self._w, value)\n\n    command = wm_command\n\n    def wm_deiconify(self):\n        \"\"\"Deiconify this widget. If it was never mapped it will not be mapped.\n        On Windows it will raise this widget and give it the focus.\"\"\"\n        return self.tk.call('wm', 'deiconify', self._w)\n\n    deiconify = wm_deiconify\n\n    def wm_focusmodel(self, model=None):\n        \"\"\"Set focus model to MODEL. \"active\" means that this widget will claim\n        the focus itself, \"passive\" means that the window manager shall give\n        the focus. Return current focus model if MODEL is None.\"\"\"\n        return self.tk.call('wm', 'focusmodel', self._w, model)\n\n    focusmodel = wm_focusmodel\n\n    def wm_forget(self, window): # new in Tk 8.5\n        \"\"\"The window will be unmapped from the screen and will no longer\n        be managed by wm. toplevel windows will be treated like frame\n        windows once they are no longer managed by wm, however, the menu\n        option configuration will be remembered and the menus will return\n        once the widget is managed again.\"\"\"\n        self.tk.call('wm', 'forget', window)\n\n    forget = wm_forget\n\n    def wm_frame(self):\n        \"\"\"Return identifier for decorative frame of this widget if present.\"\"\"\n        return self.tk.call('wm', 'frame', self._w)\n\n    frame = wm_frame\n\n    def wm_geometry(self, newGeometry=None):\n        \"\"\"Set geometry to NEWGEOMETRY of the form =widthxheight+x+y. Return\n        current value if None is given.\"\"\"\n        return self.tk.call('wm', 'geometry', self._w, newGeometry)\n\n    geometry = wm_geometry\n\n    def wm_grid(self,\n         baseWidth=None, baseHeight=None,\n         widthInc=None, heightInc=None):\n        \"\"\"Instruct the window manager that this widget shall only be\n        resized on grid boundaries. WIDTHINC and HEIGHTINC are the width and\n        height of a grid unit in pixels. BASEWIDTH and BASEHEIGHT are the\n        number of grid units requested in Tk_GeometryRequest.\"\"\"\n        return self._getints(self.tk.call(\n            'wm', 'grid', self._w,\n            baseWidth, baseHeight, widthInc, heightInc))\n\n    grid = wm_grid\n\n    def wm_group(self, pathName=None):\n        \"\"\"Set the group leader widgets for related widgets to PATHNAME. Return\n        the group leader of this widget if None is given.\"\"\"\n        return self.tk.call('wm', 'group', self._w, pathName)\n\n    group = wm_group\n\n    def wm_iconbitmap(self, bitmap=None, default=None):\n        \"\"\"Set bitmap for the iconified widget to BITMAP. Return\n        the bitmap if None is given.\n\n        Under Windows, the DEFAULT parameter can be used to set the icon\n        for the widget and any descendents that don't have an icon set\n        explicitly.  DEFAULT can be the relative path to a .ico file\n        (example: root.iconbitmap(default='myicon.ico') ).  See Tk\n        documentation for more information.\"\"\"\n        if default:\n            return self.tk.call('wm', 'iconbitmap', self._w, '-default', default)\n        else:\n            return self.tk.call('wm', 'iconbitmap', self._w, bitmap)\n\n    iconbitmap = wm_iconbitmap\n\n    def wm_iconify(self):\n        \"\"\"Display widget as icon.\"\"\"\n        return self.tk.call('wm', 'iconify', self._w)\n\n    iconify = wm_iconify\n\n    def wm_iconmask(self, bitmap=None):\n        \"\"\"Set mask for the icon bitmap of this widget. Return the\n        mask if None is given.\"\"\"\n        return self.tk.call('wm', 'iconmask', self._w, bitmap)\n\n    iconmask = wm_iconmask\n\n    def wm_iconname(self, newName=None):\n        \"\"\"Set the name of the icon for this widget. Return the name if\n        None is given.\"\"\"\n        return self.tk.call('wm', 'iconname', self._w, newName)\n\n    iconname = wm_iconname\n\n    def wm_iconphoto(self, default=False, *args): # new in Tk 8.5\n        \"\"\"Sets the titlebar icon for this window based on the named photo\n        images passed through args. If default is True, this is applied to\n        all future created toplevels as well.\n\n        The data in the images is taken as a snapshot at the time of\n        invocation. If the images are later changed, this is not reflected\n        to the titlebar icons. Multiple images are accepted to allow\n        different images sizes to be provided. The window manager may scale\n        provided icons to an appropriate size.\n\n        On Windows, the images are packed into a Windows icon structure.\n        This will override an icon specified to wm_iconbitmap, and vice\n        versa.\n\n        On X, the images are arranged into the _NET_WM_ICON X property,\n        which most modern window managers support. An icon specified by\n        wm_iconbitmap may exist simultaneously.\n\n        On Macintosh, this currently does nothing.\"\"\"\n        if default:\n            self.tk.call('wm', 'iconphoto', self._w, \"-default\", *args)\n        else:\n            self.tk.call('wm', 'iconphoto', self._w, *args)\n\n    iconphoto = wm_iconphoto\n\n    def wm_iconposition(self, x=None, y=None):\n        \"\"\"Set the position of the icon of this widget to X and Y. Return\n        a tuple of the current values of X and X if None is given.\"\"\"\n        return self._getints(self.tk.call(\n            'wm', 'iconposition', self._w, x, y))\n\n    iconposition = wm_iconposition\n\n    def wm_iconwindow(self, pathName=None):\n        \"\"\"Set widget PATHNAME to be displayed instead of icon. Return the current\n        value if None is given.\"\"\"\n        return self.tk.call('wm', 'iconwindow', self._w, pathName)\n\n    iconwindow = wm_iconwindow\n\n    def wm_manage(self, widget): # new in Tk 8.5\n        \"\"\"The widget specified will become a stand alone top-level window.\n        The window will be decorated with the window managers title bar,\n        etc.\"\"\"\n        self.tk.call('wm', 'manage', widget)\n\n    manage = wm_manage\n\n    def wm_maxsize(self, width=None, height=None):\n        \"\"\"Set max WIDTH and HEIGHT for this widget. If the window is gridded\n        the values are given in grid units. Return the current values if None\n        is given.\"\"\"\n        return self._getints(self.tk.call(\n            'wm', 'maxsize', self._w, width, height))\n\n    maxsize = wm_maxsize\n\n    def wm_minsize(self, width=None, height=None):\n        \"\"\"Set min WIDTH and HEIGHT for this widget. If the window is gridded\n        the values are given in grid units. Return the current values if None\n        is given.\"\"\"\n        return self._getints(self.tk.call(\n            'wm', 'minsize', self._w, width, height))\n\n    minsize = wm_minsize\n\n    def wm_overrideredirect(self, boolean=None):\n        \"\"\"Instruct the window manager to ignore this widget\n        if BOOLEAN is given with 1. Return the current value if None\n        is given.\"\"\"\n        return self._getboolean(self.tk.call(\n            'wm', 'overrideredirect', self._w, boolean))\n\n    overrideredirect = wm_overrideredirect\n\n    def wm_positionfrom(self, who=None):\n        \"\"\"Instruct the window manager that the position of this widget shall\n        be defined by the user if WHO is \"user\", and by its own policy if WHO is\n        \"program\".\"\"\"\n        return self.tk.call('wm', 'positionfrom', self._w, who)\n\n    positionfrom = wm_positionfrom\n\n    def wm_protocol(self, name=None, func=None):\n        \"\"\"Bind function FUNC to command NAME for this widget.\n        Return the function bound to NAME if None is given. NAME could be\n        e.g. \"WM_SAVE_YOURSELF\" or \"WM_DELETE_WINDOW\".\"\"\"\n        if callable(func):\n            command = self._register(func)\n        else:\n            command = func\n        return self.tk.call(\n            'wm', 'protocol', self._w, name, command)\n\n    protocol = wm_protocol\n\n    def wm_resizable(self, width=None, height=None):\n        \"\"\"Instruct the window manager whether this width can be resized\n        in WIDTH or HEIGHT. Both values are boolean values.\"\"\"\n        return self.tk.call('wm', 'resizable', self._w, width, height)\n\n    resizable = wm_resizable\n\n    def wm_sizefrom(self, who=None):\n        \"\"\"Instruct the window manager that the size of this widget shall\n        be defined by the user if WHO is \"user\", and by its own policy if WHO is\n        \"program\".\"\"\"\n        return self.tk.call('wm', 'sizefrom', self._w, who)\n\n    sizefrom = wm_sizefrom\n\n    def wm_state(self, newstate=None):\n        \"\"\"Query or set the state of this widget as one of normal, icon,\n        iconic (see wm_iconwindow), withdrawn, or zoomed (Windows only).\"\"\"\n        return self.tk.call('wm', 'state', self._w, newstate)\n\n    state = wm_state\n\n    def wm_title(self, string=None):\n        \"\"\"Set the title of this widget.\"\"\"\n        return self.tk.call('wm', 'title', self._w, string)\n\n    title = wm_title\n\n    def wm_transient(self, master=None):\n        \"\"\"Instruct the window manager that this widget is transient\n        with regard to widget MASTER.\"\"\"\n        return self.tk.call('wm', 'transient', self._w, master)\n\n    transient = wm_transient\n\n    def wm_withdraw(self):\n        \"\"\"Withdraw this widget from the screen such that it is unmapped\n        and forgotten by the window manager. Re-draw it with wm_deiconify.\"\"\"\n        return self.tk.call('wm', 'withdraw', self._w)\n\n    withdraw = wm_withdraw\n\n\nclass Tk(Misc, Wm):\n    \"\"\"Toplevel widget of Tk which represents mostly the main window\n    of an application. It has an associated Tcl interpreter.\"\"\"\n    _w = '.'\n\n    def __init__(self, screenName=None, baseName=None, className='Tk',\n                 useTk=1, sync=0, use=None):\n        \"\"\"Return a new Toplevel widget on screen SCREENNAME. A new Tcl interpreter will\n        be created. BASENAME will be used for the identification of the profile file (see\n        readprofile).\n        It is constructed from sys.argv[0] without extensions if None is given. CLASSNAME\n        is the name of the widget class.\"\"\"\n        self.master = None\n        self.children = {}\n        self._tkloaded = False\n        # to avoid recursions in the getattr code in case of failure, we\n        # ensure that self.tk is always _something_.\n        self.tk = None\n        if baseName is None:\n            import os\n            baseName = os.path.basename(sys.argv[0])\n            baseName, ext = os.path.splitext(baseName)\n            if ext not in ('.py', '.pyc'):\n                baseName = baseName + ext\n        interactive = 0\n        self.tk = _tkinter.create(screenName, baseName, className, interactive, wantobjects, useTk, sync, use)\n        if useTk:\n            self._loadtk()\n        if not sys.flags.ignore_environment:\n            # Issue #16248: Honor the -E flag to avoid code injection.\n            self.readprofile(baseName, className)\n\n    def loadtk(self):\n        if not self._tkloaded:\n            self.tk.loadtk()\n            self._loadtk()\n\n    def _loadtk(self):\n        self._tkloaded = True\n        global _default_root\n        # Version sanity checks\n        tk_version = self.tk.getvar('tk_version')\n        if tk_version != _tkinter.TK_VERSION:\n            raise RuntimeError(\"tk.h version (%s) doesn't match libtk.a version (%s)\"\n                               % (_tkinter.TK_VERSION, tk_version))\n        # Under unknown circumstances, tcl_version gets coerced to float\n        tcl_version = str(self.tk.getvar('tcl_version'))\n        if tcl_version != _tkinter.TCL_VERSION:\n            raise RuntimeError(\"tcl.h version (%s) doesn't match libtcl.a version (%s)\" \\\n                               % (_tkinter.TCL_VERSION, tcl_version))\n        # Create and register the tkerror and exit commands\n        # We need to inline parts of _register here, _ register\n        # would register differently-named commands.\n        if self._tclCommands is None:\n            self._tclCommands = []\n        self.tk.createcommand('tkerror', _tkerror)\n        self.tk.createcommand('exit', _exit)\n        self._tclCommands.append('tkerror')\n        self._tclCommands.append('exit')\n        if _support_default_root and not _default_root:\n            _default_root = self\n        self.protocol(\"WM_DELETE_WINDOW\", self.destroy)\n\n    def destroy(self):\n        \"\"\"Destroy this and all descendants widgets. This will\n        end the application of this Tcl interpreter.\"\"\"\n        for c in list(self.children.values()): c.destroy()\n        self.tk.call('destroy', self._w)\n        Misc.destroy(self)\n        global _default_root\n        if _support_default_root and _default_root is self:\n            _default_root = None\n\n    def readprofile(self, baseName, className):\n        \"\"\"Internal function. It reads BASENAME.tcl and CLASSNAME.tcl into\n        the Tcl Interpreter and calls exec on the contents of BASENAME.py and\n        CLASSNAME.py if such a file exists in the home directory.\"\"\"\n        import os\n        if 'HOME' in os.environ: home = os.environ['HOME']\n        else: home = os.curdir\n        class_tcl = os.path.join(home, '.%s.tcl' % className)\n        class_py = os.path.join(home, '.%s.py' % className)\n        base_tcl = os.path.join(home, '.%s.tcl' % baseName)\n        base_py = os.path.join(home, '.%s.py' % baseName)\n        dir = {'self': self}\n        exec('from tkinter import *', dir)\n        if os.path.isfile(class_tcl):\n            self.tk.call('source', class_tcl)\n        if os.path.isfile(class_py):\n            exec(open(class_py).read(), dir)\n        if os.path.isfile(base_tcl):\n            self.tk.call('source', base_tcl)\n        if os.path.isfile(base_py):\n            exec(open(base_py).read(), dir)\n\n    def report_callback_exception(self, exc, val, tb):\n        \"\"\"Report callback exception on sys.stderr.\n\n        Applications may want to override this internal function, and\n        should when sys.stderr is None.\"\"\"\n        import traceback\n        print(\"Exception in Tkinter callback\", file=sys.stderr)\n        sys.last_type = exc\n        sys.last_value = val\n        sys.last_traceback = tb\n        traceback.print_exception(exc, val, tb)\n\n    def __getattr__(self, attr):\n        \"Delegate attribute access to the interpreter object\"\n        return getattr(self.tk, attr)\n\n# Ideally, the classes Pack, Place and Grid disappear, the\n# pack/place/grid methods are defined on the Widget class, and\n# everybody uses w.pack_whatever(...) instead of Pack.whatever(w,\n# ...), with pack(), place() and grid() being short for\n# pack_configure(), place_configure() and grid_columnconfigure(), and\n# forget() being short for pack_forget().  As a practical matter, I'm\n# afraid that there is too much code out there that may be using the\n# Pack, Place or Grid class, so I leave them intact -- but only as\n# backwards compatibility features.  Also note that those methods that\n# take a master as argument (e.g. pack_propagate) have been moved to\n# the Misc class (which now incorporates all methods common between\n# toplevel and interior widgets).  Again, for compatibility, these are\n# copied into the Pack, Place or Grid class.\n\n\ndef Tcl(screenName=None, baseName=None, className='Tk', useTk=0):\n    return Tk(screenName, baseName, className, useTk)\n\n\nclass Pack:\n    \"\"\"Geometry manager Pack.\n\n    Base class to use the methods pack_* in every widget.\"\"\"\n\n    def pack_configure(self, cnf={}, **kw):\n        \"\"\"Pack a widget in the parent widget. Use as options:\n        after=widget - pack it after you have packed widget\n        anchor=NSEW (or subset) - position widget according to\n                                  given direction\n        before=widget - pack it before you will pack widget\n        expand=bool - expand widget if parent size grows\n        fill=NONE or X or Y or BOTH - fill widget if widget grows\n        in=master - use master to contain this widget\n        in_=master - see 'in' option description\n        ipadx=amount - add internal padding in x direction\n        ipady=amount - add internal padding in y direction\n        padx=amount - add padding in x direction\n        pady=amount - add padding in y direction\n        side=TOP or BOTTOM or LEFT or RIGHT -  where to add this widget.\n        \"\"\"\n        self.tk.call(\n              ('pack', 'configure', self._w)\n              + self._options(cnf, kw))\n\n    pack = configure = config = pack_configure\n\n    def pack_forget(self):\n        \"\"\"Unmap this widget and do not use it for the packing order.\"\"\"\n        self.tk.call('pack', 'forget', self._w)\n\n    forget = pack_forget\n\n    def pack_info(self):\n        \"\"\"Return information about the packing options\n        for this widget.\"\"\"\n        d = _splitdict(self.tk, self.tk.call('pack', 'info', self._w))\n        if 'in' in d:\n            d['in'] = self.nametowidget(d['in'])\n        return d\n\n    info = pack_info\n    propagate = pack_propagate = Misc.pack_propagate\n    slaves = pack_slaves = Misc.pack_slaves\n\n\nclass Place:\n    \"\"\"Geometry manager Place.\n\n    Base class to use the methods place_* in every widget.\"\"\"\n\n    def place_configure(self, cnf={}, **kw):\n        \"\"\"Place a widget in the parent widget. Use as options:\n        in=master - master relative to which the widget is placed\n        in_=master - see 'in' option description\n        x=amount - locate anchor of this widget at position x of master\n        y=amount - locate anchor of this widget at position y of master\n        relx=amount - locate anchor of this widget between 0.0 and 1.0\n                      relative to width of master (1.0 is right edge)\n        rely=amount - locate anchor of this widget between 0.0 and 1.0\n                      relative to height of master (1.0 is bottom edge)\n        anchor=NSEW (or subset) - position anchor according to given direction\n        width=amount - width of this widget in pixel\n        height=amount - height of this widget in pixel\n        relwidth=amount - width of this widget between 0.0 and 1.0\n                          relative to width of master (1.0 is the same width\n                          as the master)\n        relheight=amount - height of this widget between 0.0 and 1.0\n                           relative to height of master (1.0 is the same\n                           height as the master)\n        bordermode=\"inside\" or \"outside\" - whether to take border width of\n                                           master widget into account\n        \"\"\"\n        self.tk.call(\n              ('place', 'configure', self._w)\n              + self._options(cnf, kw))\n\n    place = configure = config = place_configure\n\n    def place_forget(self):\n        \"\"\"Unmap this widget.\"\"\"\n        self.tk.call('place', 'forget', self._w)\n\n    forget = place_forget\n\n    def place_info(self):\n        \"\"\"Return information about the placing options\n        for this widget.\"\"\"\n        d = _splitdict(self.tk, self.tk.call('place', 'info', self._w))\n        if 'in' in d:\n            d['in'] = self.nametowidget(d['in'])\n        return d\n\n    info = place_info\n    slaves = place_slaves = Misc.place_slaves\n\n\nclass Grid:\n    \"\"\"Geometry manager Grid.\n\n    Base class to use the methods grid_* in every widget.\"\"\"\n    # Thanks to Masazumi Yoshikawa (yosikawa@isi.edu)\n\n    def grid_configure(self, cnf={}, **kw):\n        \"\"\"Position a widget in the parent widget in a grid. Use as options:\n        column=number - use cell identified with given column (starting with 0)\n        columnspan=number - this widget will span several columns\n        in=master - use master to contain this widget\n        in_=master - see 'in' option description\n        ipadx=amount - add internal padding in x direction\n        ipady=amount - add internal padding in y direction\n        padx=amount - add padding in x direction\n        pady=amount - add padding in y direction\n        row=number - use cell identified with given row (starting with 0)\n        rowspan=number - this widget will span several rows\n        sticky=NSEW - if cell is larger on which sides will this\n                      widget stick to the cell boundary\n        \"\"\"\n        self.tk.call(\n              ('grid', 'configure', self._w)\n              + self._options(cnf, kw))\n\n    grid = configure = config = grid_configure\n    bbox = grid_bbox = Misc.grid_bbox\n    columnconfigure = grid_columnconfigure = Misc.grid_columnconfigure\n\n    def grid_forget(self):\n        \"\"\"Unmap this widget.\"\"\"\n        self.tk.call('grid', 'forget', self._w)\n\n    forget = grid_forget\n\n    def grid_remove(self):\n        \"\"\"Unmap this widget but remember the grid options.\"\"\"\n        self.tk.call('grid', 'remove', self._w)\n\n    def grid_info(self):\n        \"\"\"Return information about the options\n        for positioning this widget in a grid.\"\"\"\n        d = _splitdict(self.tk, self.tk.call('grid', 'info', self._w))\n        if 'in' in d:\n            d['in'] = self.nametowidget(d['in'])\n        return d\n\n    info = grid_info\n    location = grid_location = Misc.grid_location\n    propagate = grid_propagate = Misc.grid_propagate\n    rowconfigure = grid_rowconfigure = Misc.grid_rowconfigure\n    size = grid_size = Misc.grid_size\n    slaves = grid_slaves = Misc.grid_slaves\n\n\nclass BaseWidget(Misc):\n    \"\"\"Internal class.\"\"\"\n\n    def _setup(self, master, cnf):\n        \"\"\"Internal function. Sets up information about children.\"\"\"\n        if not master:\n            master = _get_default_root()\n        self.master = master\n        self.tk = master.tk\n        name = None\n        if 'name' in cnf:\n            name = cnf['name']\n            del cnf['name']\n        if not name:\n            name = self.__class__.__name__.lower()\n            if master._last_child_ids is None:\n                master._last_child_ids = {}\n            count = master._last_child_ids.get(name, 0) + 1\n            master._last_child_ids[name] = count\n            if count == 1:\n                name = '!%s' % (name,)\n            else:\n                name = '!%s%d' % (name, count)\n        self._name = name\n        if master._w=='.':\n            self._w = '.' + name\n        else:\n            self._w = master._w + '.' + name\n        self.children = {}\n        if self._name in self.master.children:\n            self.master.children[self._name].destroy()\n        self.master.children[self._name] = self\n\n    def __init__(self, master, widgetName, cnf={}, kw={}, extra=()):\n        \"\"\"Construct a widget with the parent widget MASTER, a name WIDGETNAME\n        and appropriate options.\"\"\"\n        if kw:\n            cnf = _cnfmerge((cnf, kw))\n        self.widgetName = widgetName\n        BaseWidget._setup(self, master, cnf)\n        if self._tclCommands is None:\n            self._tclCommands = []\n        classes = [(k, v) for k, v in cnf.items() if isinstance(k, type)]\n        for k, v in classes:\n            del cnf[k]\n        self.tk.call(\n            (widgetName, self._w) + extra + self._options(cnf))\n        for k, v in classes:\n            k.configure(self, v)\n\n    def destroy(self):\n        \"\"\"Destroy this and all descendants widgets.\"\"\"\n        for c in list(self.children.values()): c.destroy()\n        self.tk.call('destroy', self._w)\n        if self._name in self.master.children:\n            del self.master.children[self._name]\n        Misc.destroy(self)\n\n    def _do(self, name, args=()):\n        # XXX Obsolete -- better use self.tk.call directly!\n        return self.tk.call((self._w, name) + args)\n\n\nclass Widget(BaseWidget, Pack, Place, Grid):\n    \"\"\"Internal class.\n\n    Base class for a widget which can be positioned with the geometry managers\n    Pack, Place or Grid.\"\"\"\n    pass\n\n\nclass Toplevel(BaseWidget, Wm):\n    \"\"\"Toplevel widget, e.g. for dialogs.\"\"\"\n\n    def __init__(self, master=None, cnf={}, **kw):\n        \"\"\"Construct a toplevel widget with the parent MASTER.\n\n        Valid resource names: background, bd, bg, borderwidth, class,\n        colormap, container, cursor, height, highlightbackground,\n        highlightcolor, highlightthickness, menu, relief, screen, takefocus,\n        use, visual, width.\"\"\"\n        if kw:\n            cnf = _cnfmerge((cnf, kw))\n        extra = ()\n        for wmkey in ['screen', 'class_', 'class', 'visual',\n                  'colormap']:\n            if wmkey in cnf:\n                val = cnf[wmkey]\n                # TBD: a hack needed because some keys\n                # are not valid as keyword arguments\n                if wmkey[-1] == '_': opt = '-'+wmkey[:-1]\n                else: opt = '-'+wmkey\n                extra = extra + (opt, val)\n                del cnf[wmkey]\n        BaseWidget.__init__(self, master, 'toplevel', cnf, {}, extra)\n        root = self._root()\n        self.iconname(root.iconname())\n        self.title(root.title())\n        self.protocol(\"WM_DELETE_WINDOW\", self.destroy)\n\n\nclass Button(Widget):\n    \"\"\"Button widget.\"\"\"\n\n    def __init__(self, master=None, cnf={}, **kw):\n        \"\"\"Construct a button widget with the parent MASTER.\n\n        STANDARD OPTIONS\n\n            activebackground, activeforeground, anchor,\n            background, bitmap, borderwidth, cursor,\n            disabledforeground, font, foreground\n            highlightbackground, highlightcolor,\n            highlightthickness, image, justify,\n            padx, pady, relief, repeatdelay,\n            repeatinterval, takefocus, text,\n            textvariable, underline, wraplength\n\n        WIDGET-SPECIFIC OPTIONS\n\n            command, compound, default, height,\n            overrelief, state, width\n        \"\"\"\n        Widget.__init__(self, master, 'button', cnf, kw)\n\n    def flash(self):\n        \"\"\"Flash the button.\n\n        This is accomplished by redisplaying\n        the button several times, alternating between active and\n        normal colors. At the end of the flash the button is left\n        in the same normal/active state as when the command was\n        invoked. This command is ignored if the button's state is\n        disabled.\n        \"\"\"\n        self.tk.call(self._w, 'flash')\n\n    def invoke(self):\n        \"\"\"Invoke the command associated with the button.\n\n        The return value is the return value from the command,\n        or an empty string if there is no command associated with\n        the button. This command is ignored if the button's state\n        is disabled.\n        \"\"\"\n        return self.tk.call(self._w, 'invoke')\n\n\nclass Canvas(Widget, XView, YView):\n    \"\"\"Canvas widget to display graphical elements like lines or text.\"\"\"\n\n    def __init__(self, master=None, cnf={}, **kw):\n        \"\"\"Construct a canvas widget with the parent MASTER.\n\n        Valid resource names: background, bd, bg, borderwidth, closeenough,\n        confine, cursor, height, highlightbackground, highlightcolor,\n        highlightthickness, insertbackground, insertborderwidth,\n        insertofftime, insertontime, insertwidth, offset, relief,\n        scrollregion, selectbackground, selectborderwidth, selectforeground,\n        state, takefocus, width, xscrollcommand, xscrollincrement,\n        yscrollcommand, yscrollincrement.\"\"\"\n        Widget.__init__(self, master, 'canvas', cnf, kw)\n\n    def addtag(self, *args):\n        \"\"\"Internal function.\"\"\"\n        self.tk.call((self._w, 'addtag') + args)\n\n    def addtag_above(self, newtag, tagOrId):\n        \"\"\"Add tag NEWTAG to all items above TAGORID.\"\"\"\n        self.addtag(newtag, 'above', tagOrId)\n\n    def addtag_all(self, newtag):\n        \"\"\"Add tag NEWTAG to all items.\"\"\"\n        self.addtag(newtag, 'all')\n\n    def addtag_below(self, newtag, tagOrId):\n        \"\"\"Add tag NEWTAG to all items below TAGORID.\"\"\"\n        self.addtag(newtag, 'below', tagOrId)\n\n    def addtag_closest(self, newtag, x, y, halo=None, start=None):\n        \"\"\"Add tag NEWTAG to item which is closest to pixel at X, Y.\n        If several match take the top-most.\n        All items closer than HALO are considered overlapping (all are\n        closests). If START is specified the next below this tag is taken.\"\"\"\n        self.addtag(newtag, 'closest', x, y, halo, start)\n\n    def addtag_enclosed(self, newtag, x1, y1, x2, y2):\n        \"\"\"Add tag NEWTAG to all items in the rectangle defined\n        by X1,Y1,X2,Y2.\"\"\"\n        self.addtag(newtag, 'enclosed', x1, y1, x2, y2)\n\n    def addtag_overlapping(self, newtag, x1, y1, x2, y2):\n        \"\"\"Add tag NEWTAG to all items which overlap the rectangle\n        defined by X1,Y1,X2,Y2.\"\"\"\n        self.addtag(newtag, 'overlapping', x1, y1, x2, y2)\n\n    def addtag_withtag(self, newtag, tagOrId):\n        \"\"\"Add tag NEWTAG to all items with TAGORID.\"\"\"\n        self.addtag(newtag, 'withtag', tagOrId)\n\n    def bbox(self, *args):\n        \"\"\"Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle\n        which encloses all items with tags specified as arguments.\"\"\"\n        return self._getints(\n            self.tk.call((self._w, 'bbox') + args)) or None\n\n    def tag_unbind(self, tagOrId, sequence, funcid=None):\n        \"\"\"Unbind for all items with TAGORID for event SEQUENCE  the\n        function identified with FUNCID.\"\"\"\n        self.tk.call(self._w, 'bind', tagOrId, sequence, '')\n        if funcid:\n            self.deletecommand(funcid)\n\n    def tag_bind(self, tagOrId, sequence=None, func=None, add=None):\n        \"\"\"Bind to all items with TAGORID at event SEQUENCE a call to function FUNC.\n\n        An additional boolean parameter ADD specifies whether FUNC will be\n        called additionally to the other bound function or whether it will\n        replace the previous function. See bind for the return value.\"\"\"\n        return self._bind((self._w, 'bind', tagOrId),\n                  sequence, func, add)\n\n    def canvasx(self, screenx, gridspacing=None):\n        \"\"\"Return the canvas x coordinate of pixel position SCREENX rounded\n        to nearest multiple of GRIDSPACING units.\"\"\"\n        return self.tk.getdouble(self.tk.call(\n            self._w, 'canvasx', screenx, gridspacing))\n\n    def canvasy(self, screeny, gridspacing=None):\n        \"\"\"Return the canvas y coordinate of pixel position SCREENY rounded\n        to nearest multiple of GRIDSPACING units.\"\"\"\n        return self.tk.getdouble(self.tk.call(\n            self._w, 'canvasy', screeny, gridspacing))\n\n    def coords(self, *args):\n        \"\"\"Return a list of coordinates for the item given in ARGS.\"\"\"\n        # XXX Should use _flatten on args\n        return [self.tk.getdouble(x) for x in\n                           self.tk.splitlist(\n                   self.tk.call((self._w, 'coords') + args))]\n\n    def _create(self, itemType, args, kw): # Args: (val, val, ..., cnf={})\n        \"\"\"Internal function.\"\"\"\n        args = _flatten(args)\n        cnf = args[-1]\n        if isinstance(cnf, (dict, tuple)):\n            args = args[:-1]\n        else:\n            cnf = {}\n        return self.tk.getint(self.tk.call(\n            self._w, 'create', itemType,\n            *(args + self._options(cnf, kw))))\n\n    def create_arc(self, *args, **kw):\n        \"\"\"Create arc shaped region with coordinates x1,y1,x2,y2.\"\"\"\n        return self._create('arc', args, kw)\n\n    def create_bitmap(self, *args, **kw):\n        \"\"\"Create bitmap with coordinates x1,y1.\"\"\"\n        return self._create('bitmap', args, kw)\n\n    def create_image(self, *args, **kw):\n        \"\"\"Create image item with coordinates x1,y1.\"\"\"\n        return self._create('image', args, kw)\n\n    def create_line(self, *args, **kw):\n        \"\"\"Create line with coordinates x1,y1,...,xn,yn.\"\"\"\n        return self._create('line', args, kw)\n\n    def create_oval(self, *args, **kw):\n        \"\"\"Create oval with coordinates x1,y1,x2,y2.\"\"\"\n        return self._create('oval', args, kw)\n\n    def create_polygon(self, *args, **kw):\n        \"\"\"Create polygon with coordinates x1,y1,...,xn,yn.\"\"\"\n        return self._create('polygon', args, kw)\n\n    def create_rectangle(self, *args, **kw):\n        \"\"\"Create rectangle with coordinates x1,y1,x2,y2.\"\"\"\n        return self._create('rectangle', args, kw)\n\n    def create_text(self, *args, **kw):\n        \"\"\"Create text with coordinates x1,y1.\"\"\"\n        return self._create('text', args, kw)\n\n    def create_window(self, *args, **kw):\n        \"\"\"Create window with coordinates x1,y1,x2,y2.\"\"\"\n        return self._create('window', args, kw)\n\n    def dchars(self, *args):\n        \"\"\"Delete characters of text items identified by tag or id in ARGS (possibly\n        several times) from FIRST to LAST character (including).\"\"\"\n        self.tk.call((self._w, 'dchars') + args)\n\n    def delete(self, *args):\n        \"\"\"Delete items identified by all tag or ids contained in ARGS.\"\"\"\n        self.tk.call((self._w, 'delete') + args)\n\n    def dtag(self, *args):\n        \"\"\"Delete tag or id given as last arguments in ARGS from items\n        identified by first argument in ARGS.\"\"\"\n        self.tk.call((self._w, 'dtag') + args)\n\n    def find(self, *args):\n        \"\"\"Internal function.\"\"\"\n        return self._getints(\n            self.tk.call((self._w, 'find') + args)) or ()\n\n    def find_above(self, tagOrId):\n        \"\"\"Return items above TAGORID.\"\"\"\n        return self.find('above', tagOrId)\n\n    def find_all(self):\n        \"\"\"Return all items.\"\"\"\n        return self.find('all')\n\n    def find_below(self, tagOrId):\n        \"\"\"Return all items below TAGORID.\"\"\"\n        return self.find('below', tagOrId)\n\n    def find_closest(self, x, y, halo=None, start=None):\n        \"\"\"Return item which is closest to pixel at X, Y.\n        If several match take the top-most.\n        All items closer than HALO are considered overlapping (all are\n        closest). If START is specified the next below this tag is taken.\"\"\"\n        return self.find('closest', x, y, halo, start)\n\n    def find_enclosed(self, x1, y1, x2, y2):\n        \"\"\"Return all items in rectangle defined\n        by X1,Y1,X2,Y2.\"\"\"\n        return self.find('enclosed', x1, y1, x2, y2)\n\n    def find_overlapping(self, x1, y1, x2, y2):\n        \"\"\"Return all items which overlap the rectangle\n        defined by X1,Y1,X2,Y2.\"\"\"\n        return self.find('overlapping', x1, y1, x2, y2)\n\n    def find_withtag(self, tagOrId):\n        \"\"\"Return all items with TAGORID.\"\"\"\n        return self.find('withtag', tagOrId)\n\n    def focus(self, *args):\n        \"\"\"Set focus to the first item specified in ARGS.\"\"\"\n        return self.tk.call((self._w, 'focus') + args)\n\n    def gettags(self, *args):\n        \"\"\"Return tags associated with the first item specified in ARGS.\"\"\"\n        return self.tk.splitlist(\n            self.tk.call((self._w, 'gettags') + args))\n\n    def icursor(self, *args):\n        \"\"\"Set cursor at position POS in the item identified by TAGORID.\n        In ARGS TAGORID must be first.\"\"\"\n        self.tk.call((self._w, 'icursor') + args)\n\n    def index(self, *args):\n        \"\"\"Return position of cursor as integer in item specified in ARGS.\"\"\"\n        return self.tk.getint(self.tk.call((self._w, 'index') + args))\n\n    def insert(self, *args):\n        \"\"\"Insert TEXT in item TAGORID at position POS. ARGS must\n        be TAGORID POS TEXT.\"\"\"\n        self.tk.call((self._w, 'insert') + args)\n\n    def itemcget(self, tagOrId, option):\n        \"\"\"Return the resource value for an OPTION for item TAGORID.\"\"\"\n        return self.tk.call(\n            (self._w, 'itemcget') + (tagOrId, '-'+option))\n\n    def itemconfigure(self, tagOrId, cnf=None, **kw):\n        \"\"\"Configure resources of an item TAGORID.\n\n        The values for resources are specified as keyword\n        arguments. To get an overview about\n        the allowed keyword arguments call the method without arguments.\n        \"\"\"\n        return self._configure(('itemconfigure', tagOrId), cnf, kw)\n\n    itemconfig = itemconfigure\n\n    # lower, tkraise/lift hide Misc.lower, Misc.tkraise/lift,\n    # so the preferred name for them is tag_lower, tag_raise\n    # (similar to tag_bind, and similar to the Text widget);\n    # unfortunately can't delete the old ones yet (maybe in 1.6)\n    def tag_lower(self, *args):\n        \"\"\"Lower an item TAGORID given in ARGS\n        (optional below another item).\"\"\"\n        self.tk.call((self._w, 'lower') + args)\n\n    lower = tag_lower\n\n    def move(self, *args):\n        \"\"\"Move an item TAGORID given in ARGS.\"\"\"\n        self.tk.call((self._w, 'move') + args)\n\n    def moveto(self, tagOrId, x='', y=''):\n        \"\"\"Move the items given by TAGORID in the canvas coordinate\n        space so that the first coordinate pair of the bottommost\n        item with tag TAGORID is located at position (X,Y).\n        X and Y may be the empty string, in which case the\n        corresponding coordinate will be unchanged. All items matching\n        TAGORID remain in the same positions relative to each other.\"\"\"\n        self.tk.call(self._w, 'moveto', tagOrId, x, y)\n\n    def postscript(self, cnf={}, **kw):\n        \"\"\"Print the contents of the canvas to a postscript\n        file. Valid options: colormap, colormode, file, fontmap,\n        height, pageanchor, pageheight, pagewidth, pagex, pagey,\n        rotate, width, x, y.\"\"\"\n        return self.tk.call((self._w, 'postscript') +\n                    self._options(cnf, kw))\n\n    def tag_raise(self, *args):\n        \"\"\"Raise an item TAGORID given in ARGS\n        (optional above another item).\"\"\"\n        self.tk.call((self._w, 'raise') + args)\n\n    lift = tkraise = tag_raise\n\n    def scale(self, *args):\n        \"\"\"Scale item TAGORID with XORIGIN, YORIGIN, XSCALE, YSCALE.\"\"\"\n        self.tk.call((self._w, 'scale') + args)\n\n    def scan_mark(self, x, y):\n        \"\"\"Remember the current X, Y coordinates.\"\"\"\n        self.tk.call(self._w, 'scan', 'mark', x, y)\n\n    def scan_dragto(self, x, y, gain=10):\n        \"\"\"Adjust the view of the canvas to GAIN times the\n        difference between X and Y and the coordinates given in\n        scan_mark.\"\"\"\n        self.tk.call(self._w, 'scan', 'dragto', x, y, gain)\n\n    def select_adjust(self, tagOrId, index):\n        \"\"\"Adjust the end of the selection near the cursor of an item TAGORID to index.\"\"\"\n        self.tk.call(self._w, 'select', 'adjust', tagOrId, index)\n\n    def select_clear(self):\n        \"\"\"Clear the selection if it is in this widget.\"\"\"\n        self.tk.call(self._w, 'select', 'clear')\n\n    def select_from(self, tagOrId, index):\n        \"\"\"Set the fixed end of a selection in item TAGORID to INDEX.\"\"\"\n        self.tk.call(self._w, 'select', 'from', tagOrId, index)\n\n    def select_item(self):\n        \"\"\"Return the item which has the selection.\"\"\"\n        return self.tk.call(self._w, 'select', 'item') or None\n\n    def select_to(self, tagOrId, index):\n        \"\"\"Set the variable end of a selection in item TAGORID to INDEX.\"\"\"\n        self.tk.call(self._w, 'select', 'to', tagOrId, index)\n\n    def type(self, tagOrId):\n        \"\"\"Return the type of the item TAGORID.\"\"\"\n        return self.tk.call(self._w, 'type', tagOrId) or None\n\n\nclass Checkbutton(Widget):\n    \"\"\"Checkbutton widget which is either in on- or off-state.\"\"\"\n\n    def __init__(self, master=None, cnf={}, **kw):\n        \"\"\"Construct a checkbutton widget with the parent MASTER.\n\n        Valid resource names: activebackground, activeforeground, anchor,\n        background, bd, bg, bitmap, borderwidth, command, cursor,\n        disabledforeground, fg, font, foreground, height,\n        highlightbackground, highlightcolor, highlightthickness, image,\n        indicatoron, justify, offvalue, onvalue, padx, pady, relief,\n        selectcolor, selectimage, state, takefocus, text, textvariable,\n        underline, variable, width, wraplength.\"\"\"\n        Widget.__init__(self, master, 'checkbutton', cnf, kw)\n\n    def deselect(self):\n        \"\"\"Put the button in off-state.\"\"\"\n        self.tk.call(self._w, 'deselect')\n\n    def flash(self):\n        \"\"\"Flash the button.\"\"\"\n        self.tk.call(self._w, 'flash')\n\n    def invoke(self):\n        \"\"\"Toggle the button and invoke a command if given as resource.\"\"\"\n        return self.tk.call(self._w, 'invoke')\n\n    def select(self):\n        \"\"\"Put the button in on-state.\"\"\"\n        self.tk.call(self._w, 'select')\n\n    def toggle(self):\n        \"\"\"Toggle the button.\"\"\"\n        self.tk.call(self._w, 'toggle')\n\n\nclass Entry(Widget, XView):\n    \"\"\"Entry widget which allows displaying simple text.\"\"\"\n\n    def __init__(self, master=None, cnf={}, **kw):\n        \"\"\"Construct an entry widget with the parent MASTER.\n\n        Valid resource names: background, bd, bg, borderwidth, cursor,\n        exportselection, fg, font, foreground, highlightbackground,\n        highlightcolor, highlightthickness, insertbackground,\n        insertborderwidth, insertofftime, insertontime, insertwidth,\n        invalidcommand, invcmd, justify, relief, selectbackground,\n        selectborderwidth, selectforeground, show, state, takefocus,\n        textvariable, validate, validatecommand, vcmd, width,\n        xscrollcommand.\"\"\"\n        Widget.__init__(self, master, 'entry', cnf, kw)\n\n    def delete(self, first, last=None):\n        \"\"\"Delete text from FIRST to LAST (not included).\"\"\"\n        self.tk.call(self._w, 'delete', first, last)\n\n    def get(self):\n        \"\"\"Return the text.\"\"\"\n        return self.tk.call(self._w, 'get')\n\n    def icursor(self, index):\n        \"\"\"Insert cursor at INDEX.\"\"\"\n        self.tk.call(self._w, 'icursor', index)\n\n    def index(self, index):\n        \"\"\"Return position of cursor.\"\"\"\n        return self.tk.getint(self.tk.call(\n            self._w, 'index', index))\n\n    def insert(self, index, string):\n        \"\"\"Insert STRING at INDEX.\"\"\"\n        self.tk.call(self._w, 'insert', index, string)\n\n    def scan_mark(self, x):\n        \"\"\"Remember the current X, Y coordinates.\"\"\"\n        self.tk.call(self._w, 'scan', 'mark', x)\n\n    def scan_dragto(self, x):\n        \"\"\"Adjust the view of the canvas to 10 times the\n        difference between X and Y and the coordinates given in\n        scan_mark.\"\"\"\n        self.tk.call(self._w, 'scan', 'dragto', x)\n\n    def selection_adjust(self, index):\n        \"\"\"Adjust the end of the selection near the cursor to INDEX.\"\"\"\n        self.tk.call(self._w, 'selection', 'adjust', index)\n\n    select_adjust = selection_adjust\n\n    def selection_clear(self):\n        \"\"\"Clear the selection if it is in this widget.\"\"\"\n        self.tk.call(self._w, 'selection', 'clear')\n\n    select_clear = selection_clear\n\n    def selection_from(self, index):\n        \"\"\"Set the fixed end of a selection to INDEX.\"\"\"\n        self.tk.call(self._w, 'selection', 'from', index)\n\n    select_from = selection_from\n\n    def selection_present(self):\n        \"\"\"Return True if there are characters selected in the entry, False\n        otherwise.\"\"\"\n        return self.tk.getboolean(\n            self.tk.call(self._w, 'selection', 'present'))\n\n    select_present = selection_present\n\n    def selection_range(self, start, end):\n        \"\"\"Set the selection from START to END (not included).\"\"\"\n        self.tk.call(self._w, 'selection', 'range', start, end)\n\n    select_range = selection_range\n\n    def selection_to(self, index):\n        \"\"\"Set the variable end of a selection to INDEX.\"\"\"\n        self.tk.call(self._w, 'selection', 'to', index)\n\n    select_to = selection_to\n\n\nclass Frame(Widget):\n    \"\"\"Frame widget which may contain other widgets and can have a 3D border.\"\"\"\n\n    def __init__(self, master=None, cnf={}, **kw):\n        \"\"\"Construct a frame widget with the parent MASTER.\n\n        Valid resource names: background, bd, bg, borderwidth, class,\n        colormap, container, cursor, height, highlightbackground,\n        highlightcolor, highlightthickness, relief, takefocus, visual, width.\"\"\"\n        cnf = _cnfmerge((cnf, kw))\n        extra = ()\n        if 'class_' in cnf:\n            extra = ('-class', cnf['class_'])\n            del cnf['class_']\n        elif 'class' in cnf:\n            extra = ('-class', cnf['class'])\n            del cnf['class']\n        Widget.__init__(self, master, 'frame', cnf, {}, extra)\n\n\nclass Label(Widget):\n    \"\"\"Label widget which can display text and bitmaps.\"\"\"\n\n    def __init__(self, master=None, cnf={}, **kw):\n        \"\"\"Construct a label widget with the parent MASTER.\n\n        STANDARD OPTIONS\n\n            activebackground, activeforeground, anchor,\n            background, bitmap, borderwidth, cursor,\n            disabledforeground, font, foreground,\n            highlightbackground, highlightcolor,\n            highlightthickness, image, justify,\n            padx, pady, relief, takefocus, text,\n            textvariable, underline, wraplength\n\n        WIDGET-SPECIFIC OPTIONS\n\n            height, state, width\n\n        \"\"\"\n        Widget.__init__(self, master, 'label', cnf, kw)\n\n\nclass Listbox(Widget, XView, YView):\n    \"\"\"Listbox widget which can display a list of strings.\"\"\"\n\n    def __init__(self, master=None, cnf={}, **kw):\n        \"\"\"Construct a listbox widget with the parent MASTER.\n\n        Valid resource names: background, bd, bg, borderwidth, cursor,\n        exportselection, fg, font, foreground, height, highlightbackground,\n        highlightcolor, highlightthickness, relief, selectbackground,\n        selectborderwidth, selectforeground, selectmode, setgrid, takefocus,\n        width, xscrollcommand, yscrollcommand, listvariable.\"\"\"\n        Widget.__init__(self, master, 'listbox', cnf, kw)\n\n    def activate(self, index):\n        \"\"\"Activate item identified by INDEX.\"\"\"\n        self.tk.call(self._w, 'activate', index)\n\n    def bbox(self, index):\n        \"\"\"Return a tuple of X1,Y1,X2,Y2 coordinates for a rectangle\n        which encloses the item identified by the given index.\"\"\"\n        return self._getints(self.tk.call(self._w, 'bbox', index)) or None\n\n    def curselection(self):\n        \"\"\"Return the indices of currently selected item.\"\"\"\n        return self._getints(self.tk.call(self._w, 'curselection')) or ()\n\n    def delete(self, first, last=None):\n        \"\"\"Delete items from FIRST to LAST (included).\"\"\"\n        self.tk.call(self._w, 'delete', first, last)\n\n    def get(self, first, last=None):\n        \"\"\"Get list of items from FIRST to LAST (included).\"\"\"\n        if last is not None:\n            return self.tk.splitlist(self.tk.call(\n                self._w, 'get', first, last))\n        else:\n            return self.tk.call(self._w, 'get', first)\n\n    def index(self, index):\n        \"\"\"Return index of item identified with INDEX.\"\"\"\n        i = self.tk.call(self._w, 'index', index)\n        if i == 'none': return None\n        return self.tk.getint(i)\n\n    def insert(self, index, *elements):\n        \"\"\"Insert ELEMENTS at INDEX.\"\"\"\n        self.tk.call((self._w, 'insert', index) + elements)\n\n    def nearest(self, y):\n        \"\"\"Get index of item which is nearest to y coordinate Y.\"\"\"\n        return self.tk.getint(self.tk.call(\n            self._w, 'nearest', y))\n\n    def scan_mark(self, x, y):\n        \"\"\"Remember the current X, Y coordinates.\"\"\"\n        self.tk.call(self._w, 'scan', 'mark', x, y)\n\n    def scan_dragto(self, x, y):\n        \"\"\"Adjust the view of the listbox to 10 times the\n        difference between X and Y and the coordinates given in\n        scan_mark.\"\"\"\n        self.tk.call(self._w, 'scan', 'dragto', x, y)\n\n    def see(self, index):\n        \"\"\"Scroll such that INDEX is visible.\"\"\"\n        self.tk.call(self._w, 'see', index)\n\n    def selection_anchor(self, index):\n        \"\"\"Set the fixed end oft the selection to INDEX.\"\"\"\n        self.tk.call(self._w, 'selection', 'anchor', index)\n\n    select_anchor = selection_anchor\n\n    def selection_clear(self, first, last=None):\n        \"\"\"Clear the selection from FIRST to LAST (included).\"\"\"\n        self.tk.call(self._w,\n                 'selection', 'clear', first, last)\n\n    select_clear = selection_clear\n\n    def selection_includes(self, index):\n        \"\"\"Return True if INDEX is part of the selection.\"\"\"\n        return self.tk.getboolean(self.tk.call(\n            self._w, 'selection', 'includes', index))\n\n    select_includes = selection_includes\n\n    def selection_set(self, first, last=None):\n        \"\"\"Set the selection from FIRST to LAST (included) without\n        changing the currently selected elements.\"\"\"\n        self.tk.call(self._w, 'selection', 'set', first, last)\n\n    select_set = selection_set\n\n    def size(self):\n        \"\"\"Return the number of elements in the listbox.\"\"\"\n        return self.tk.getint(self.tk.call(self._w, 'size'))\n\n    def itemcget(self, index, option):\n        \"\"\"Return the resource value for an ITEM and an OPTION.\"\"\"\n        return self.tk.call(\n            (self._w, 'itemcget') + (index, '-'+option))\n\n    def itemconfigure(self, index, cnf=None, **kw):\n        \"\"\"Configure resources of an ITEM.\n\n        The values for resources are specified as keyword arguments.\n        To get an overview about the allowed keyword arguments\n        call the method without arguments.\n        Valid resource names: background, bg, foreground, fg,\n        selectbackground, selectforeground.\"\"\"\n        return self._configure(('itemconfigure', index), cnf, kw)\n\n    itemconfig = itemconfigure\n\n\nclass Menu(Widget):\n    \"\"\"Menu widget which allows displaying menu bars, pull-down menus and pop-up menus.\"\"\"\n\n    def __init__(self, master=None, cnf={}, **kw):\n        \"\"\"Construct menu widget with the parent MASTER.\n\n        Valid resource names: activebackground, activeborderwidth,\n        activeforeground, background, bd, bg, borderwidth, cursor,\n        disabledforeground, fg, font, foreground, postcommand, relief,\n        selectcolor, takefocus, tearoff, tearoffcommand, title, type.\"\"\"\n        Widget.__init__(self, master, 'menu', cnf, kw)\n\n    def tk_popup(self, x, y, entry=\"\"):\n        \"\"\"Post the menu at position X,Y with entry ENTRY.\"\"\"\n        self.tk.call('tk_popup', self._w, x, y, entry)\n\n    def activate(self, index):\n        \"\"\"Activate entry at INDEX.\"\"\"\n        self.tk.call(self._w, 'activate', index)\n\n    def add(self, itemType, cnf={}, **kw):\n        \"\"\"Internal function.\"\"\"\n        self.tk.call((self._w, 'add', itemType) +\n                 self._options(cnf, kw))\n\n    def add_cascade(self, cnf={}, **kw):\n        \"\"\"Add hierarchical menu item.\"\"\"\n        self.add('cascade', cnf or kw)\n\n    def add_checkbutton(self, cnf={}, **kw):\n        \"\"\"Add checkbutton menu item.\"\"\"\n        self.add('checkbutton', cnf or kw)\n\n    def add_command(self, cnf={}, **kw):\n        \"\"\"Add command menu item.\"\"\"\n        self.add('command', cnf or kw)\n\n    def add_radiobutton(self, cnf={}, **kw):\n        \"\"\"Addd radio menu item.\"\"\"\n        self.add('radiobutton', cnf or kw)\n\n    def add_separator(self, cnf={}, **kw):\n        \"\"\"Add separator.\"\"\"\n        self.add('separator', cnf or kw)\n\n    def insert(self, index, itemType, cnf={}, **kw):\n        \"\"\"Internal function.\"\"\"\n        self.tk.call((self._w, 'insert', index, itemType) +\n                 self._options(cnf, kw))\n\n    def insert_cascade(self, index, cnf={}, **kw):\n        \"\"\"Add hierarchical menu item at INDEX.\"\"\"\n        self.insert(index, 'cascade', cnf or kw)\n\n    def insert_checkbutton(self, index, cnf={}, **kw):\n        \"\"\"Add checkbutton menu item at INDEX.\"\"\"\n        self.insert(index, 'checkbutton', cnf or kw)\n\n    def insert_command(self, index, cnf={}, **kw):\n        \"\"\"Add command menu item at INDEX.\"\"\"\n        self.insert(index, 'command', cnf or kw)\n\n    def insert_radiobutton(self, index, cnf={}, **kw):\n        \"\"\"Addd radio menu item at INDEX.\"\"\"\n        self.insert(index, 'radiobutton', cnf or kw)\n\n    def insert_separator(self, index, cnf={}, **kw):\n        \"\"\"Add separator at INDEX.\"\"\"\n        self.insert(index, 'separator', cnf or kw)\n\n    def delete(self, index1, index2=None):\n        \"\"\"Delete menu items between INDEX1 and INDEX2 (included).\"\"\"\n        if index2 is None:\n            index2 = index1\n\n        num_index1, num_index2 = self.index(index1), self.index(index2)\n        if (num_index1 is None) or (num_index2 is None):\n            num_index1, num_index2 = 0, -1\n\n        for i in range(num_index1, num_index2 + 1):\n            if 'command' in self.entryconfig(i):\n                c = str(self.entrycget(i, 'command'))\n                if c:\n                    self.deletecommand(c)\n        self.tk.call(self._w, 'delete', index1, index2)\n\n    def entrycget(self, index, option):\n        \"\"\"Return the resource value of a menu item for OPTION at INDEX.\"\"\"\n        return self.tk.call(self._w, 'entrycget', index, '-' + option)\n\n    def entryconfigure(self, index, cnf=None, **kw):\n        \"\"\"Configure a menu item at INDEX.\"\"\"\n        return self._configure(('entryconfigure', index), cnf, kw)\n\n    entryconfig = entryconfigure\n\n    def index(self, index):\n        \"\"\"Return the index of a menu item identified by INDEX.\"\"\"\n        i = self.tk.call(self._w, 'index', index)\n        if i == 'none': return None\n        return self.tk.getint(i)\n\n    def invoke(self, index):\n        \"\"\"Invoke a menu item identified by INDEX and execute\n        the associated command.\"\"\"\n        return self.tk.call(self._w, 'invoke', index)\n\n    def post(self, x, y):\n        \"\"\"Display a menu at position X,Y.\"\"\"\n        self.tk.call(self._w, 'post', x, y)\n\n    def type(self, index):\n        \"\"\"Return the type of the menu item at INDEX.\"\"\"\n        return self.tk.call(self._w, 'type', index)\n\n    def unpost(self):\n        \"\"\"Unmap a menu.\"\"\"\n        self.tk.call(self._w, 'unpost')\n\n    def xposition(self, index): # new in Tk 8.5\n        \"\"\"Return the x-position of the leftmost pixel of the menu item\n        at INDEX.\"\"\"\n        return self.tk.getint(self.tk.call(self._w, 'xposition', index))\n\n    def yposition(self, index):\n        \"\"\"Return the y-position of the topmost pixel of the menu item at INDEX.\"\"\"\n        return self.tk.getint(self.tk.call(\n            self._w, 'yposition', index))\n\n\nclass Menubutton(Widget):\n    \"\"\"Menubutton widget, obsolete since Tk8.0.\"\"\"\n\n    def __init__(self, master=None, cnf={}, **kw):\n        Widget.__init__(self, master, 'menubutton', cnf, kw)\n\n\nclass Message(Widget):\n    \"\"\"Message widget to display multiline text. Obsolete since Label does it too.\"\"\"\n\n    def __init__(self, master=None, cnf={}, **kw):\n        Widget.__init__(self, master, 'message', cnf, kw)\n\n\nclass Radiobutton(Widget):\n    \"\"\"Radiobutton widget which shows only one of several buttons in on-state.\"\"\"\n\n    def __init__(self, master=None, cnf={}, **kw):\n        \"\"\"Construct a radiobutton widget with the parent MASTER.\n\n        Valid resource names: activebackground, activeforeground, anchor,\n        background, bd, bg, bitmap, borderwidth, command, cursor,\n        disabledforeground, fg, font, foreground, height,\n        highlightbackground, highlightcolor, highlightthickness, image,\n        indicatoron, justify, padx, pady, relief, selectcolor, selectimage,\n        state, takefocus, text, textvariable, underline, value, variable,\n        width, wraplength.\"\"\"\n        Widget.__init__(self, master, 'radiobutton', cnf, kw)\n\n    def deselect(self):\n        \"\"\"Put the button in off-state.\"\"\"\n\n        self.tk.call(self._w, 'deselect')\n\n    def flash(self):\n        \"\"\"Flash the button.\"\"\"\n        self.tk.call(self._w, 'flash')\n\n    def invoke(self):\n        \"\"\"Toggle the button and invoke a command if given as resource.\"\"\"\n        return self.tk.call(self._w, 'invoke')\n\n    def select(self):\n        \"\"\"Put the button in on-state.\"\"\"\n        self.tk.call(self._w, 'select')\n\n\nclass Scale(Widget):\n    \"\"\"Scale widget which can display a numerical scale.\"\"\"\n\n    def __init__(self, master=None, cnf={}, **kw):\n        \"\"\"Construct a scale widget with the parent MASTER.\n\n        Valid resource names: activebackground, background, bigincrement, bd,\n        bg, borderwidth, command, cursor, digits, fg, font, foreground, from,\n        highlightbackground, highlightcolor, highlightthickness, label,\n        length, orient, relief, repeatdelay, repeatinterval, resolution,\n        showvalue, sliderlength, sliderrelief, state, takefocus,\n        tickinterval, to, troughcolor, variable, width.\"\"\"\n        Widget.__init__(self, master, 'scale', cnf, kw)\n\n    def get(self):\n        \"\"\"Get the current value as integer or float.\"\"\"\n        value = self.tk.call(self._w, 'get')\n        try:\n            return self.tk.getint(value)\n        except (ValueError, TypeError, TclError):\n            return self.tk.getdouble(value)\n\n    def set(self, value):\n        \"\"\"Set the value to VALUE.\"\"\"\n        self.tk.call(self._w, 'set', value)\n\n    def coords(self, value=None):\n        \"\"\"Return a tuple (X,Y) of the point along the centerline of the\n        trough that corresponds to VALUE or the current value if None is\n        given.\"\"\"\n\n        return self._getints(self.tk.call(self._w, 'coords', value))\n\n    def identify(self, x, y):\n        \"\"\"Return where the point X,Y lies. Valid return values are \"slider\",\n        \"though1\" and \"though2\".\"\"\"\n        return self.tk.call(self._w, 'identify', x, y)\n\n\nclass Scrollbar(Widget):\n    \"\"\"Scrollbar widget which displays a slider at a certain position.\"\"\"\n\n    def __init__(self, master=None, cnf={}, **kw):\n        \"\"\"Construct a scrollbar widget with the parent MASTER.\n\n        Valid resource names: activebackground, activerelief,\n        background, bd, bg, borderwidth, command, cursor,\n        elementborderwidth, highlightbackground,\n        highlightcolor, highlightthickness, jump, orient,\n        relief, repeatdelay, repeatinterval, takefocus,\n        troughcolor, width.\"\"\"\n        Widget.__init__(self, master, 'scrollbar', cnf, kw)\n\n    def activate(self, index=None):\n        \"\"\"Marks the element indicated by index as active.\n        The only index values understood by this method are \"arrow1\",\n        \"slider\", or \"arrow2\".  If any other value is specified then no\n        element of the scrollbar will be active.  If index is not specified,\n        the method returns the name of the element that is currently active,\n        or None if no element is active.\"\"\"\n        return self.tk.call(self._w, 'activate', index) or None\n\n    def delta(self, deltax, deltay):\n        \"\"\"Return the fractional change of the scrollbar setting if it\n        would be moved by DELTAX or DELTAY pixels.\"\"\"\n        return self.tk.getdouble(\n            self.tk.call(self._w, 'delta', deltax, deltay))\n\n    def fraction(self, x, y):\n        \"\"\"Return the fractional value which corresponds to a slider\n        position of X,Y.\"\"\"\n        return self.tk.getdouble(self.tk.call(self._w, 'fraction', x, y))\n\n    def identify(self, x, y):\n        \"\"\"Return the element under position X,Y as one of\n        \"arrow1\",\"slider\",\"arrow2\" or \"\".\"\"\"\n        return self.tk.call(self._w, 'identify', x, y)\n\n    def get(self):\n        \"\"\"Return the current fractional values (upper and lower end)\n        of the slider position.\"\"\"\n        return self._getdoubles(self.tk.call(self._w, 'get'))\n\n    def set(self, first, last):\n        \"\"\"Set the fractional values of the slider position (upper and\n        lower ends as value between 0 and 1).\"\"\"\n        self.tk.call(self._w, 'set', first, last)\n\n\nclass Text(Widget, XView, YView):\n    \"\"\"Text widget which can display text in various forms.\"\"\"\n\n    def __init__(self, master=None, cnf={}, **kw):\n        \"\"\"Construct a text widget with the parent MASTER.\n\n        STANDARD OPTIONS\n\n            background, borderwidth, cursor,\n            exportselection, font, foreground,\n            highlightbackground, highlightcolor,\n            highlightthickness, insertbackground,\n            insertborderwidth, insertofftime,\n            insertontime, insertwidth, padx, pady,\n            relief, selectbackground,\n            selectborderwidth, selectforeground,\n            setgrid, takefocus,\n            xscrollcommand, yscrollcommand,\n\n        WIDGET-SPECIFIC OPTIONS\n\n            autoseparators, height, maxundo,\n            spacing1, spacing2, spacing3,\n            state, tabs, undo, width, wrap,\n\n        \"\"\"\n        Widget.__init__(self, master, 'text', cnf, kw)\n\n    def bbox(self, index):\n        \"\"\"Return a tuple of (x,y,width,height) which gives the bounding\n        box of the visible part of the character at the given index.\"\"\"\n        return self._getints(\n                self.tk.call(self._w, 'bbox', index)) or None\n\n    def compare(self, index1, op, index2):\n        \"\"\"Return whether between index INDEX1 and index INDEX2 the\n        relation OP is satisfied. OP is one of <, <=, ==, >=, >, or !=.\"\"\"\n        return self.tk.getboolean(self.tk.call(\n            self._w, 'compare', index1, op, index2))\n\n    def count(self, index1, index2, *args): # new in Tk 8.5\n        \"\"\"Counts the number of relevant things between the two indices.\n        If index1 is after index2, the result will be a negative number\n        (and this holds for each of the possible options).\n\n        The actual items which are counted depends on the options given by\n        args. The result is a list of integers, one for the result of each\n        counting option given. Valid counting options are \"chars\",\n        \"displaychars\", \"displayindices\", \"displaylines\", \"indices\",\n        \"lines\", \"xpixels\" and \"ypixels\". There is an additional possible\n        option \"update\", which if given then all subsequent options ensure\n        that any possible out of date information is recalculated.\"\"\"\n        args = ['-%s' % arg for arg in args if not arg.startswith('-')]\n        args += [index1, index2]\n        res = self.tk.call(self._w, 'count', *args) or None\n        if res is not None and len(args) <= 3:\n            return (res, )\n        else:\n            return res\n\n    def debug(self, boolean=None):\n        \"\"\"Turn on the internal consistency checks of the B-Tree inside the text\n        widget according to BOOLEAN.\"\"\"\n        if boolean is None:\n            return self.tk.getboolean(self.tk.call(self._w, 'debug'))\n        self.tk.call(self._w, 'debug', boolean)\n\n    def delete(self, index1, index2=None):\n        \"\"\"Delete the characters between INDEX1 and INDEX2 (not included).\"\"\"\n        self.tk.call(self._w, 'delete', index1, index2)\n\n    def dlineinfo(self, index):\n        \"\"\"Return tuple (x,y,width,height,baseline) giving the bounding box\n        and baseline position of the visible part of the line containing\n        the character at INDEX.\"\"\"\n        return self._getints(self.tk.call(self._w, 'dlineinfo', index))\n\n    def dump(self, index1, index2=None, command=None, **kw):\n        \"\"\"Return the contents of the widget between index1 and index2.\n\n        The type of contents returned in filtered based on the keyword\n        parameters; if 'all', 'image', 'mark', 'tag', 'text', or 'window' are\n        given and true, then the corresponding items are returned. The result\n        is a list of triples of the form (key, value, index). If none of the\n        keywords are true then 'all' is used by default.\n\n        If the 'command' argument is given, it is called once for each element\n        of the list of triples, with the values of each triple serving as the\n        arguments to the function. In this case the list is not returned.\"\"\"\n        args = []\n        func_name = None\n        result = None\n        if not command:\n            # Never call the dump command without the -command flag, since the\n            # output could involve Tcl quoting and would be a pain to parse\n            # right. Instead just set the command to build a list of triples\n            # as if we had done the parsing.\n            result = []\n            def append_triple(key, value, index, result=result):\n                result.append((key, value, index))\n            command = append_triple\n        try:\n            if not isinstance(command, str):\n                func_name = command = self._register(command)\n            args += [\"-command\", command]\n            for key in kw:\n                if kw[key]: args.append(\"-\" + key)\n            args.append(index1)\n            if index2:\n                args.append(index2)\n            self.tk.call(self._w, \"dump\", *args)\n            return result\n        finally:\n            if func_name:\n                self.deletecommand(func_name)\n\n    ## new in tk8.4\n    def edit(self, *args):\n        \"\"\"Internal method\n\n        This method controls the undo mechanism and\n        the modified flag. The exact behavior of the\n        command depends on the option argument that\n        follows the edit argument. The following forms\n        of the command are currently supported:\n\n        edit_modified, edit_redo, edit_reset, edit_separator\n        and edit_undo\n\n        \"\"\"\n        return self.tk.call(self._w, 'edit', *args)\n\n    def edit_modified(self, arg=None):\n        \"\"\"Get or Set the modified flag\n\n        If arg is not specified, returns the modified\n        flag of the widget. The insert, delete, edit undo and\n        edit redo commands or the user can set or clear the\n        modified flag. If boolean is specified, sets the\n        modified flag of the widget to arg.\n        \"\"\"\n        return self.edit(\"modified\", arg)\n\n    def edit_redo(self):\n        \"\"\"Redo the last undone edit\n\n        When the undo option is true, reapplies the last\n        undone edits provided no other edits were done since\n        then. Generates an error when the redo stack is empty.\n        Does nothing when the undo option is false.\n        \"\"\"\n        return self.edit(\"redo\")\n\n    def edit_reset(self):\n        \"\"\"Clears the undo and redo stacks\n        \"\"\"\n        return self.edit(\"reset\")\n\n    def edit_separator(self):\n        \"\"\"Inserts a separator (boundary) on the undo stack.\n\n        Does nothing when the undo option is false\n        \"\"\"\n        return self.edit(\"separator\")\n\n    def edit_undo(self):\n        \"\"\"Undoes the last edit action\n\n        If the undo option is true. An edit action is defined\n        as all the insert and delete commands that are recorded\n        on the undo stack in between two separators. Generates\n        an error when the undo stack is empty. Does nothing\n        when the undo option is false\n        \"\"\"\n        return self.edit(\"undo\")\n\n    def get(self, index1, index2=None):\n        \"\"\"Return the text from INDEX1 to INDEX2 (not included).\"\"\"\n        return self.tk.call(self._w, 'get', index1, index2)\n    # (Image commands are new in 8.0)\n\n    def image_cget(self, index, option):\n        \"\"\"Return the value of OPTION of an embedded image at INDEX.\"\"\"\n        if option[:1] != \"-\":\n            option = \"-\" + option\n        if option[-1:] == \"_\":\n            option = option[:-1]\n        return self.tk.call(self._w, \"image\", \"cget\", index, option)\n\n    def image_configure(self, index, cnf=None, **kw):\n        \"\"\"Configure an embedded image at INDEX.\"\"\"\n        return self._configure(('image', 'configure', index), cnf, kw)\n\n    def image_create(self, index, cnf={}, **kw):\n        \"\"\"Create an embedded image at INDEX.\"\"\"\n        return self.tk.call(\n                 self._w, \"image\", \"create\", index,\n                 *self._options(cnf, kw))\n\n    def image_names(self):\n        \"\"\"Return all names of embedded images in this widget.\"\"\"\n        return self.tk.call(self._w, \"image\", \"names\")\n\n    def index(self, index):\n        \"\"\"Return the index in the form line.char for INDEX.\"\"\"\n        return str(self.tk.call(self._w, 'index', index))\n\n    def insert(self, index, chars, *args):\n        \"\"\"Insert CHARS before the characters at INDEX. An additional\n        tag can be given in ARGS. Additional CHARS and tags can follow in ARGS.\"\"\"\n        self.tk.call((self._w, 'insert', index, chars) + args)\n\n    def mark_gravity(self, markName, direction=None):\n        \"\"\"Change the gravity of a mark MARKNAME to DIRECTION (LEFT or RIGHT).\n        Return the current value if None is given for DIRECTION.\"\"\"\n        return self.tk.call(\n            (self._w, 'mark', 'gravity', markName, direction))\n\n    def mark_names(self):\n        \"\"\"Return all mark names.\"\"\"\n        return self.tk.splitlist(self.tk.call(\n            self._w, 'mark', 'names'))\n\n    def mark_set(self, markName, index):\n        \"\"\"Set mark MARKNAME before the character at INDEX.\"\"\"\n        self.tk.call(self._w, 'mark', 'set', markName, index)\n\n    def mark_unset(self, *markNames):\n        \"\"\"Delete all marks in MARKNAMES.\"\"\"\n        self.tk.call((self._w, 'mark', 'unset') + markNames)\n\n    def mark_next(self, index):\n        \"\"\"Return the name of the next mark after INDEX.\"\"\"\n        return self.tk.call(self._w, 'mark', 'next', index) or None\n\n    def mark_previous(self, index):\n        \"\"\"Return the name of the previous mark before INDEX.\"\"\"\n        return self.tk.call(self._w, 'mark', 'previous', index) or None\n\n    def peer_create(self, newPathName, cnf={}, **kw): # new in Tk 8.5\n        \"\"\"Creates a peer text widget with the given newPathName, and any\n        optional standard configuration options. By default the peer will\n        have the same start and end line as the parent widget, but\n        these can be overridden with the standard configuration options.\"\"\"\n        self.tk.call(self._w, 'peer', 'create', newPathName,\n            *self._options(cnf, kw))\n\n    def peer_names(self): # new in Tk 8.5\n        \"\"\"Returns a list of peers of this widget (this does not include\n        the widget itself).\"\"\"\n        return self.tk.splitlist(self.tk.call(self._w, 'peer', 'names'))\n\n    def replace(self, index1, index2, chars, *args): # new in Tk 8.5\n        \"\"\"Replaces the range of characters between index1 and index2 with\n        the given characters and tags specified by args.\n\n        See the method insert for some more information about args, and the\n        method delete for information about the indices.\"\"\"\n        self.tk.call(self._w, 'replace', index1, index2, chars, *args)\n\n    def scan_mark(self, x, y):\n        \"\"\"Remember the current X, Y coordinates.\"\"\"\n        self.tk.call(self._w, 'scan', 'mark', x, y)\n\n    def scan_dragto(self, x, y):\n        \"\"\"Adjust the view of the text to 10 times the\n        difference between X and Y and the coordinates given in\n        scan_mark.\"\"\"\n        self.tk.call(self._w, 'scan', 'dragto', x, y)\n\n    def search(self, pattern, index, stopindex=None,\n           forwards=None, backwards=None, exact=None,\n           regexp=None, nocase=None, count=None, elide=None):\n        \"\"\"Search PATTERN beginning from INDEX until STOPINDEX.\n        Return the index of the first character of a match or an\n        empty string.\"\"\"\n        args = [self._w, 'search']\n        if forwards: args.append('-forwards')\n        if backwards: args.append('-backwards')\n        if exact: args.append('-exact')\n        if regexp: args.append('-regexp')\n        if nocase: args.append('-nocase')\n        if elide: args.append('-elide')\n        if count: args.append('-count'); args.append(count)\n        if pattern and pattern[0] == '-': args.append('--')\n        args.append(pattern)\n        args.append(index)\n        if stopindex: args.append(stopindex)\n        return str(self.tk.call(tuple(args)))\n\n    def see(self, index):\n        \"\"\"Scroll such that the character at INDEX is visible.\"\"\"\n        self.tk.call(self._w, 'see', index)\n\n    def tag_add(self, tagName, index1, *args):\n        \"\"\"Add tag TAGNAME to all characters between INDEX1 and index2 in ARGS.\n        Additional pairs of indices may follow in ARGS.\"\"\"\n        self.tk.call(\n            (self._w, 'tag', 'add', tagName, index1) + args)\n\n    def tag_unbind(self, tagName, sequence, funcid=None):\n        \"\"\"Unbind for all characters with TAGNAME for event SEQUENCE  the\n        function identified with FUNCID.\"\"\"\n        self.tk.call(self._w, 'tag', 'bind', tagName, sequence, '')\n        if funcid:\n            self.deletecommand(funcid)\n\n    def tag_bind(self, tagName, sequence, func, add=None):\n        \"\"\"Bind to all characters with TAGNAME at event SEQUENCE a call to function FUNC.\n\n        An additional boolean parameter ADD specifies whether FUNC will be\n        called additionally to the other bound function or whether it will\n        replace the previous function. See bind for the return value.\"\"\"\n        return self._bind((self._w, 'tag', 'bind', tagName),\n                  sequence, func, add)\n\n    def tag_cget(self, tagName, option):\n        \"\"\"Return the value of OPTION for tag TAGNAME.\"\"\"\n        if option[:1] != '-':\n            option = '-' + option\n        if option[-1:] == '_':\n            option = option[:-1]\n        return self.tk.call(self._w, 'tag', 'cget', tagName, option)\n\n    def tag_configure(self, tagName, cnf=None, **kw):\n        \"\"\"Configure a tag TAGNAME.\"\"\"\n        return self._configure(('tag', 'configure', tagName), cnf, kw)\n\n    tag_config = tag_configure\n\n    def tag_delete(self, *tagNames):\n        \"\"\"Delete all tags in TAGNAMES.\"\"\"\n        self.tk.call((self._w, 'tag', 'delete') + tagNames)\n\n    def tag_lower(self, tagName, belowThis=None):\n        \"\"\"Change the priority of tag TAGNAME such that it is lower\n        than the priority of BELOWTHIS.\"\"\"\n        self.tk.call(self._w, 'tag', 'lower', tagName, belowThis)\n\n    def tag_names(self, index=None):\n        \"\"\"Return a list of all tag names.\"\"\"\n        return self.tk.splitlist(\n            self.tk.call(self._w, 'tag', 'names', index))\n\n    def tag_nextrange(self, tagName, index1, index2=None):\n        \"\"\"Return a list of start and end index for the first sequence of\n        characters between INDEX1 and INDEX2 which all have tag TAGNAME.\n        The text is searched forward from INDEX1.\"\"\"\n        return self.tk.splitlist(self.tk.call(\n            self._w, 'tag', 'nextrange', tagName, index1, index2))\n\n    def tag_prevrange(self, tagName, index1, index2=None):\n        \"\"\"Return a list of start and end index for the first sequence of\n        characters between INDEX1 and INDEX2 which all have tag TAGNAME.\n        The text is searched backwards from INDEX1.\"\"\"\n        return self.tk.splitlist(self.tk.call(\n            self._w, 'tag', 'prevrange', tagName, index1, index2))\n\n    def tag_raise(self, tagName, aboveThis=None):\n        \"\"\"Change the priority of tag TAGNAME such that it is higher\n        than the priority of ABOVETHIS.\"\"\"\n        self.tk.call(\n            self._w, 'tag', 'raise', tagName, aboveThis)\n\n    def tag_ranges(self, tagName):\n        \"\"\"Return a list of ranges of text which have tag TAGNAME.\"\"\"\n        return self.tk.splitlist(self.tk.call(\n            self._w, 'tag', 'ranges', tagName))\n\n    def tag_remove(self, tagName, index1, index2=None):\n        \"\"\"Remove tag TAGNAME from all characters between INDEX1 and INDEX2.\"\"\"\n        self.tk.call(\n            self._w, 'tag', 'remove', tagName, index1, index2)\n\n    def window_cget(self, index, option):\n        \"\"\"Return the value of OPTION of an embedded window at INDEX.\"\"\"\n        if option[:1] != '-':\n            option = '-' + option\n        if option[-1:] == '_':\n            option = option[:-1]\n        return self.tk.call(self._w, 'window', 'cget', index, option)\n\n    def window_configure(self, index, cnf=None, **kw):\n        \"\"\"Configure an embedded window at INDEX.\"\"\"\n        return self._configure(('window', 'configure', index), cnf, kw)\n\n    window_config = window_configure\n\n    def window_create(self, index, cnf={}, **kw):\n        \"\"\"Create a window at INDEX.\"\"\"\n        self.tk.call(\n              (self._w, 'window', 'create', index)\n              + self._options(cnf, kw))\n\n    def window_names(self):\n        \"\"\"Return all names of embedded windows in this widget.\"\"\"\n        return self.tk.splitlist(\n            self.tk.call(self._w, 'window', 'names'))\n\n    def yview_pickplace(self, *what):\n        \"\"\"Obsolete function, use see.\"\"\"\n        self.tk.call((self._w, 'yview', '-pickplace') + what)\n\n\nclass _setit:\n    \"\"\"Internal class. It wraps the command in the widget OptionMenu.\"\"\"\n\n    def __init__(self, var, value, callback=None):\n        self.__value = value\n        self.__var = var\n        self.__callback = callback\n\n    def __call__(self, *args):\n        self.__var.set(self.__value)\n        if self.__callback:\n            self.__callback(self.__value, *args)\n\n\nclass OptionMenu(Menubutton):\n    \"\"\"OptionMenu which allows the user to select a value from a menu.\"\"\"\n\n    def __init__(self, master, variable, value, *values, **kwargs):\n        \"\"\"Construct an optionmenu widget with the parent MASTER, with\n        the resource textvariable set to VARIABLE, the initially selected\n        value VALUE, the other menu values VALUES and an additional\n        keyword argument command.\"\"\"\n        kw = {\"borderwidth\": 2, \"textvariable\": variable,\n              \"indicatoron\": 1, \"relief\": RAISED, \"anchor\": \"c\",\n              \"highlightthickness\": 2}\n        Widget.__init__(self, master, \"menubutton\", kw)\n        self.widgetName = 'tk_optionMenu'\n        menu = self.__menu = Menu(self, name=\"menu\", tearoff=0)\n        self.menuname = menu._w\n        # 'command' is the only supported keyword\n        callback = kwargs.get('command')\n        if 'command' in kwargs:\n            del kwargs['command']\n        if kwargs:\n            raise TclError('unknown option -'+next(iter(kwargs)))\n        menu.add_command(label=value,\n                 command=_setit(variable, value, callback))\n        for v in values:\n            menu.add_command(label=v,\n                     command=_setit(variable, v, callback))\n        self[\"menu\"] = menu\n\n    def __getitem__(self, name):\n        if name == 'menu':\n            return self.__menu\n        return Widget.__getitem__(self, name)\n\n    def destroy(self):\n        \"\"\"Destroy this widget and the associated menu.\"\"\"\n        Menubutton.destroy(self)\n        self.__menu = None\n\n\nclass Image:\n    \"\"\"Base class for images.\"\"\"\n    _last_id = 0\n\n    def __init__(self, imgtype, name=None, cnf={}, master=None, **kw):\n        self.name = None\n        if not master:\n            master = _get_default_root('create image')\n        self.tk = getattr(master, 'tk', master)\n        if not name:\n            Image._last_id += 1\n            name = \"pyimage%r\" % (Image._last_id,) # tk itself would use image<x>\n        if kw and cnf: cnf = _cnfmerge((cnf, kw))\n        elif kw: cnf = kw\n        options = ()\n        for k, v in cnf.items():\n            if callable(v):\n                v = self._register(v)\n            options = options + ('-'+k, v)\n        self.tk.call(('image', 'create', imgtype, name,) + options)\n        self.name = name\n\n    def __str__(self): return self.name\n\n    def __del__(self):\n        if self.name:\n            try:\n                self.tk.call('image', 'delete', self.name)\n            except TclError:\n                # May happen if the root was destroyed\n                pass\n\n    def __setitem__(self, key, value):\n        self.tk.call(self.name, 'configure', '-'+key, value)\n\n    def __getitem__(self, key):\n        return self.tk.call(self.name, 'configure', '-'+key)\n\n    def configure(self, **kw):\n        \"\"\"Configure the image.\"\"\"\n        res = ()\n        for k, v in _cnfmerge(kw).items():\n            if v is not None:\n                if k[-1] == '_': k = k[:-1]\n                if callable(v):\n                    v = self._register(v)\n                res = res + ('-'+k, v)\n        self.tk.call((self.name, 'config') + res)\n\n    config = configure\n\n    def height(self):\n        \"\"\"Return the height of the image.\"\"\"\n        return self.tk.getint(\n            self.tk.call('image', 'height', self.name))\n\n    def type(self):\n        \"\"\"Return the type of the image, e.g. \"photo\" or \"bitmap\".\"\"\"\n        return self.tk.call('image', 'type', self.name)\n\n    def width(self):\n        \"\"\"Return the width of the image.\"\"\"\n        return self.tk.getint(\n            self.tk.call('image', 'width', self.name))\n\n\nclass PhotoImage(Image):\n    \"\"\"Widget which can display images in PGM, PPM, GIF, PNG format.\"\"\"\n\n    def __init__(self, name=None, cnf={}, master=None, **kw):\n        \"\"\"Create an image with NAME.\n\n        Valid resource names: data, format, file, gamma, height, palette,\n        width.\"\"\"\n        Image.__init__(self, 'photo', name, cnf, master, **kw)\n\n    def blank(self):\n        \"\"\"Display a transparent image.\"\"\"\n        self.tk.call(self.name, 'blank')\n\n    def cget(self, option):\n        \"\"\"Return the value of OPTION.\"\"\"\n        return self.tk.call(self.name, 'cget', '-' + option)\n    # XXX config\n\n    def __getitem__(self, key):\n        return self.tk.call(self.name, 'cget', '-' + key)\n    # XXX copy -from, -to, ...?\n\n    def copy(self):\n        \"\"\"Return a new PhotoImage with the same image as this widget.\"\"\"\n        destImage = PhotoImage(master=self.tk)\n        self.tk.call(destImage, 'copy', self.name)\n        return destImage\n\n    def zoom(self, x, y=''):\n        \"\"\"Return a new PhotoImage with the same image as this widget\n        but zoom it with a factor of x in the X direction and y in the Y\n        direction.  If y is not given, the default value is the same as x.\n        \"\"\"\n        destImage = PhotoImage(master=self.tk)\n        if y=='': y=x\n        self.tk.call(destImage, 'copy', self.name, '-zoom',x,y)\n        return destImage\n\n    def subsample(self, x, y=''):\n        \"\"\"Return a new PhotoImage based on the same image as this widget\n        but use only every Xth or Yth pixel.  If y is not given, the\n        default value is the same as x.\n        \"\"\"\n        destImage = PhotoImage(master=self.tk)\n        if y=='': y=x\n        self.tk.call(destImage, 'copy', self.name, '-subsample',x,y)\n        return destImage\n\n    def get(self, x, y):\n        \"\"\"Return the color (red, green, blue) of the pixel at X,Y.\"\"\"\n        return self.tk.call(self.name, 'get', x, y)\n\n    def put(self, data, to=None):\n        \"\"\"Put row formatted colors to image starting from\n        position TO, e.g. image.put(\"{red green} {blue yellow}\", to=(4,6))\"\"\"\n        args = (self.name, 'put', data)\n        if to:\n            if to[0] == '-to':\n                to = to[1:]\n            args = args + ('-to',) + tuple(to)\n        self.tk.call(args)\n    # XXX read\n\n    def write(self, filename, format=None, from_coords=None):\n        \"\"\"Write image to file FILENAME in FORMAT starting from\n        position FROM_COORDS.\"\"\"\n        args = (self.name, 'write', filename)\n        if format:\n            args = args + ('-format', format)\n        if from_coords:\n            args = args + ('-from',) + tuple(from_coords)\n        self.tk.call(args)\n\n    def transparency_get(self, x, y):\n        \"\"\"Return True if the pixel at x,y is transparent.\"\"\"\n        return self.tk.getboolean(self.tk.call(\n            self.name, 'transparency', 'get', x, y))\n\n    def transparency_set(self, x, y, boolean):\n        \"\"\"Set the transparency of the pixel at x,y.\"\"\"\n        self.tk.call(self.name, 'transparency', 'set', x, y, boolean)\n\n\nclass BitmapImage(Image):\n    \"\"\"Widget which can display images in XBM format.\"\"\"\n\n    def __init__(self, name=None, cnf={}, master=None, **kw):\n        \"\"\"Create a bitmap with NAME.\n\n        Valid resource names: background, data, file, foreground, maskdata, maskfile.\"\"\"\n        Image.__init__(self, 'bitmap', name, cnf, master, **kw)\n\n\ndef image_names():\n    tk = _get_default_root('use image_names()').tk\n    return tk.splitlist(tk.call('image', 'names'))\n\n\ndef image_types():\n    tk = _get_default_root('use image_types()').tk\n    return tk.splitlist(tk.call('image', 'types'))\n\n\nclass Spinbox(Widget, XView):\n    \"\"\"spinbox widget.\"\"\"\n\n    def __init__(self, master=None, cnf={}, **kw):\n        \"\"\"Construct a spinbox widget with the parent MASTER.\n\n        STANDARD OPTIONS\n\n            activebackground, background, borderwidth,\n            cursor, exportselection, font, foreground,\n            highlightbackground, highlightcolor,\n            highlightthickness, insertbackground,\n            insertborderwidth, insertofftime,\n            insertontime, insertwidth, justify, relief,\n            repeatdelay, repeatinterval,\n            selectbackground, selectborderwidth\n            selectforeground, takefocus, textvariable\n            xscrollcommand.\n\n        WIDGET-SPECIFIC OPTIONS\n\n            buttonbackground, buttoncursor,\n            buttondownrelief, buttonuprelief,\n            command, disabledbackground,\n            disabledforeground, format, from,\n            invalidcommand, increment,\n            readonlybackground, state, to,\n            validate, validatecommand values,\n            width, wrap,\n        \"\"\"\n        Widget.__init__(self, master, 'spinbox', cnf, kw)\n\n    def bbox(self, index):\n        \"\"\"Return a tuple of X1,Y1,X2,Y2 coordinates for a\n        rectangle which encloses the character given by index.\n\n        The first two elements of the list give the x and y\n        coordinates of the upper-left corner of the screen\n        area covered by the character (in pixels relative\n        to the widget) and the last two elements give the\n        width and height of the character, in pixels. The\n        bounding box may refer to a region outside the\n        visible area of the window.\n        \"\"\"\n        return self._getints(self.tk.call(self._w, 'bbox', index)) or None\n\n    def delete(self, first, last=None):\n        \"\"\"Delete one or more elements of the spinbox.\n\n        First is the index of the first character to delete,\n        and last is the index of the character just after\n        the last one to delete. If last isn't specified it\n        defaults to first+1, i.e. a single character is\n        deleted.  This command returns an empty string.\n        \"\"\"\n        return self.tk.call(self._w, 'delete', first, last)\n\n    def get(self):\n        \"\"\"Returns the spinbox's string\"\"\"\n        return self.tk.call(self._w, 'get')\n\n    def icursor(self, index):\n        \"\"\"Alter the position of the insertion cursor.\n\n        The insertion cursor will be displayed just before\n        the character given by index. Returns an empty string\n        \"\"\"\n        return self.tk.call(self._w, 'icursor', index)\n\n    def identify(self, x, y):\n        \"\"\"Returns the name of the widget at position x, y\n\n        Return value is one of: none, buttondown, buttonup, entry\n        \"\"\"\n        return self.tk.call(self._w, 'identify', x, y)\n\n    def index(self, index):\n        \"\"\"Returns the numerical index corresponding to index\n        \"\"\"\n        return self.tk.call(self._w, 'index', index)\n\n    def insert(self, index, s):\n        \"\"\"Insert string s at index\n\n         Returns an empty string.\n        \"\"\"\n        return self.tk.call(self._w, 'insert', index, s)\n\n    def invoke(self, element):\n        \"\"\"Causes the specified element to be invoked\n\n        The element could be buttondown or buttonup\n        triggering the action associated with it.\n        \"\"\"\n        return self.tk.call(self._w, 'invoke', element)\n\n    def scan(self, *args):\n        \"\"\"Internal function.\"\"\"\n        return self._getints(\n            self.tk.call((self._w, 'scan') + args)) or ()\n\n    def scan_mark(self, x):\n        \"\"\"Records x and the current view in the spinbox window;\n\n        used in conjunction with later scan dragto commands.\n        Typically this command is associated with a mouse button\n        press in the widget. It returns an empty string.\n        \"\"\"\n        return self.scan(\"mark\", x)\n\n    def scan_dragto(self, x):\n        \"\"\"Compute the difference between the given x argument\n        and the x argument to the last scan mark command\n\n        It then adjusts the view left or right by 10 times the\n        difference in x-coordinates. This command is typically\n        associated with mouse motion events in the widget, to\n        produce the effect of dragging the spinbox at high speed\n        through the window. The return value is an empty string.\n        \"\"\"\n        return self.scan(\"dragto\", x)\n\n    def selection(self, *args):\n        \"\"\"Internal function.\"\"\"\n        return self._getints(\n            self.tk.call((self._w, 'selection') + args)) or ()\n\n    def selection_adjust(self, index):\n        \"\"\"Locate the end of the selection nearest to the character\n        given by index,\n\n        Then adjust that end of the selection to be at index\n        (i.e including but not going beyond index). The other\n        end of the selection is made the anchor point for future\n        select to commands. If the selection isn't currently in\n        the spinbox, then a new selection is created to include\n        the characters between index and the most recent selection\n        anchor point, inclusive.\n        \"\"\"\n        return self.selection(\"adjust\", index)\n\n    def selection_clear(self):\n        \"\"\"Clear the selection\n\n        If the selection isn't in this widget then the\n        command has no effect.\n        \"\"\"\n        return self.selection(\"clear\")\n\n    def selection_element(self, element=None):\n        \"\"\"Sets or gets the currently selected element.\n\n        If a spinbutton element is specified, it will be\n        displayed depressed.\n        \"\"\"\n        return self.tk.call(self._w, 'selection', 'element', element)\n\n    def selection_from(self, index):\n        \"\"\"Set the fixed end of a selection to INDEX.\"\"\"\n        self.selection('from', index)\n\n    def selection_present(self):\n        \"\"\"Return True if there are characters selected in the spinbox, False\n        otherwise.\"\"\"\n        return self.tk.getboolean(\n            self.tk.call(self._w, 'selection', 'present'))\n\n    def selection_range(self, start, end):\n        \"\"\"Set the selection from START to END (not included).\"\"\"\n        self.selection('range', start, end)\n\n    def selection_to(self, index):\n        \"\"\"Set the variable end of a selection to INDEX.\"\"\"\n        self.selection('to', index)\n\n###########################################################################\n\n\nclass LabelFrame(Widget):\n    \"\"\"labelframe widget.\"\"\"\n\n    def __init__(self, master=None, cnf={}, **kw):\n        \"\"\"Construct a labelframe widget with the parent MASTER.\n\n        STANDARD OPTIONS\n\n            borderwidth, cursor, font, foreground,\n            highlightbackground, highlightcolor,\n            highlightthickness, padx, pady, relief,\n            takefocus, text\n\n        WIDGET-SPECIFIC OPTIONS\n\n            background, class, colormap, container,\n            height, labelanchor, labelwidget,\n            visual, width\n        \"\"\"\n        Widget.__init__(self, master, 'labelframe', cnf, kw)\n\n########################################################################\n\n\nclass PanedWindow(Widget):\n    \"\"\"panedwindow widget.\"\"\"\n\n    def __init__(self, master=None, cnf={}, **kw):\n        \"\"\"Construct a panedwindow widget with the parent MASTER.\n\n        STANDARD OPTIONS\n\n            background, borderwidth, cursor, height,\n            orient, relief, width\n\n        WIDGET-SPECIFIC OPTIONS\n\n            handlepad, handlesize, opaqueresize,\n            sashcursor, sashpad, sashrelief,\n            sashwidth, showhandle,\n        \"\"\"\n        Widget.__init__(self, master, 'panedwindow', cnf, kw)\n\n    def add(self, child, **kw):\n        \"\"\"Add a child widget to the panedwindow in a new pane.\n\n        The child argument is the name of the child widget\n        followed by pairs of arguments that specify how to\n        manage the windows. The possible options and values\n        are the ones accepted by the paneconfigure method.\n        \"\"\"\n        self.tk.call((self._w, 'add', child) + self._options(kw))\n\n    def remove(self, child):\n        \"\"\"Remove the pane containing child from the panedwindow\n\n        All geometry management options for child will be forgotten.\n        \"\"\"\n        self.tk.call(self._w, 'forget', child)\n\n    forget = remove\n\n    def identify(self, x, y):\n        \"\"\"Identify the panedwindow component at point x, y\n\n        If the point is over a sash or a sash handle, the result\n        is a two element list containing the index of the sash or\n        handle, and a word indicating whether it is over a sash\n        or a handle, such as {0 sash} or {2 handle}. If the point\n        is over any other part of the panedwindow, the result is\n        an empty list.\n        \"\"\"\n        return self.tk.call(self._w, 'identify', x, y)\n\n    def proxy(self, *args):\n        \"\"\"Internal function.\"\"\"\n        return self._getints(\n            self.tk.call((self._w, 'proxy') + args)) or ()\n\n    def proxy_coord(self):\n        \"\"\"Return the x and y pair of the most recent proxy location\n        \"\"\"\n        return self.proxy(\"coord\")\n\n    def proxy_forget(self):\n        \"\"\"Remove the proxy from the display.\n        \"\"\"\n        return self.proxy(\"forget\")\n\n    def proxy_place(self, x, y):\n        \"\"\"Place the proxy at the given x and y coordinates.\n        \"\"\"\n        return self.proxy(\"place\", x, y)\n\n    def sash(self, *args):\n        \"\"\"Internal function.\"\"\"\n        return self._getints(\n            self.tk.call((self._w, 'sash') + args)) or ()\n\n    def sash_coord(self, index):\n        \"\"\"Return the current x and y pair for the sash given by index.\n\n        Index must be an integer between 0 and 1 less than the\n        number of panes in the panedwindow. The coordinates given are\n        those of the top left corner of the region containing the sash.\n        pathName sash dragto index x y This command computes the\n        difference between the given coordinates and the coordinates\n        given to the last sash coord command for the given sash. It then\n        moves that sash the computed difference. The return value is the\n        empty string.\n        \"\"\"\n        return self.sash(\"coord\", index)\n\n    def sash_mark(self, index):\n        \"\"\"Records x and y for the sash given by index;\n\n        Used in conjunction with later dragto commands to move the sash.\n        \"\"\"\n        return self.sash(\"mark\", index)\n\n    def sash_place(self, index, x, y):\n        \"\"\"Place the sash given by index at the given coordinates\n        \"\"\"\n        return self.sash(\"place\", index, x, y)\n\n    def panecget(self, child, option):\n        \"\"\"Query a management option for window.\n\n        Option may be any value allowed by the paneconfigure subcommand\n        \"\"\"\n        return self.tk.call(\n            (self._w, 'panecget') + (child, '-'+option))\n\n    def paneconfigure(self, tagOrId, cnf=None, **kw):\n        \"\"\"Query or modify the management options for window.\n\n        If no option is specified, returns a list describing all\n        of the available options for pathName.  If option is\n        specified with no value, then the command returns a list\n        describing the one named option (this list will be identical\n        to the corresponding sublist of the value returned if no\n        option is specified). If one or more option-value pairs are\n        specified, then the command modifies the given widget\n        option(s) to have the given value(s); in this case the\n        command returns an empty string. The following options\n        are supported:\n\n        after window\n            Insert the window after the window specified. window\n            should be the name of a window already managed by pathName.\n        before window\n            Insert the window before the window specified. window\n            should be the name of a window already managed by pathName.\n        height size\n            Specify a height for the window. The height will be the\n            outer dimension of the window including its border, if\n            any. If size is an empty string, or if -height is not\n            specified, then the height requested internally by the\n            window will be used initially; the height may later be\n            adjusted by the movement of sashes in the panedwindow.\n            Size may be any value accepted by Tk_GetPixels.\n        minsize n\n            Specifies that the size of the window cannot be made\n            less than n. This constraint only affects the size of\n            the widget in the paned dimension -- the x dimension\n            for horizontal panedwindows, the y dimension for\n            vertical panedwindows. May be any value accepted by\n            Tk_GetPixels.\n        padx n\n            Specifies a non-negative value indicating how much\n            extra space to leave on each side of the window in\n            the X-direction. The value may have any of the forms\n            accepted by Tk_GetPixels.\n        pady n\n            Specifies a non-negative value indicating how much\n            extra space to leave on each side of the window in\n            the Y-direction. The value may have any of the forms\n            accepted by Tk_GetPixels.\n        sticky style\n            If a window's pane is larger than the requested\n            dimensions of the window, this option may be used\n            to position (or stretch) the window within its pane.\n            Style is a string that contains zero or more of the\n            characters n, s, e or w. The string can optionally\n            contains spaces or commas, but they are ignored. Each\n            letter refers to a side (north, south, east, or west)\n            that the window will \"stick\" to. If both n and s\n            (or e and w) are specified, the window will be\n            stretched to fill the entire height (or width) of\n            its cavity.\n        width size\n            Specify a width for the window. The width will be\n            the outer dimension of the window including its\n            border, if any. If size is an empty string, or\n            if -width is not specified, then the width requested\n            internally by the window will be used initially; the\n            width may later be adjusted by the movement of sashes\n            in the panedwindow. Size may be any value accepted by\n            Tk_GetPixels.\n\n        \"\"\"\n        if cnf is None and not kw:\n            return self._getconfigure(self._w, 'paneconfigure', tagOrId)\n        if isinstance(cnf, str) and not kw:\n            return self._getconfigure1(\n                self._w, 'paneconfigure', tagOrId, '-'+cnf)\n        self.tk.call((self._w, 'paneconfigure', tagOrId) +\n                 self._options(cnf, kw))\n\n    paneconfig = paneconfigure\n\n    def panes(self):\n        \"\"\"Returns an ordered list of the child panes.\"\"\"\n        return self.tk.splitlist(self.tk.call(self._w, 'panes'))\n\n# Test:\n\n\ndef _test():\n    root = Tk()\n    text = \"This is Tcl/Tk version %s\" % TclVersion\n    text += \"\\nThis should be a cedilla: \\xe7\"\n    label = Label(root, text=text)\n    label.pack()\n    test = Button(root, text=\"Click me!\",\n              command=lambda root=root: root.test.configure(\n                  text=\"[%s]\" % root.test['text']))\n    test.pack()\n    root.test = test\n    quit = Button(root, text=\"QUIT\", command=root.destroy)\n    quit.pack()\n    # The following three commands are needed so the window pops\n    # up on top on Windows...\n    root.iconify()\n    root.update()\n    root.deiconify()\n    root.mainloop()\n\n\nif __name__ == '__main__':\n    _test()\n", 4578], "C:\\Python38\\lib\\ntpath.py": ["# Module 'ntpath' -- common operations on WinNT/Win95 pathnames\n\"\"\"Common pathname manipulations, WindowsNT/95 version.\n\nInstead of importing this module directly, import os and refer to this\nmodule as os.path.\n\"\"\"\n\n# strings representing various path-related bits and pieces\n# These are primarily for export; internally, they are hardcoded.\n# Should be set before imports for resolving cyclic dependency.\ncurdir = '.'\npardir = '..'\nextsep = '.'\nsep = '\\\\'\npathsep = ';'\naltsep = '/'\ndefpath = '.;C:\\\\bin'\ndevnull = 'nul'\n\nimport os\nimport sys\nimport stat\nimport genericpath\nfrom genericpath import *\n\n__all__ = [\"normcase\",\"isabs\",\"join\",\"splitdrive\",\"split\",\"splitext\",\n           \"basename\",\"dirname\",\"commonprefix\",\"getsize\",\"getmtime\",\n           \"getatime\",\"getctime\", \"islink\",\"exists\",\"lexists\",\"isdir\",\"isfile\",\n           \"ismount\", \"expanduser\",\"expandvars\",\"normpath\",\"abspath\",\n           \"curdir\",\"pardir\",\"sep\",\"pathsep\",\"defpath\",\"altsep\",\n           \"extsep\",\"devnull\",\"realpath\",\"supports_unicode_filenames\",\"relpath\",\n           \"samefile\", \"sameopenfile\", \"samestat\", \"commonpath\"]\n\ndef _get_bothseps(path):\n    if isinstance(path, bytes):\n        return b'\\\\/'\n    else:\n        return '\\\\/'\n\n# Normalize the case of a pathname and map slashes to backslashes.\n# Other normalizations (such as optimizing '../' away) are not done\n# (this is done by normpath).\n\ndef normcase(s):\n    \"\"\"Normalize case of pathname.\n\n    Makes all characters lowercase and all slashes into backslashes.\"\"\"\n    s = os.fspath(s)\n    if isinstance(s, bytes):\n        return s.replace(b'/', b'\\\\').lower()\n    else:\n        return s.replace('/', '\\\\').lower()\n\n\n# Return whether a path is absolute.\n# Trivial in Posix, harder on Windows.\n# For Windows it is absolute if it starts with a slash or backslash (current\n# volume), or if a pathname after the volume-letter-and-colon or UNC-resource\n# starts with a slash or backslash.\n\ndef isabs(s):\n    \"\"\"Test whether a path is absolute\"\"\"\n    s = os.fspath(s)\n    # Paths beginning with \\\\?\\ are always absolute, but do not\n    # necessarily contain a drive.\n    if isinstance(s, bytes):\n        if s.replace(b'/', b'\\\\').startswith(b'\\\\\\\\?\\\\'):\n            return True\n    else:\n        if s.replace('/', '\\\\').startswith('\\\\\\\\?\\\\'):\n            return True\n    s = splitdrive(s)[1]\n    return len(s) > 0 and s[0] in _get_bothseps(s)\n\n\n# Join two (or more) paths.\ndef join(path, *paths):\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'\n        seps = b'\\\\/'\n        colon = b':'\n    else:\n        sep = '\\\\'\n        seps = '\\\\/'\n        colon = ':'\n    try:\n        if not paths:\n            path[:0] + sep  #23780: Ensure compatible data type even if p is null.\n        result_drive, result_path = splitdrive(path)\n        for p in map(os.fspath, paths):\n            p_drive, p_path = splitdrive(p)\n            if p_path and p_path[0] in seps:\n                # Second path is absolute\n                if p_drive or not result_drive:\n                    result_drive = p_drive\n                result_path = p_path\n                continue\n            elif p_drive and p_drive != result_drive:\n                if p_drive.lower() != result_drive.lower():\n                    # Different drives => ignore the first path entirely\n                    result_drive = p_drive\n                    result_path = p_path\n                    continue\n                # Same drive in different case\n                result_drive = p_drive\n            # Second path is relative to the first\n            if result_path and result_path[-1] not in seps:\n                result_path = result_path + sep\n            result_path = result_path + p_path\n        ## add separator between UNC and non-absolute path\n        if (result_path and result_path[0] not in seps and\n            result_drive and result_drive[-1:] != colon):\n            return result_drive + sep + result_path\n        return result_drive + result_path\n    except (TypeError, AttributeError, BytesWarning):\n        genericpath._check_arg_types('join', path, *paths)\n        raise\n\n\n# Split a path in a drive specification (a drive letter followed by a\n# colon) and the path specification.\n# It is always true that drivespec + pathspec == p\ndef splitdrive(p):\n    \"\"\"Split a pathname into drive/UNC sharepoint and relative path specifiers.\n    Returns a 2-tuple (drive_or_unc, path); either part may be empty.\n\n    If you assign\n        result = splitdrive(p)\n    It is always true that:\n        result[0] + result[1] == p\n\n    If the path contained a drive letter, drive_or_unc will contain everything\n    up to and including the colon.  e.g. splitdrive(\"c:/dir\") returns (\"c:\", \"/dir\")\n\n    If the path contained a UNC path, the drive_or_unc will contain the host name\n    and share up to but not including the fourth directory separator character.\n    e.g. splitdrive(\"//host/computer/dir\") returns (\"//host/computer\", \"/dir\")\n\n    Paths cannot contain both a drive letter and a UNC path.\n\n    \"\"\"\n    p = os.fspath(p)\n    if len(p) >= 2:\n        if isinstance(p, bytes):\n            sep = b'\\\\'\n            altsep = b'/'\n            colon = b':'\n        else:\n            sep = '\\\\'\n            altsep = '/'\n            colon = ':'\n        normp = p.replace(altsep, sep)\n        if (normp[0:2] == sep*2) and (normp[2:3] != sep):\n            # is a UNC path:\n            # vvvvvvvvvvvvvvvvvvvv drive letter or UNC path\n            # \\\\machine\\mountpoint\\directory\\etc\\...\n            #           directory ^^^^^^^^^^^^^^^\n            index = normp.find(sep, 2)\n            if index == -1:\n                return p[:0], p\n            index2 = normp.find(sep, index + 1)\n            # a UNC path can't have two slashes in a row\n            # (after the initial two)\n            if index2 == index + 1:\n                return p[:0], p\n            if index2 == -1:\n                index2 = len(p)\n            return p[:index2], p[index2:]\n        if normp[1:2] == colon:\n            return p[:2], p[2:]\n    return p[:0], p\n\n\n# Split a path in head (everything up to the last '/') and tail (the\n# rest).  After the trailing '/' is stripped, the invariant\n# join(head, tail) == p holds.\n# The resulting head won't end in '/' unless it is the root.\n\ndef split(p):\n    \"\"\"Split a pathname.\n\n    Return tuple (head, tail) where tail is everything after the final slash.\n    Either part may be empty.\"\"\"\n    p = os.fspath(p)\n    seps = _get_bothseps(p)\n    d, p = splitdrive(p)\n    # set i to index beyond p's last slash\n    i = len(p)\n    while i and p[i-1] not in seps:\n        i -= 1\n    head, tail = p[:i], p[i:]  # now tail has no slashes\n    # remove trailing slashes from head, unless it's all slashes\n    head = head.rstrip(seps) or head\n    return d + head, tail\n\n\n# Split a path in root and extension.\n# The extension is everything starting at the last dot in the last\n# pathname component; the root is everything before that.\n# It is always true that root + ext == p.\n\ndef splitext(p):\n    p = os.fspath(p)\n    if isinstance(p, bytes):\n        return genericpath._splitext(p, b'\\\\', b'/', b'.')\n    else:\n        return genericpath._splitext(p, '\\\\', '/', '.')\nsplitext.__doc__ = genericpath._splitext.__doc__\n\n\n# Return the tail (basename) part of a path.\n\ndef basename(p):\n    \"\"\"Returns the final component of a pathname\"\"\"\n    return split(p)[1]\n\n\n# Return the head (dirname) part of a path.\n\ndef dirname(p):\n    \"\"\"Returns the directory component of a pathname\"\"\"\n    return split(p)[0]\n\n# Is a path a symbolic link?\n# This will always return false on systems where os.lstat doesn't exist.\n\ndef islink(path):\n    \"\"\"Test whether a path is a symbolic link.\n    This will always return false for Windows prior to 6.0.\n    \"\"\"\n    try:\n        st = os.lstat(path)\n    except (OSError, ValueError, AttributeError):\n        return False\n    return stat.S_ISLNK(st.st_mode)\n\n# Being true for dangling symbolic links is also useful.\n\ndef lexists(path):\n    \"\"\"Test whether a path exists.  Returns True for broken symbolic links\"\"\"\n    try:\n        st = os.lstat(path)\n    except (OSError, ValueError):\n        return False\n    return True\n\n# Is a path a mount point?\n# Any drive letter root (eg c:\\)\n# Any share UNC (eg \\\\server\\share)\n# Any volume mounted on a filesystem folder\n#\n# No one method detects all three situations. Historically we've lexically\n# detected drive letter roots and share UNCs. The canonical approach to\n# detecting mounted volumes (querying the reparse tag) fails for the most\n# common case: drive letter roots. The alternative which uses GetVolumePathName\n# fails if the drive letter is the result of a SUBST.\ntry:\n    from nt import _getvolumepathname\nexcept ImportError:\n    _getvolumepathname = None\ndef ismount(path):\n    \"\"\"Test whether a path is a mount point (a drive root, the root of a\n    share, or a mounted volume)\"\"\"\n    path = os.fspath(path)\n    seps = _get_bothseps(path)\n    path = abspath(path)\n    root, rest = splitdrive(path)\n    if root and root[0] in seps:\n        return (not rest) or (rest in seps)\n    if rest in seps:\n        return True\n\n    if _getvolumepathname:\n        return path.rstrip(seps) == _getvolumepathname(path).rstrip(seps)\n    else:\n        return False\n\n\n# Expand paths beginning with '~' or '~user'.\n# '~' means $HOME; '~user' means that user's home directory.\n# If the path doesn't begin with '~', or if the user or $HOME is unknown,\n# the path is returned unchanged (leaving error reporting to whatever\n# function is called with the expanded path as argument).\n# See also module 'glob' for expansion of *, ? and [...] in pathnames.\n# (A function should also be defined to do full *sh-style environment\n# variable expansion.)\n\ndef expanduser(path):\n    \"\"\"Expand ~ and ~user constructs.\n\n    If user or $HOME is unknown, do nothing.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        tilde = b'~'\n    else:\n        tilde = '~'\n    if not path.startswith(tilde):\n        return path\n    i, n = 1, len(path)\n    while i < n and path[i] not in _get_bothseps(path):\n        i += 1\n\n    if 'USERPROFILE' in os.environ:\n        userhome = os.environ['USERPROFILE']\n    elif not 'HOMEPATH' in os.environ:\n        return path\n    else:\n        try:\n            drive = os.environ['HOMEDRIVE']\n        except KeyError:\n            drive = ''\n        userhome = join(drive, os.environ['HOMEPATH'])\n\n    if isinstance(path, bytes):\n        userhome = os.fsencode(userhome)\n\n    if i != 1: #~user\n        userhome = join(dirname(userhome), path[1:i])\n\n    return userhome + path[i:]\n\n\n# Expand paths containing shell variable substitutions.\n# The following rules apply:\n#       - no expansion within single quotes\n#       - '$$' is translated into '$'\n#       - '%%' is translated into '%' if '%%' are not seen in %var1%%var2%\n#       - ${varname} is accepted.\n#       - $varname is accepted.\n#       - %varname% is accepted.\n#       - varnames can be made out of letters, digits and the characters '_-'\n#         (though is not verified in the ${varname} and %varname% cases)\n# XXX With COMMAND.COM you can use any characters in a variable name,\n# XXX except '^|<>='.\n\ndef expandvars(path):\n    \"\"\"Expand shell variables of the forms $var, ${var} and %var%.\n\n    Unknown variables are left unchanged.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        if b'$' not in path and b'%' not in path:\n            return path\n        import string\n        varchars = bytes(string.ascii_letters + string.digits + '_-', 'ascii')\n        quote = b'\\''\n        percent = b'%'\n        brace = b'{'\n        rbrace = b'}'\n        dollar = b'$'\n        environ = getattr(os, 'environb', None)\n    else:\n        if '$' not in path and '%' not in path:\n            return path\n        import string\n        varchars = string.ascii_letters + string.digits + '_-'\n        quote = '\\''\n        percent = '%'\n        brace = '{'\n        rbrace = '}'\n        dollar = '$'\n        environ = os.environ\n    res = path[:0]\n    index = 0\n    pathlen = len(path)\n    while index < pathlen:\n        c = path[index:index+1]\n        if c == quote:   # no expansion within single quotes\n            path = path[index + 1:]\n            pathlen = len(path)\n            try:\n                index = path.index(c)\n                res += c + path[:index + 1]\n            except ValueError:\n                res += c + path\n                index = pathlen - 1\n        elif c == percent:  # variable or '%'\n            if path[index + 1:index + 2] == percent:\n                res += c\n                index += 1\n            else:\n                path = path[index+1:]\n                pathlen = len(path)\n                try:\n                    index = path.index(percent)\n                except ValueError:\n                    res += percent + path\n                    index = pathlen - 1\n                else:\n                    var = path[:index]\n                    try:\n                        if environ is None:\n                            value = os.fsencode(os.environ[os.fsdecode(var)])\n                        else:\n                            value = environ[var]\n                    except KeyError:\n                        value = percent + var + percent\n                    res += value\n        elif c == dollar:  # variable or '$$'\n            if path[index + 1:index + 2] == dollar:\n                res += c\n                index += 1\n            elif path[index + 1:index + 2] == brace:\n                path = path[index+2:]\n                pathlen = len(path)\n                try:\n                    index = path.index(rbrace)\n                except ValueError:\n                    res += dollar + brace + path\n                    index = pathlen - 1\n                else:\n                    var = path[:index]\n                    try:\n                        if environ is None:\n                            value = os.fsencode(os.environ[os.fsdecode(var)])\n                        else:\n                            value = environ[var]\n                    except KeyError:\n                        value = dollar + brace + var + rbrace\n                    res += value\n            else:\n                var = path[:0]\n                index += 1\n                c = path[index:index + 1]\n                while c and c in varchars:\n                    var += c\n                    index += 1\n                    c = path[index:index + 1]\n                try:\n                    if environ is None:\n                        value = os.fsencode(os.environ[os.fsdecode(var)])\n                    else:\n                        value = environ[var]\n                except KeyError:\n                    value = dollar + var\n                res += value\n                if c:\n                    index -= 1\n        else:\n            res += c\n        index += 1\n    return res\n\n\n# Normalize a path, e.g. A//B, A/./B and A/foo/../B all become A\\B.\n# Previously, this function also truncated pathnames to 8+3 format,\n# but as this module is called \"ntpath\", that's obviously wrong!\n\ndef normpath(path):\n    \"\"\"Normalize path, eliminating double slashes, etc.\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'\n        altsep = b'/'\n        curdir = b'.'\n        pardir = b'..'\n        special_prefixes = (b'\\\\\\\\.\\\\', b'\\\\\\\\?\\\\')\n    else:\n        sep = '\\\\'\n        altsep = '/'\n        curdir = '.'\n        pardir = '..'\n        special_prefixes = ('\\\\\\\\.\\\\', '\\\\\\\\?\\\\')\n    if path.startswith(special_prefixes):\n        # in the case of paths with these prefixes:\n        # \\\\.\\ -> device names\n        # \\\\?\\ -> literal paths\n        # do not do any normalization, but return the path\n        # unchanged apart from the call to os.fspath()\n        return path\n    path = path.replace(altsep, sep)\n    prefix, path = splitdrive(path)\n\n    # collapse initial backslashes\n    if path.startswith(sep):\n        prefix += sep\n        path = path.lstrip(sep)\n\n    comps = path.split(sep)\n    i = 0\n    while i < len(comps):\n        if not comps[i] or comps[i] == curdir:\n            del comps[i]\n        elif comps[i] == pardir:\n            if i > 0 and comps[i-1] != pardir:\n                del comps[i-1:i+1]\n                i -= 1\n            elif i == 0 and prefix.endswith(sep):\n                del comps[i]\n            else:\n                i += 1\n        else:\n            i += 1\n    # If the path is now empty, substitute '.'\n    if not prefix and not comps:\n        comps.append(curdir)\n    return prefix + sep.join(comps)\n\ndef _abspath_fallback(path):\n    \"\"\"Return the absolute version of a path as a fallback function in case\n    `nt._getfullpathname` is not available or raises OSError. See bpo-31047 for\n    more.\n\n    \"\"\"\n\n    path = os.fspath(path)\n    if not isabs(path):\n        if isinstance(path, bytes):\n            cwd = os.getcwdb()\n        else:\n            cwd = os.getcwd()\n        path = join(cwd, path)\n    return normpath(path)\n\n# Return an absolute path.\ntry:\n    from nt import _getfullpathname\n\nexcept ImportError: # not running on Windows - mock up something sensible\n    abspath = _abspath_fallback\n\nelse:  # use native Windows method on Windows\n    def abspath(path):\n        \"\"\"Return the absolute version of a path.\"\"\"\n        try:\n            return normpath(_getfullpathname(path))\n        except (OSError, ValueError):\n            return _abspath_fallback(path)\n\ntry:\n    from nt import _getfinalpathname, readlink as _nt_readlink\nexcept ImportError:\n    # realpath is a no-op on systems without _getfinalpathname support.\n    realpath = abspath\nelse:\n    def _readlink_deep(path):\n        # These error codes indicate that we should stop reading links and\n        # return the path we currently have.\n        # 1: ERROR_INVALID_FUNCTION\n        # 2: ERROR_FILE_NOT_FOUND\n        # 3: ERROR_DIRECTORY_NOT_FOUND\n        # 5: ERROR_ACCESS_DENIED\n        # 21: ERROR_NOT_READY (implies drive with no media)\n        # 32: ERROR_SHARING_VIOLATION (probably an NTFS paging file)\n        # 50: ERROR_NOT_SUPPORTED (implies no support for reparse points)\n        # 67: ERROR_BAD_NET_NAME (implies remote server unavailable)\n        # 87: ERROR_INVALID_PARAMETER\n        # 4390: ERROR_NOT_A_REPARSE_POINT\n        # 4392: ERROR_INVALID_REPARSE_DATA\n        # 4393: ERROR_REPARSE_TAG_INVALID\n        allowed_winerror = 1, 2, 3, 5, 21, 32, 50, 67, 87, 4390, 4392, 4393\n\n        seen = set()\n        while normcase(path) not in seen:\n            seen.add(normcase(path))\n            try:\n                old_path = path\n                path = _nt_readlink(path)\n                # Links may be relative, so resolve them against their\n                # own location\n                if not isabs(path):\n                    # If it's something other than a symlink, we don't know\n                    # what it's actually going to be resolved against, so\n                    # just return the old path.\n                    if not islink(old_path):\n                        path = old_path\n                        break\n                    path = normpath(join(dirname(old_path), path))\n            except OSError as ex:\n                if ex.winerror in allowed_winerror:\n                    break\n                raise\n            except ValueError:\n                # Stop on reparse points that are not symlinks\n                break\n        return path\n\n    def _getfinalpathname_nonstrict(path):\n        # These error codes indicate that we should stop resolving the path\n        # and return the value we currently have.\n        # 1: ERROR_INVALID_FUNCTION\n        # 2: ERROR_FILE_NOT_FOUND\n        # 3: ERROR_DIRECTORY_NOT_FOUND\n        # 5: ERROR_ACCESS_DENIED\n        # 21: ERROR_NOT_READY (implies drive with no media)\n        # 32: ERROR_SHARING_VIOLATION (probably an NTFS paging file)\n        # 50: ERROR_NOT_SUPPORTED\n        # 67: ERROR_BAD_NET_NAME (implies remote server unavailable)\n        # 87: ERROR_INVALID_PARAMETER\n        # 123: ERROR_INVALID_NAME\n        # 1920: ERROR_CANT_ACCESS_FILE\n        # 1921: ERROR_CANT_RESOLVE_FILENAME (implies unfollowable symlink)\n        allowed_winerror = 1, 2, 3, 5, 21, 32, 50, 67, 87, 123, 1920, 1921\n\n        # Non-strict algorithm is to find as much of the target directory\n        # as we can and join the rest.\n        tail = ''\n        while path:\n            try:\n                path = _getfinalpathname(path)\n                return join(path, tail) if tail else path\n            except OSError as ex:\n                if ex.winerror not in allowed_winerror:\n                    raise\n                try:\n                    # The OS could not resolve this path fully, so we attempt\n                    # to follow the link ourselves. If we succeed, join the tail\n                    # and return.\n                    new_path = _readlink_deep(path)\n                    if new_path != path:\n                        return join(new_path, tail) if tail else new_path\n                except OSError:\n                    # If we fail to readlink(), let's keep traversing\n                    pass\n                path, name = split(path)\n                # TODO (bpo-38186): Request the real file name from the directory\n                # entry using FindFirstFileW. For now, we will return the path\n                # as best we have it\n                if path and not name:\n                    return path + tail\n                tail = join(name, tail) if tail else name\n        return tail\n\n    def realpath(path):\n        path = normpath(path)\n        if isinstance(path, bytes):\n            prefix = b'\\\\\\\\?\\\\'\n            unc_prefix = b'\\\\\\\\?\\\\UNC\\\\'\n            new_unc_prefix = b'\\\\\\\\'\n            cwd = os.getcwdb()\n            # bpo-38081: Special case for realpath(b'nul')\n            if normcase(path) == normcase(os.fsencode(devnull)):\n                return b'\\\\\\\\.\\\\NUL'\n        else:\n            prefix = '\\\\\\\\?\\\\'\n            unc_prefix = '\\\\\\\\?\\\\UNC\\\\'\n            new_unc_prefix = '\\\\\\\\'\n            cwd = os.getcwd()\n            # bpo-38081: Special case for realpath('nul')\n            if normcase(path) == normcase(devnull):\n                return '\\\\\\\\.\\\\NUL'\n        had_prefix = path.startswith(prefix)\n        if not had_prefix and not isabs(path):\n            path = join(cwd, path)\n        try:\n            path = _getfinalpathname(path)\n            initial_winerror = 0\n        except OSError as ex:\n            initial_winerror = ex.winerror\n            path = _getfinalpathname_nonstrict(path)\n        # The path returned by _getfinalpathname will always start with \\\\?\\ -\n        # strip off that prefix unless it was already provided on the original\n        # path.\n        if not had_prefix and path.startswith(prefix):\n            # For UNC paths, the prefix will actually be \\\\?\\UNC\\\n            # Handle that case as well.\n            if path.startswith(unc_prefix):\n                spath = new_unc_prefix + path[len(unc_prefix):]\n            else:\n                spath = path[len(prefix):]\n            # Ensure that the non-prefixed path resolves to the same path\n            try:\n                if _getfinalpathname(spath) == path:\n                    path = spath\n            except OSError as ex:\n                # If the path does not exist and originally did not exist, then\n                # strip the prefix anyway.\n                if ex.winerror == initial_winerror:\n                    path = spath\n        return path\n\n\n# Win9x family and earlier have no Unicode filename support.\nsupports_unicode_filenames = (hasattr(sys, \"getwindowsversion\") and\n                              sys.getwindowsversion()[3] >= 2)\n\ndef relpath(path, start=None):\n    \"\"\"Return a relative version of a path\"\"\"\n    path = os.fspath(path)\n    if isinstance(path, bytes):\n        sep = b'\\\\'\n        curdir = b'.'\n        pardir = b'..'\n    else:\n        sep = '\\\\'\n        curdir = '.'\n        pardir = '..'\n\n    if start is None:\n        start = curdir\n\n    if not path:\n        raise ValueError(\"no path specified\")\n\n    start = os.fspath(start)\n    try:\n        start_abs = abspath(normpath(start))\n        path_abs = abspath(normpath(path))\n        start_drive, start_rest = splitdrive(start_abs)\n        path_drive, path_rest = splitdrive(path_abs)\n        if normcase(start_drive) != normcase(path_drive):\n            raise ValueError(\"path is on mount %r, start on mount %r\" % (\n                path_drive, start_drive))\n\n        start_list = [x for x in start_rest.split(sep) if x]\n        path_list = [x for x in path_rest.split(sep) if x]\n        # Work out how much of the filepath is shared by start and path.\n        i = 0\n        for e1, e2 in zip(start_list, path_list):\n            if normcase(e1) != normcase(e2):\n                break\n            i += 1\n\n        rel_list = [pardir] * (len(start_list)-i) + path_list[i:]\n        if not rel_list:\n            return curdir\n        return join(*rel_list)\n    except (TypeError, ValueError, AttributeError, BytesWarning, DeprecationWarning):\n        genericpath._check_arg_types('relpath', path, start)\n        raise\n\n\n# Return the longest common sub-path of the sequence of paths given as input.\n# The function is case-insensitive and 'separator-insensitive', i.e. if the\n# only difference between two paths is the use of '\\' versus '/' as separator,\n# they are deemed to be equal.\n#\n# However, the returned path will have the standard '\\' separator (even if the\n# given paths had the alternative '/' separator) and will have the case of the\n# first path given in the sequence. Additionally, any trailing separator is\n# stripped from the returned path.\n\ndef commonpath(paths):\n    \"\"\"Given a sequence of path names, returns the longest common sub-path.\"\"\"\n\n    if not paths:\n        raise ValueError('commonpath() arg is an empty sequence')\n\n    paths = tuple(map(os.fspath, paths))\n    if isinstance(paths[0], bytes):\n        sep = b'\\\\'\n        altsep = b'/'\n        curdir = b'.'\n    else:\n        sep = '\\\\'\n        altsep = '/'\n        curdir = '.'\n\n    try:\n        drivesplits = [splitdrive(p.replace(altsep, sep).lower()) for p in paths]\n        split_paths = [p.split(sep) for d, p in drivesplits]\n\n        try:\n            isabs, = set(p[:1] == sep for d, p in drivesplits)\n        except ValueError:\n            raise ValueError(\"Can't mix absolute and relative paths\") from None\n\n        # Check that all drive letters or UNC paths match. The check is made only\n        # now otherwise type errors for mixing strings and bytes would not be\n        # caught.\n        if len(set(d for d, p in drivesplits)) != 1:\n            raise ValueError(\"Paths don't have the same drive\")\n\n        drive, path = splitdrive(paths[0].replace(altsep, sep))\n        common = path.split(sep)\n        common = [c for c in common if c and c != curdir]\n\n        split_paths = [[c for c in s if c and c != curdir] for s in split_paths]\n        s1 = min(split_paths)\n        s2 = max(split_paths)\n        for i, c in enumerate(s1):\n            if c != s2[i]:\n                common = common[:i]\n                break\n        else:\n            common = common[:len(s1)]\n\n        prefix = drive + sep if isabs else drive\n        return prefix + sep.join(common)\n    except (TypeError, AttributeError):\n        genericpath._check_arg_types('commonpath', *paths)\n        raise\n\n\ntry:\n    # The genericpath.isdir implementation uses os.stat and checks the mode\n    # attribute to tell whether or not the path is a directory.\n    # This is overkill on Windows - just pass the path to GetFileAttributes\n    # and check the attribute from there.\n    from nt import _isdir as isdir\nexcept ImportError:\n    # Use genericpath.isdir as imported above.\n    pass\n", 794], "C:\\Python38\\lib\\genericpath.py": ["\"\"\"\nPath operations common to more than one OS\nDo not use directly.  The OS specific modules import the appropriate\nfunctions from this module themselves.\n\"\"\"\nimport os\nimport stat\n\n__all__ = ['commonprefix', 'exists', 'getatime', 'getctime', 'getmtime',\n           'getsize', 'isdir', 'isfile', 'samefile', 'sameopenfile',\n           'samestat']\n\n\n# Does a path exist?\n# This is false for dangling symbolic links on systems that support them.\ndef exists(path):\n    \"\"\"Test whether a path exists.  Returns False for broken symbolic links\"\"\"\n    try:\n        os.stat(path)\n    except (OSError, ValueError):\n        return False\n    return True\n\n\n# This follows symbolic links, so both islink() and isdir() can be true\n# for the same path on systems that support symlinks\ndef isfile(path):\n    \"\"\"Test whether a path is a regular file\"\"\"\n    try:\n        st = os.stat(path)\n    except (OSError, ValueError):\n        return False\n    return stat.S_ISREG(st.st_mode)\n\n\n# Is a path a directory?\n# This follows symbolic links, so both islink() and isdir()\n# can be true for the same path on systems that support symlinks\ndef isdir(s):\n    \"\"\"Return true if the pathname refers to an existing directory.\"\"\"\n    try:\n        st = os.stat(s)\n    except (OSError, ValueError):\n        return False\n    return stat.S_ISDIR(st.st_mode)\n\n\ndef getsize(filename):\n    \"\"\"Return the size of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_size\n\n\ndef getmtime(filename):\n    \"\"\"Return the last modification time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_mtime\n\n\ndef getatime(filename):\n    \"\"\"Return the last access time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_atime\n\n\ndef getctime(filename):\n    \"\"\"Return the metadata change time of a file, reported by os.stat().\"\"\"\n    return os.stat(filename).st_ctime\n\n\n# Return the longest prefix of all list elements.\ndef commonprefix(m):\n    \"Given a list of pathnames, returns the longest common leading component\"\n    if not m: return ''\n    # Some people pass in a list of pathname parts to operate in an OS-agnostic\n    # fashion; don't try to translate in that case as that's an abuse of the\n    # API and they are already doing what they need to be OS-agnostic and so\n    # they most likely won't be using an os.PathLike object in the sublists.\n    if not isinstance(m[0], (list, tuple)):\n        m = tuple(map(os.fspath, m))\n    s1 = min(m)\n    s2 = max(m)\n    for i, c in enumerate(s1):\n        if c != s2[i]:\n            return s1[:i]\n    return s1\n\n# Are two stat buffers (obtained from stat, fstat or lstat)\n# describing the same file?\ndef samestat(s1, s2):\n    \"\"\"Test whether two stat buffers reference the same file\"\"\"\n    return (s1.st_ino == s2.st_ino and\n            s1.st_dev == s2.st_dev)\n\n\n# Are two filenames really pointing to the same file?\ndef samefile(f1, f2):\n    \"\"\"Test whether two pathnames reference the same actual file or directory\n\n    This is determined by the device number and i-node number and\n    raises an exception if an os.stat() call on either pathname fails.\n    \"\"\"\n    s1 = os.stat(f1)\n    s2 = os.stat(f2)\n    return samestat(s1, s2)\n\n\n# Are two open files really referencing the same file?\n# (Not necessarily the same file descriptor!)\ndef sameopenfile(fp1, fp2):\n    \"\"\"Test whether two open file objects reference the same file\"\"\"\n    s1 = os.fstat(fp1)\n    s2 = os.fstat(fp2)\n    return samestat(s1, s2)\n\n\n# Split a path in root and extension.\n# The extension is everything starting at the last dot in the last\n# pathname component; the root is everything before that.\n# It is always true that root + ext == p.\n\n# Generic implementation of splitext, to be parametrized with\n# the separators\ndef _splitext(p, sep, altsep, extsep):\n    \"\"\"Split the extension from a pathname.\n\n    Extension is everything from the last dot to the end, ignoring\n    leading dots.  Returns \"(root, ext)\"; ext may be empty.\"\"\"\n    # NOTE: This code must work for text and bytes strings.\n\n    sepIndex = p.rfind(sep)\n    if altsep:\n        altsepIndex = p.rfind(altsep)\n        sepIndex = max(sepIndex, altsepIndex)\n\n    dotIndex = p.rfind(extsep)\n    if dotIndex > sepIndex:\n        # skip all leading dots\n        filenameIndex = sepIndex + 1\n        while filenameIndex < dotIndex:\n            if p[filenameIndex:filenameIndex+1] != extsep:\n                return p[:dotIndex], p[dotIndex:]\n            filenameIndex += 1\n\n    return p, p[:0]\n\ndef _check_arg_types(funcname, *args):\n    hasstr = hasbytes = False\n    for s in args:\n        if isinstance(s, str):\n            hasstr = True\n        elif isinstance(s, bytes):\n            hasbytes = True\n        else:\n            raise TypeError(f'{funcname}() argument must be str, bytes, or '\n                            f'os.PathLike object, not {s.__class__.__name__!r}') from None\n    if hasstr and hasbytes:\n        raise TypeError(\"Can't mix strings and bytes in path components\") from None\n", 155], "C:\\Python38\\lib\\os.py": ["r\"\"\"OS routines for NT or Posix depending on what system we're on.\n\nThis exports:\n  - all functions from posix or nt, e.g. unlink, stat, etc.\n  - os.path is either posixpath or ntpath\n  - os.name is either 'posix' or 'nt'\n  - os.curdir is a string representing the current directory (always '.')\n  - os.pardir is a string representing the parent directory (always '..')\n  - os.sep is the (or a most common) pathname separator ('/' or '\\\\')\n  - os.extsep is the extension separator (always '.')\n  - os.altsep is the alternate pathname separator (None or '/')\n  - os.pathsep is the component separator used in $PATH etc\n  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')\n  - os.defpath is the default search path for executables\n  - os.devnull is the file path of the null device ('/dev/null', etc.)\n\nPrograms that import and use 'os' stand a better chance of being\nportable between different platforms.  Of course, they must then\nonly use functions that are defined by all platforms (e.g., unlink\nand opendir), and leave all pathname manipulation to os.path\n(e.g., split and join).\n\"\"\"\n\n#'\nimport abc\nimport sys\nimport stat as st\n\nfrom _collections_abc import _check_methods\n\n_names = sys.builtin_module_names\n\n# Note:  more names are added to __all__ later.\n__all__ = [\"altsep\", \"curdir\", \"pardir\", \"sep\", \"pathsep\", \"linesep\",\n           \"defpath\", \"name\", \"path\", \"devnull\", \"SEEK_SET\", \"SEEK_CUR\",\n           \"SEEK_END\", \"fsencode\", \"fsdecode\", \"get_exec_path\", \"fdopen\",\n           \"popen\", \"extsep\"]\n\ndef _exists(name):\n    return name in globals()\n\ndef _get_exports_list(module):\n    try:\n        return list(module.__all__)\n    except AttributeError:\n        return [n for n in dir(module) if n[0] != '_']\n\n# Any new dependencies of the os module and/or changes in path separator\n# requires updating importlib as well.\nif 'posix' in _names:\n    name = 'posix'\n    linesep = '\\n'\n    from posix import *\n    try:\n        from posix import _exit\n        __all__.append('_exit')\n    except ImportError:\n        pass\n    import posixpath as path\n\n    try:\n        from posix import _have_functions\n    except ImportError:\n        pass\n\n    import posix\n    __all__.extend(_get_exports_list(posix))\n    del posix\n\nelif 'nt' in _names:\n    name = 'nt'\n    linesep = '\\r\\n'\n    from nt import *\n    try:\n        from nt import _exit\n        __all__.append('_exit')\n    except ImportError:\n        pass\n    import ntpath as path\n\n    import nt\n    __all__.extend(_get_exports_list(nt))\n    del nt\n\n    try:\n        from nt import _have_functions\n    except ImportError:\n        pass\n\nelse:\n    raise ImportError('no os specific module found')\n\nsys.modules['os.path'] = path\nfrom os.path import (curdir, pardir, sep, pathsep, defpath, extsep, altsep,\n    devnull)\n\ndel _names\n\n\nif _exists(\"_have_functions\"):\n    _globals = globals()\n    def _add(str, fn):\n        if (fn in _globals) and (str in _have_functions):\n            _set.add(_globals[fn])\n\n    _set = set()\n    _add(\"HAVE_FACCESSAT\",  \"access\")\n    _add(\"HAVE_FCHMODAT\",   \"chmod\")\n    _add(\"HAVE_FCHOWNAT\",   \"chown\")\n    _add(\"HAVE_FSTATAT\",    \"stat\")\n    _add(\"HAVE_FUTIMESAT\",  \"utime\")\n    _add(\"HAVE_LINKAT\",     \"link\")\n    _add(\"HAVE_MKDIRAT\",    \"mkdir\")\n    _add(\"HAVE_MKFIFOAT\",   \"mkfifo\")\n    _add(\"HAVE_MKNODAT\",    \"mknod\")\n    _add(\"HAVE_OPENAT\",     \"open\")\n    _add(\"HAVE_READLINKAT\", \"readlink\")\n    _add(\"HAVE_RENAMEAT\",   \"rename\")\n    _add(\"HAVE_SYMLINKAT\",  \"symlink\")\n    _add(\"HAVE_UNLINKAT\",   \"unlink\")\n    _add(\"HAVE_UNLINKAT\",   \"rmdir\")\n    _add(\"HAVE_UTIMENSAT\",  \"utime\")\n    supports_dir_fd = _set\n\n    _set = set()\n    _add(\"HAVE_FACCESSAT\",  \"access\")\n    supports_effective_ids = _set\n\n    _set = set()\n    _add(\"HAVE_FCHDIR\",     \"chdir\")\n    _add(\"HAVE_FCHMOD\",     \"chmod\")\n    _add(\"HAVE_FCHOWN\",     \"chown\")\n    _add(\"HAVE_FDOPENDIR\",  \"listdir\")\n    _add(\"HAVE_FDOPENDIR\",  \"scandir\")\n    _add(\"HAVE_FEXECVE\",    \"execve\")\n    _set.add(stat) # fstat always works\n    _add(\"HAVE_FTRUNCATE\",  \"truncate\")\n    _add(\"HAVE_FUTIMENS\",   \"utime\")\n    _add(\"HAVE_FUTIMES\",    \"utime\")\n    _add(\"HAVE_FPATHCONF\",  \"pathconf\")\n    if _exists(\"statvfs\") and _exists(\"fstatvfs\"): # mac os x10.3\n        _add(\"HAVE_FSTATVFS\", \"statvfs\")\n    supports_fd = _set\n\n    _set = set()\n    _add(\"HAVE_FACCESSAT\",  \"access\")\n    # Some platforms don't support lchmod().  Often the function exists\n    # anyway, as a stub that always returns ENOSUP or perhaps EOPNOTSUPP.\n    # (No, I don't know why that's a good design.)  ./configure will detect\n    # this and reject it--so HAVE_LCHMOD still won't be defined on such\n    # platforms.  This is Very Helpful.\n    #\n    # However, sometimes platforms without a working lchmod() *do* have\n    # fchmodat().  (Examples: Linux kernel 3.2 with glibc 2.15,\n    # OpenIndiana 3.x.)  And fchmodat() has a flag that theoretically makes\n    # it behave like lchmod().  So in theory it would be a suitable\n    # replacement for lchmod().  But when lchmod() doesn't work, fchmodat()'s\n    # flag doesn't work *either*.  Sadly ./configure isn't sophisticated\n    # enough to detect this condition--it only determines whether or not\n    # fchmodat() minimally works.\n    #\n    # Therefore we simply ignore fchmodat() when deciding whether or not\n    # os.chmod supports follow_symlinks.  Just checking lchmod() is\n    # sufficient.  After all--if you have a working fchmodat(), your\n    # lchmod() almost certainly works too.\n    #\n    # _add(\"HAVE_FCHMODAT\",   \"chmod\")\n    _add(\"HAVE_FCHOWNAT\",   \"chown\")\n    _add(\"HAVE_FSTATAT\",    \"stat\")\n    _add(\"HAVE_LCHFLAGS\",   \"chflags\")\n    _add(\"HAVE_LCHMOD\",     \"chmod\")\n    if _exists(\"lchown\"): # mac os x10.3\n        _add(\"HAVE_LCHOWN\", \"chown\")\n    _add(\"HAVE_LINKAT\",     \"link\")\n    _add(\"HAVE_LUTIMES\",    \"utime\")\n    _add(\"HAVE_LSTAT\",      \"stat\")\n    _add(\"HAVE_FSTATAT\",    \"stat\")\n    _add(\"HAVE_UTIMENSAT\",  \"utime\")\n    _add(\"MS_WINDOWS\",      \"stat\")\n    supports_follow_symlinks = _set\n\n    del _set\n    del _have_functions\n    del _globals\n    del _add\n\n\n# Python uses fixed values for the SEEK_ constants; they are mapped\n# to native constants if necessary in posixmodule.c\n# Other possible SEEK values are directly imported from posixmodule.c\nSEEK_SET = 0\nSEEK_CUR = 1\nSEEK_END = 2\n\n# Super directory utilities.\n# (Inspired by Eric Raymond; the doc strings are mostly his)\n\ndef makedirs(name, mode=0o777, exist_ok=False):\n    \"\"\"makedirs(name [, mode=0o777][, exist_ok=False])\n\n    Super-mkdir; create a leaf directory and all intermediate ones.  Works like\n    mkdir, except that any intermediate path segment (not just the rightmost)\n    will be created if it does not exist. If the target directory already\n    exists, raise an OSError if exist_ok is False. Otherwise no exception is\n    raised.  This is recursive.\n\n    \"\"\"\n    head, tail = path.split(name)\n    if not tail:\n        head, tail = path.split(head)\n    if head and tail and not path.exists(head):\n        try:\n            makedirs(head, exist_ok=exist_ok)\n        except FileExistsError:\n            # Defeats race condition when another thread created the path\n            pass\n        cdir = curdir\n        if isinstance(tail, bytes):\n            cdir = bytes(curdir, 'ASCII')\n        if tail == cdir:           # xxx/newdir/. exists if xxx/newdir exists\n            return\n    try:\n        mkdir(name, mode)\n    except OSError:\n        # Cannot rely on checking for EEXIST, since the operating system\n        # could give priority to other errors like EACCES or EROFS\n        if not exist_ok or not path.isdir(name):\n            raise\n\ndef removedirs(name):\n    \"\"\"removedirs(name)\n\n    Super-rmdir; remove a leaf directory and all empty intermediate\n    ones.  Works like rmdir except that, if the leaf directory is\n    successfully removed, directories corresponding to rightmost path\n    segments will be pruned away until either the whole path is\n    consumed or an error occurs.  Errors during this latter phase are\n    ignored -- they generally mean that a directory was not empty.\n\n    \"\"\"\n    rmdir(name)\n    head, tail = path.split(name)\n    if not tail:\n        head, tail = path.split(head)\n    while head and tail:\n        try:\n            rmdir(head)\n        except OSError:\n            break\n        head, tail = path.split(head)\n\ndef renames(old, new):\n    \"\"\"renames(old, new)\n\n    Super-rename; create directories as necessary and delete any left\n    empty.  Works like rename, except creation of any intermediate\n    directories needed to make the new pathname good is attempted\n    first.  After the rename, directories corresponding to rightmost\n    path segments of the old name will be pruned until either the\n    whole path is consumed or a nonempty directory is found.\n\n    Note: this function can fail with the new directory structure made\n    if you lack permissions needed to unlink the leaf directory or\n    file.\n\n    \"\"\"\n    head, tail = path.split(new)\n    if head and tail and not path.exists(head):\n        makedirs(head)\n    rename(old, new)\n    head, tail = path.split(old)\n    if head and tail:\n        try:\n            removedirs(head)\n        except OSError:\n            pass\n\n__all__.extend([\"makedirs\", \"removedirs\", \"renames\"])\n\ndef walk(top, topdown=True, onerror=None, followlinks=False):\n    \"\"\"Directory tree generator.\n\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding '.' and '..'), yields a 3-tuple\n\n        dirpath, dirnames, filenames\n\n    dirpath is a string, the path to the directory.  dirnames is a list of\n    the names of the subdirectories in dirpath (excluding '.' and '..').\n    filenames is a list of the names of the non-directory files in dirpath.\n    Note that the names in the lists are just names, with no path components.\n    To get a full path (which begins with top) to a file or directory in\n    dirpath, do os.path.join(dirpath, name).\n\n    If optional arg 'topdown' is true or not specified, the triple for a\n    directory is generated before the triples for any of its subdirectories\n    (directories are generated top down).  If topdown is false, the triple\n    for a directory is generated after the triples for all of its\n    subdirectories (directories are generated bottom up).\n\n    When topdown is true, the caller can modify the dirnames list in-place\n    (e.g., via del or slice assignment), and walk will only recurse into the\n    subdirectories whose names remain in dirnames; this can be used to prune the\n    search, or to impose a specific order of visiting.  Modifying dirnames when\n    topdown is false has no effect on the behavior of os.walk(), since the\n    directories in dirnames have already been generated by the time dirnames\n    itself is generated. No matter the value of topdown, the list of\n    subdirectories is retrieved before the tuples for the directory and its\n    subdirectories are generated.\n\n    By default errors from the os.scandir() call are ignored.  If\n    optional arg 'onerror' is specified, it should be a function; it\n    will be called with one argument, an OSError instance.  It can\n    report the error to continue with the walk, or raise the exception\n    to abort the walk.  Note that the filename is available as the\n    filename attribute of the exception object.\n\n    By default, os.walk does not follow symbolic links to subdirectories on\n    systems that support them.  In order to get this functionality, set the\n    optional argument 'followlinks' to true.\n\n    Caution:  if you pass a relative pathname for top, don't change the\n    current working directory between resumptions of walk.  walk never\n    changes the current directory, and assumes that the client doesn't\n    either.\n\n    Example:\n\n    import os\n    from os.path import join, getsize\n    for root, dirs, files in os.walk('python/Lib/email'):\n        print(root, \"consumes\", end=\"\")\n        print(sum(getsize(join(root, name)) for name in files), end=\"\")\n        print(\"bytes in\", len(files), \"non-directory files\")\n        if 'CVS' in dirs:\n            dirs.remove('CVS')  # don't visit CVS directories\n\n    \"\"\"\n    top = fspath(top)\n    dirs = []\n    nondirs = []\n    walk_dirs = []\n\n    # We may not have read permission for top, in which case we can't\n    # get a list of the files the directory contains.  os.walk\n    # always suppressed the exception then, rather than blow up for a\n    # minor reason when (say) a thousand readable directories are still\n    # left to visit.  That logic is copied here.\n    try:\n        # Note that scandir is global in this module due\n        # to earlier import-*.\n        scandir_it = scandir(top)\n    except OSError as error:\n        if onerror is not None:\n            onerror(error)\n        return\n\n    with scandir_it:\n        while True:\n            try:\n                try:\n                    entry = next(scandir_it)\n                except StopIteration:\n                    break\n            except OSError as error:\n                if onerror is not None:\n                    onerror(error)\n                return\n\n            try:\n                is_dir = entry.is_dir()\n            except OSError:\n                # If is_dir() raises an OSError, consider that the entry is not\n                # a directory, same behaviour than os.path.isdir().\n                is_dir = False\n\n            if is_dir:\n                dirs.append(entry.name)\n            else:\n                nondirs.append(entry.name)\n\n            if not topdown and is_dir:\n                # Bottom-up: recurse into sub-directory, but exclude symlinks to\n                # directories if followlinks is False\n                if followlinks:\n                    walk_into = True\n                else:\n                    try:\n                        is_symlink = entry.is_symlink()\n                    except OSError:\n                        # If is_symlink() raises an OSError, consider that the\n                        # entry is not a symbolic link, same behaviour than\n                        # os.path.islink().\n                        is_symlink = False\n                    walk_into = not is_symlink\n\n                if walk_into:\n                    walk_dirs.append(entry.path)\n\n    # Yield before recursion if going top down\n    if topdown:\n        yield top, dirs, nondirs\n\n        # Recurse into sub-directories\n        islink, join = path.islink, path.join\n        for dirname in dirs:\n            new_path = join(top, dirname)\n            # Issue #23605: os.path.islink() is used instead of caching\n            # entry.is_symlink() result during the loop on os.scandir() because\n            # the caller can replace the directory entry during the \"yield\"\n            # above.\n            if followlinks or not islink(new_path):\n                yield from walk(new_path, topdown, onerror, followlinks)\n    else:\n        # Recurse into sub-directories\n        for new_path in walk_dirs:\n            yield from walk(new_path, topdown, onerror, followlinks)\n        # Yield after recursion if going bottom up\n        yield top, dirs, nondirs\n\n__all__.append(\"walk\")\n\nif {open, stat} <= supports_dir_fd and {scandir, stat} <= supports_fd:\n\n    def fwalk(top=\".\", topdown=True, onerror=None, *, follow_symlinks=False, dir_fd=None):\n        \"\"\"Directory tree generator.\n\n        This behaves exactly like walk(), except that it yields a 4-tuple\n\n            dirpath, dirnames, filenames, dirfd\n\n        `dirpath`, `dirnames` and `filenames` are identical to walk() output,\n        and `dirfd` is a file descriptor referring to the directory `dirpath`.\n\n        The advantage of fwalk() over walk() is that it's safe against symlink\n        races (when follow_symlinks is False).\n\n        If dir_fd is not None, it should be a file descriptor open to a directory,\n          and top should be relative; top will then be relative to that directory.\n          (dir_fd is always supported for fwalk.)\n\n        Caution:\n        Since fwalk() yields file descriptors, those are only valid until the\n        next iteration step, so you should dup() them if you want to keep them\n        for a longer period.\n\n        Example:\n\n        import os\n        for root, dirs, files, rootfd in os.fwalk('python/Lib/email'):\n            print(root, \"consumes\", end=\"\")\n            print(sum(os.stat(name, dir_fd=rootfd).st_size for name in files),\n                  end=\"\")\n            print(\"bytes in\", len(files), \"non-directory files\")\n            if 'CVS' in dirs:\n                dirs.remove('CVS')  # don't visit CVS directories\n        \"\"\"\n        if not isinstance(top, int) or not hasattr(top, '__index__'):\n            top = fspath(top)\n        # Note: To guard against symlink races, we use the standard\n        # lstat()/open()/fstat() trick.\n        if not follow_symlinks:\n            orig_st = stat(top, follow_symlinks=False, dir_fd=dir_fd)\n        topfd = open(top, O_RDONLY, dir_fd=dir_fd)\n        try:\n            if (follow_symlinks or (st.S_ISDIR(orig_st.st_mode) and\n                                    path.samestat(orig_st, stat(topfd)))):\n                yield from _fwalk(topfd, top, isinstance(top, bytes),\n                                  topdown, onerror, follow_symlinks)\n        finally:\n            close(topfd)\n\n    def _fwalk(topfd, toppath, isbytes, topdown, onerror, follow_symlinks):\n        # Note: This uses O(depth of the directory tree) file descriptors: if\n        # necessary, it can be adapted to only require O(1) FDs, see issue\n        # #13734.\n\n        scandir_it = scandir(topfd)\n        dirs = []\n        nondirs = []\n        entries = None if topdown or follow_symlinks else []\n        for entry in scandir_it:\n            name = entry.name\n            if isbytes:\n                name = fsencode(name)\n            try:\n                if entry.is_dir():\n                    dirs.append(name)\n                    if entries is not None:\n                        entries.append(entry)\n                else:\n                    nondirs.append(name)\n            except OSError:\n                try:\n                    # Add dangling symlinks, ignore disappeared files\n                    if entry.is_symlink():\n                        nondirs.append(name)\n                except OSError:\n                    pass\n\n        if topdown:\n            yield toppath, dirs, nondirs, topfd\n\n        for name in dirs if entries is None else zip(dirs, entries):\n            try:\n                if not follow_symlinks:\n                    if topdown:\n                        orig_st = stat(name, dir_fd=topfd, follow_symlinks=False)\n                    else:\n                        assert entries is not None\n                        name, entry = name\n                        orig_st = entry.stat(follow_symlinks=False)\n                dirfd = open(name, O_RDONLY, dir_fd=topfd)\n            except OSError as err:\n                if onerror is not None:\n                    onerror(err)\n                continue\n            try:\n                if follow_symlinks or path.samestat(orig_st, stat(dirfd)):\n                    dirpath = path.join(toppath, name)\n                    yield from _fwalk(dirfd, dirpath, isbytes,\n                                      topdown, onerror, follow_symlinks)\n            finally:\n                close(dirfd)\n\n        if not topdown:\n            yield toppath, dirs, nondirs, topfd\n\n    __all__.append(\"fwalk\")\n\ndef execl(file, *args):\n    \"\"\"execl(file, *args)\n\n    Execute the executable file with argument list args, replacing the\n    current process. \"\"\"\n    execv(file, args)\n\ndef execle(file, *args):\n    \"\"\"execle(file, *args, env)\n\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. \"\"\"\n    env = args[-1]\n    execve(file, args[:-1], env)\n\ndef execlp(file, *args):\n    \"\"\"execlp(file, *args)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. \"\"\"\n    execvp(file, args)\n\ndef execlpe(file, *args):\n    \"\"\"execlpe(file, *args, env)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. \"\"\"\n    env = args[-1]\n    execvpe(file, args[:-1], env)\n\ndef execvp(file, args):\n    \"\"\"execvp(file, args)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process.\n    args may be a list or tuple of strings. \"\"\"\n    _execvpe(file, args)\n\ndef execvpe(file, args, env):\n    \"\"\"execvpe(file, args, env)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the\n    current process.\n    args may be a list or tuple of strings. \"\"\"\n    _execvpe(file, args, env)\n\n__all__.extend([\"execl\",\"execle\",\"execlp\",\"execlpe\",\"execvp\",\"execvpe\"])\n\ndef _execvpe(file, args, env=None):\n    if env is not None:\n        exec_func = execve\n        argrest = (args, env)\n    else:\n        exec_func = execv\n        argrest = (args,)\n        env = environ\n\n    if path.dirname(file):\n        exec_func(file, *argrest)\n        return\n    saved_exc = None\n    path_list = get_exec_path(env)\n    if name != 'nt':\n        file = fsencode(file)\n        path_list = map(fsencode, path_list)\n    for dir in path_list:\n        fullname = path.join(dir, file)\n        try:\n            exec_func(fullname, *argrest)\n        except (FileNotFoundError, NotADirectoryError) as e:\n            last_exc = e\n        except OSError as e:\n            last_exc = e\n            if saved_exc is None:\n                saved_exc = e\n    if saved_exc is not None:\n        raise saved_exc\n    raise last_exc\n\n\ndef get_exec_path(env=None):\n    \"\"\"Returns the sequence of directories that will be searched for the\n    named executable (similar to a shell) when launching a process.\n\n    *env* must be an environment variable dict or None.  If *env* is None,\n    os.environ will be used.\n    \"\"\"\n    # Use a local import instead of a global import to limit the number of\n    # modules loaded at startup: the os module is always loaded at startup by\n    # Python. It may also avoid a bootstrap issue.\n    import warnings\n\n    if env is None:\n        env = environ\n\n    # {b'PATH': ...}.get('PATH') and {'PATH': ...}.get(b'PATH') emit a\n    # BytesWarning when using python -b or python -bb: ignore the warning\n    with warnings.catch_warnings():\n        warnings.simplefilter(\"ignore\", BytesWarning)\n\n        try:\n            path_list = env.get('PATH')\n        except TypeError:\n            path_list = None\n\n        if supports_bytes_environ:\n            try:\n                path_listb = env[b'PATH']\n            except (KeyError, TypeError):\n                pass\n            else:\n                if path_list is not None:\n                    raise ValueError(\n                        \"env cannot contain 'PATH' and b'PATH' keys\")\n                path_list = path_listb\n\n            if path_list is not None and isinstance(path_list, bytes):\n                path_list = fsdecode(path_list)\n\n    if path_list is None:\n        path_list = defpath\n    return path_list.split(pathsep)\n\n\n# Change environ to automatically call putenv(), unsetenv if they exist.\nfrom _collections_abc import MutableMapping\n\nclass _Environ(MutableMapping):\n    def __init__(self, data, encodekey, decodekey, encodevalue, decodevalue, putenv, unsetenv):\n        self.encodekey = encodekey\n        self.decodekey = decodekey\n        self.encodevalue = encodevalue\n        self.decodevalue = decodevalue\n        self.putenv = putenv\n        self.unsetenv = unsetenv\n        self._data = data\n\n    def __getitem__(self, key):\n        try:\n            value = self._data[self.encodekey(key)]\n        except KeyError:\n            # raise KeyError with the original key value\n            raise KeyError(key) from None\n        return self.decodevalue(value)\n\n    def __setitem__(self, key, value):\n        key = self.encodekey(key)\n        value = self.encodevalue(value)\n        self.putenv(key, value)\n        self._data[key] = value\n\n    def __delitem__(self, key):\n        encodedkey = self.encodekey(key)\n        self.unsetenv(encodedkey)\n        try:\n            del self._data[encodedkey]\n        except KeyError:\n            # raise KeyError with the original key value\n            raise KeyError(key) from None\n\n    def __iter__(self):\n        # list() from dict object is an atomic operation\n        keys = list(self._data)\n        for key in keys:\n            yield self.decodekey(key)\n\n    def __len__(self):\n        return len(self._data)\n\n    def __repr__(self):\n        return 'environ({{{}}})'.format(', '.join(\n            ('{!r}: {!r}'.format(self.decodekey(key), self.decodevalue(value))\n            for key, value in self._data.items())))\n\n    def copy(self):\n        return dict(self)\n\n    def setdefault(self, key, value):\n        if key not in self:\n            self[key] = value\n        return self[key]\n\ntry:\n    _putenv = putenv\nexcept NameError:\n    _putenv = lambda key, value: None\nelse:\n    if \"putenv\" not in __all__:\n        __all__.append(\"putenv\")\n\ntry:\n    _unsetenv = unsetenv\nexcept NameError:\n    _unsetenv = lambda key: _putenv(key, \"\")\nelse:\n    if \"unsetenv\" not in __all__:\n        __all__.append(\"unsetenv\")\n\ndef _createenviron():\n    if name == 'nt':\n        # Where Env Var Names Must Be UPPERCASE\n        def check_str(value):\n            if not isinstance(value, str):\n                raise TypeError(\"str expected, not %s\" % type(value).__name__)\n            return value\n        encode = check_str\n        decode = str\n        def encodekey(key):\n            return encode(key).upper()\n        data = {}\n        for key, value in environ.items():\n            data[encodekey(key)] = value\n    else:\n        # Where Env Var Names Can Be Mixed Case\n        encoding = sys.getfilesystemencoding()\n        def encode(value):\n            if not isinstance(value, str):\n                raise TypeError(\"str expected, not %s\" % type(value).__name__)\n            return value.encode(encoding, 'surrogateescape')\n        def decode(value):\n            return value.decode(encoding, 'surrogateescape')\n        encodekey = encode\n        data = environ\n    return _Environ(data,\n        encodekey, decode,\n        encode, decode,\n        _putenv, _unsetenv)\n\n# unicode environ\nenviron = _createenviron()\ndel _createenviron\n\n\ndef getenv(key, default=None):\n    \"\"\"Get an environment variable, return None if it doesn't exist.\n    The optional second argument can specify an alternate default.\n    key, default and the result are str.\"\"\"\n    return environ.get(key, default)\n\nsupports_bytes_environ = (name != 'nt')\n__all__.extend((\"getenv\", \"supports_bytes_environ\"))\n\nif supports_bytes_environ:\n    def _check_bytes(value):\n        if not isinstance(value, bytes):\n            raise TypeError(\"bytes expected, not %s\" % type(value).__name__)\n        return value\n\n    # bytes environ\n    environb = _Environ(environ._data,\n        _check_bytes, bytes,\n        _check_bytes, bytes,\n        _putenv, _unsetenv)\n    del _check_bytes\n\n    def getenvb(key, default=None):\n        \"\"\"Get an environment variable, return None if it doesn't exist.\n        The optional second argument can specify an alternate default.\n        key, default and the result are bytes.\"\"\"\n        return environb.get(key, default)\n\n    __all__.extend((\"environb\", \"getenvb\"))\n\ndef _fscodec():\n    encoding = sys.getfilesystemencoding()\n    errors = sys.getfilesystemencodeerrors()\n\n    def fsencode(filename):\n        \"\"\"Encode filename (an os.PathLike, bytes, or str) to the filesystem\n        encoding with 'surrogateescape' error handler, return bytes unchanged.\n        On Windows, use 'strict' error handler if the file system encoding is\n        'mbcs' (which is the default encoding).\n        \"\"\"\n        filename = fspath(filename)  # Does type-checking of `filename`.\n        if isinstance(filename, str):\n            return filename.encode(encoding, errors)\n        else:\n            return filename\n\n    def fsdecode(filename):\n        \"\"\"Decode filename (an os.PathLike, bytes, or str) from the filesystem\n        encoding with 'surrogateescape' error handler, return str unchanged. On\n        Windows, use 'strict' error handler if the file system encoding is\n        'mbcs' (which is the default encoding).\n        \"\"\"\n        filename = fspath(filename)  # Does type-checking of `filename`.\n        if isinstance(filename, bytes):\n            return filename.decode(encoding, errors)\n        else:\n            return filename\n\n    return fsencode, fsdecode\n\nfsencode, fsdecode = _fscodec()\ndel _fscodec\n\n# Supply spawn*() (probably only for Unix)\nif _exists(\"fork\") and not _exists(\"spawnv\") and _exists(\"execv\"):\n\n    P_WAIT = 0\n    P_NOWAIT = P_NOWAITO = 1\n\n    __all__.extend([\"P_WAIT\", \"P_NOWAIT\", \"P_NOWAITO\"])\n\n    # XXX Should we support P_DETACH?  I suppose it could fork()**2\n    # and close the std I/O streams.  Also, P_OVERLAY is the same\n    # as execv*()?\n\n    def _spawnvef(mode, file, args, env, func):\n        # Internal helper; func is the exec*() function to use\n        if not isinstance(args, (tuple, list)):\n            raise TypeError('argv must be a tuple or a list')\n        if not args or not args[0]:\n            raise ValueError('argv first element cannot be empty')\n        pid = fork()\n        if not pid:\n            # Child\n            try:\n                if env is None:\n                    func(file, args)\n                else:\n                    func(file, args, env)\n            except:\n                _exit(127)\n        else:\n            # Parent\n            if mode == P_NOWAIT:\n                return pid # Caller is responsible for waiting!\n            while 1:\n                wpid, sts = waitpid(pid, 0)\n                if WIFSTOPPED(sts):\n                    continue\n                elif WIFSIGNALED(sts):\n                    return -WTERMSIG(sts)\n                elif WIFEXITED(sts):\n                    return WEXITSTATUS(sts)\n                else:\n                    raise OSError(\"Not stopped, signaled or exited???\")\n\n    def spawnv(mode, file, args):\n        \"\"\"spawnv(mode, file, args) -> integer\n\nExecute file with arguments from args in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return _spawnvef(mode, file, args, None, execv)\n\n    def spawnve(mode, file, args, env):\n        \"\"\"spawnve(mode, file, args, env) -> integer\n\nExecute file with arguments from args in a subprocess with the\nspecified environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return _spawnvef(mode, file, args, env, execve)\n\n    # Note: spawnvp[e] isn't currently supported on Windows\n\n    def spawnvp(mode, file, args):\n        \"\"\"spawnvp(mode, file, args) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return _spawnvef(mode, file, args, None, execvp)\n\n    def spawnvpe(mode, file, args, env):\n        \"\"\"spawnvpe(mode, file, args, env) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return _spawnvef(mode, file, args, env, execvpe)\n\n\n    __all__.extend([\"spawnv\", \"spawnve\", \"spawnvp\", \"spawnvpe\"])\n\n\nif _exists(\"spawnv\"):\n    # These aren't supplied by the basic Windows code\n    # but can be easily implemented in Python\n\n    def spawnl(mode, file, *args):\n        \"\"\"spawnl(mode, file, *args) -> integer\n\nExecute file with arguments from args in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return spawnv(mode, file, args)\n\n    def spawnle(mode, file, *args):\n        \"\"\"spawnle(mode, file, *args, env) -> integer\n\nExecute file with arguments from args in a subprocess with the\nsupplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        env = args[-1]\n        return spawnve(mode, file, args[:-1], env)\n\n\n    __all__.extend([\"spawnl\", \"spawnle\"])\n\n\nif _exists(\"spawnvp\"):\n    # At the moment, Windows doesn't implement spawnvp[e],\n    # so it won't have spawnlp[e] either.\n    def spawnlp(mode, file, *args):\n        \"\"\"spawnlp(mode, file, *args) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        return spawnvp(mode, file, args)\n\n    def spawnlpe(mode, file, *args):\n        \"\"\"spawnlpe(mode, file, *args, env) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. \"\"\"\n        env = args[-1]\n        return spawnvpe(mode, file, args[:-1], env)\n\n\n    __all__.extend([\"spawnlp\", \"spawnlpe\"])\n\n\n# Supply os.popen()\ndef popen(cmd, mode=\"r\", buffering=-1):\n    if not isinstance(cmd, str):\n        raise TypeError(\"invalid cmd type (%s, expected string)\" % type(cmd))\n    if mode not in (\"r\", \"w\"):\n        raise ValueError(\"invalid mode %r\" % mode)\n    if buffering == 0 or buffering is None:\n        raise ValueError(\"popen() does not support unbuffered streams\")\n    import subprocess, io\n    if mode == \"r\":\n        proc = subprocess.Popen(cmd,\n                                shell=True,\n                                stdout=subprocess.PIPE,\n                                bufsize=buffering)\n        return _wrap_close(io.TextIOWrapper(proc.stdout), proc)\n    else:\n        proc = subprocess.Popen(cmd,\n                                shell=True,\n                                stdin=subprocess.PIPE,\n                                bufsize=buffering)\n        return _wrap_close(io.TextIOWrapper(proc.stdin), proc)\n\n# Helper for popen() -- a proxy for a file whose close waits for the process\nclass _wrap_close:\n    def __init__(self, stream, proc):\n        self._stream = stream\n        self._proc = proc\n    def close(self):\n        self._stream.close()\n        returncode = self._proc.wait()\n        if returncode == 0:\n            return None\n        if name == 'nt':\n            return returncode\n        else:\n            return returncode << 8  # Shift left to match old behavior\n    def __enter__(self):\n        return self\n    def __exit__(self, *args):\n        self.close()\n    def __getattr__(self, name):\n        return getattr(self._stream, name)\n    def __iter__(self):\n        return iter(self._stream)\n\n# Supply os.fdopen()\ndef fdopen(fd, *args, **kwargs):\n    if not isinstance(fd, int):\n        raise TypeError(\"invalid fd type (%s, expected integer)\" % type(fd))\n    import io\n    return io.open(fd, *args, **kwargs)\n\n\n# For testing purposes, make sure the function is available when the C\n# implementation exists.\ndef _fspath(path):\n    \"\"\"Return the path representation of a path-like object.\n\n    If str or bytes is passed in, it is returned unchanged. Otherwise the\n    os.PathLike interface is used to get the path representation. If the\n    path representation is not str or bytes, TypeError is raised. If the\n    provided path is not str, bytes, or os.PathLike, TypeError is raised.\n    \"\"\"\n    if isinstance(path, (str, bytes)):\n        return path\n\n    # Work from the object's type to match method resolution of other magic\n    # methods.\n    path_type = type(path)\n    try:\n        path_repr = path_type.__fspath__(path)\n    except AttributeError:\n        if hasattr(path_type, '__fspath__'):\n            raise\n        else:\n            raise TypeError(\"expected str, bytes or os.PathLike object, \"\n                            \"not \" + path_type.__name__)\n    if isinstance(path_repr, (str, bytes)):\n        return path_repr\n    else:\n        raise TypeError(\"expected {}.__fspath__() to return str or bytes, \"\n                        \"not {}\".format(path_type.__name__,\n                                        type(path_repr).__name__))\n\n# If there is no C implementation, make the pure Python version the\n# implementation as transparently as possible.\nif not _exists('fspath'):\n    fspath = _fspath\n    fspath.__name__ = \"fspath\"\n\n\nclass PathLike(abc.ABC):\n\n    \"\"\"Abstract base class for implementing the file system path protocol.\"\"\"\n\n    @abc.abstractmethod\n    def __fspath__(self):\n        \"\"\"Return the file system path representation of the object.\"\"\"\n        raise NotImplementedError\n\n    @classmethod\n    def __subclasshook__(cls, subclass):\n        if cls is PathLike:\n            return _check_methods(subclass, '__fspath__')\n        return NotImplemented\n\n\nif name == 'nt':\n    class _AddedDllDirectory:\n        def __init__(self, path, cookie, remove_dll_directory):\n            self.path = path\n            self._cookie = cookie\n            self._remove_dll_directory = remove_dll_directory\n        def close(self):\n            self._remove_dll_directory(self._cookie)\n            self.path = None\n        def __enter__(self):\n            return self\n        def __exit__(self, *args):\n            self.close()\n        def __repr__(self):\n            if self.path:\n                return \"<AddedDllDirectory({!r})>\".format(self.path)\n            return \"<AddedDllDirectory()>\"\n\n    def add_dll_directory(path):\n        \"\"\"Add a path to the DLL search path.\n\n        This search path is used when resolving dependencies for imported\n        extension modules (the module itself is resolved through sys.path),\n        and also by ctypes.\n\n        Remove the directory by calling close() on the returned object or\n        using it in a with statement.\n        \"\"\"\n        import nt\n        cookie = nt._add_dll_directory(path)\n        return _AddedDllDirectory(\n            path,\n            cookie,\n            nt._remove_dll_directory\n        )\n", 1114], "C:\\Python38\\lib\\_collections_abc.py": ["# Copyright 2007 Google, Inc. All Rights Reserved.\n# Licensed to PSF under a Contributor Agreement.\n\n\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.\n\nUnit tests are in test_collections.\n\"\"\"\n\nfrom abc import ABCMeta, abstractmethod\nimport sys\n\n__all__ = [\"Awaitable\", \"Coroutine\",\n           \"AsyncIterable\", \"AsyncIterator\", \"AsyncGenerator\",\n           \"Hashable\", \"Iterable\", \"Iterator\", \"Generator\", \"Reversible\",\n           \"Sized\", \"Container\", \"Callable\", \"Collection\",\n           \"Set\", \"MutableSet\",\n           \"Mapping\", \"MutableMapping\",\n           \"MappingView\", \"KeysView\", \"ItemsView\", \"ValuesView\",\n           \"Sequence\", \"MutableSequence\",\n           \"ByteString\",\n           ]\n\n# This module has been renamed from collections.abc to _collections_abc to\n# speed up interpreter startup. Some of the types such as MutableMapping are\n# required early but collections module imports a lot of other modules.\n# See issue #19218\n__name__ = \"collections.abc\"\n\n# Private list of types that we want to register with the various ABCs\n# so that they will pass tests like:\n#       it = iter(somebytearray)\n#       assert isinstance(it, Iterable)\n# Note:  in other implementations, these types might not be distinct\n# and they may have their own implementation specific types that\n# are not included on this list.\nbytes_iterator = type(iter(b''))\nbytearray_iterator = type(iter(bytearray()))\n#callable_iterator = ???\ndict_keyiterator = type(iter({}.keys()))\ndict_valueiterator = type(iter({}.values()))\ndict_itemiterator = type(iter({}.items()))\nlist_iterator = type(iter([]))\nlist_reverseiterator = type(iter(reversed([])))\nrange_iterator = type(iter(range(0)))\nlongrange_iterator = type(iter(range(1 << 1000)))\nset_iterator = type(iter(set()))\nstr_iterator = type(iter(\"\"))\ntuple_iterator = type(iter(()))\nzip_iterator = type(iter(zip()))\n## views ##\ndict_keys = type({}.keys())\ndict_values = type({}.values())\ndict_items = type({}.items())\n## misc ##\nmappingproxy = type(type.__dict__)\ngenerator = type((lambda: (yield))())\n## coroutine ##\nasync def _coro(): pass\n_coro = _coro()\ncoroutine = type(_coro)\n_coro.close()  # Prevent ResourceWarning\ndel _coro\n## asynchronous generator ##\nasync def _ag(): yield\n_ag = _ag()\nasync_generator = type(_ag)\ndel _ag\n\n\n### ONE-TRICK PONIES ###\n\ndef _check_methods(C, *methods):\n    mro = C.__mro__\n    for method in methods:\n        for B in mro:\n            if method in B.__dict__:\n                if B.__dict__[method] is None:\n                    return NotImplemented\n                break\n        else:\n            return NotImplemented\n    return True\n\nclass Hashable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __hash__(self):\n        return 0\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Hashable:\n            return _check_methods(C, \"__hash__\")\n        return NotImplemented\n\n\nclass Awaitable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __await__(self):\n        yield\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Awaitable:\n            return _check_methods(C, \"__await__\")\n        return NotImplemented\n\n\nclass Coroutine(Awaitable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def send(self, value):\n        \"\"\"Send a value into the coroutine.\n        Return next yielded value or raise StopIteration.\n        \"\"\"\n        raise StopIteration\n\n    @abstractmethod\n    def throw(self, typ, val=None, tb=None):\n        \"\"\"Raise an exception in the coroutine.\n        Return next yielded value or raise StopIteration.\n        \"\"\"\n        if val is None:\n            if tb is None:\n                raise typ\n            val = typ()\n        if tb is not None:\n            val = val.with_traceback(tb)\n        raise val\n\n    def close(self):\n        \"\"\"Raise GeneratorExit inside coroutine.\n        \"\"\"\n        try:\n            self.throw(GeneratorExit)\n        except (GeneratorExit, StopIteration):\n            pass\n        else:\n            raise RuntimeError(\"coroutine ignored GeneratorExit\")\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Coroutine:\n            return _check_methods(C, '__await__', 'send', 'throw', 'close')\n        return NotImplemented\n\n\nCoroutine.register(coroutine)\n\n\nclass AsyncIterable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __aiter__(self):\n        return AsyncIterator()\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is AsyncIterable:\n            return _check_methods(C, \"__aiter__\")\n        return NotImplemented\n\n\nclass AsyncIterator(AsyncIterable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    async def __anext__(self):\n        \"\"\"Return the next item or raise StopAsyncIteration when exhausted.\"\"\"\n        raise StopAsyncIteration\n\n    def __aiter__(self):\n        return self\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is AsyncIterator:\n            return _check_methods(C, \"__anext__\", \"__aiter__\")\n        return NotImplemented\n\n\nclass AsyncGenerator(AsyncIterator):\n\n    __slots__ = ()\n\n    async def __anext__(self):\n        \"\"\"Return the next item from the asynchronous generator.\n        When exhausted, raise StopAsyncIteration.\n        \"\"\"\n        return await self.asend(None)\n\n    @abstractmethod\n    async def asend(self, value):\n        \"\"\"Send a value into the asynchronous generator.\n        Return next yielded value or raise StopAsyncIteration.\n        \"\"\"\n        raise StopAsyncIteration\n\n    @abstractmethod\n    async def athrow(self, typ, val=None, tb=None):\n        \"\"\"Raise an exception in the asynchronous generator.\n        Return next yielded value or raise StopAsyncIteration.\n        \"\"\"\n        if val is None:\n            if tb is None:\n                raise typ\n            val = typ()\n        if tb is not None:\n            val = val.with_traceback(tb)\n        raise val\n\n    async def aclose(self):\n        \"\"\"Raise GeneratorExit inside coroutine.\n        \"\"\"\n        try:\n            await self.athrow(GeneratorExit)\n        except (GeneratorExit, StopAsyncIteration):\n            pass\n        else:\n            raise RuntimeError(\"asynchronous generator ignored GeneratorExit\")\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is AsyncGenerator:\n            return _check_methods(C, '__aiter__', '__anext__',\n                                  'asend', 'athrow', 'aclose')\n        return NotImplemented\n\n\nAsyncGenerator.register(async_generator)\n\n\nclass Iterable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __iter__(self):\n        while False:\n            yield None\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Iterable:\n            return _check_methods(C, \"__iter__\")\n        return NotImplemented\n\n\nclass Iterator(Iterable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __next__(self):\n        'Return the next item from the iterator. When exhausted, raise StopIteration'\n        raise StopIteration\n\n    def __iter__(self):\n        return self\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Iterator:\n            return _check_methods(C, '__iter__', '__next__')\n        return NotImplemented\n\nIterator.register(bytes_iterator)\nIterator.register(bytearray_iterator)\n#Iterator.register(callable_iterator)\nIterator.register(dict_keyiterator)\nIterator.register(dict_valueiterator)\nIterator.register(dict_itemiterator)\nIterator.register(list_iterator)\nIterator.register(list_reverseiterator)\nIterator.register(range_iterator)\nIterator.register(longrange_iterator)\nIterator.register(set_iterator)\nIterator.register(str_iterator)\nIterator.register(tuple_iterator)\nIterator.register(zip_iterator)\n\n\nclass Reversible(Iterable):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __reversed__(self):\n        while False:\n            yield None\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Reversible:\n            return _check_methods(C, \"__reversed__\", \"__iter__\")\n        return NotImplemented\n\n\nclass Generator(Iterator):\n\n    __slots__ = ()\n\n    def __next__(self):\n        \"\"\"Return the next item from the generator.\n        When exhausted, raise StopIteration.\n        \"\"\"\n        return self.send(None)\n\n    @abstractmethod\n    def send(self, value):\n        \"\"\"Send a value into the generator.\n        Return next yielded value or raise StopIteration.\n        \"\"\"\n        raise StopIteration\n\n    @abstractmethod\n    def throw(self, typ, val=None, tb=None):\n        \"\"\"Raise an exception in the generator.\n        Return next yielded value or raise StopIteration.\n        \"\"\"\n        if val is None:\n            if tb is None:\n                raise typ\n            val = typ()\n        if tb is not None:\n            val = val.with_traceback(tb)\n        raise val\n\n    def close(self):\n        \"\"\"Raise GeneratorExit inside generator.\n        \"\"\"\n        try:\n            self.throw(GeneratorExit)\n        except (GeneratorExit, StopIteration):\n            pass\n        else:\n            raise RuntimeError(\"generator ignored GeneratorExit\")\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Generator:\n            return _check_methods(C, '__iter__', '__next__',\n                                  'send', 'throw', 'close')\n        return NotImplemented\n\nGenerator.register(generator)\n\n\nclass Sized(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __len__(self):\n        return 0\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Sized:\n            return _check_methods(C, \"__len__\")\n        return NotImplemented\n\n\nclass Container(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __contains__(self, x):\n        return False\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Container:\n            return _check_methods(C, \"__contains__\")\n        return NotImplemented\n\nclass Collection(Sized, Iterable, Container):\n\n    __slots__ = ()\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Collection:\n            return _check_methods(C,  \"__len__\", \"__iter__\", \"__contains__\")\n        return NotImplemented\n\nclass Callable(metaclass=ABCMeta):\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __call__(self, *args, **kwds):\n        return False\n\n    @classmethod\n    def __subclasshook__(cls, C):\n        if cls is Callable:\n            return _check_methods(C, \"__call__\")\n        return NotImplemented\n\n\n### SETS ###\n\n\nclass Set(Collection):\n\n    \"\"\"A set is a finite, iterable container.\n\n    This class provides concrete generic implementations of all\n    methods except for __contains__, __iter__ and __len__.\n\n    To override the comparisons (presumably for speed, as the\n    semantics are fixed), redefine __le__ and __ge__,\n    then the other operations will automatically follow suit.\n    \"\"\"\n\n    __slots__ = ()\n\n    def __le__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        if len(self) > len(other):\n            return False\n        for elem in self:\n            if elem not in other:\n                return False\n        return True\n\n    def __lt__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        return len(self) < len(other) and self.__le__(other)\n\n    def __gt__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        return len(self) > len(other) and self.__ge__(other)\n\n    def __ge__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        if len(self) < len(other):\n            return False\n        for elem in other:\n            if elem not in self:\n                return False\n        return True\n\n    def __eq__(self, other):\n        if not isinstance(other, Set):\n            return NotImplemented\n        return len(self) == len(other) and self.__le__(other)\n\n    @classmethod\n    def _from_iterable(cls, it):\n        '''Construct an instance of the class from any iterable input.\n\n        Must override this method if the class constructor signature\n        does not accept an iterable for an input.\n        '''\n        return cls(it)\n\n    def __and__(self, other):\n        if not isinstance(other, Iterable):\n            return NotImplemented\n        return self._from_iterable(value for value in other if value in self)\n\n    __rand__ = __and__\n\n    def isdisjoint(self, other):\n        'Return True if two sets have a null intersection.'\n        for value in other:\n            if value in self:\n                return False\n        return True\n\n    def __or__(self, other):\n        if not isinstance(other, Iterable):\n            return NotImplemented\n        chain = (e for s in (self, other) for e in s)\n        return self._from_iterable(chain)\n\n    __ror__ = __or__\n\n    def __sub__(self, other):\n        if not isinstance(other, Set):\n            if not isinstance(other, Iterable):\n                return NotImplemented\n            other = self._from_iterable(other)\n        return self._from_iterable(value for value in self\n                                   if value not in other)\n\n    def __rsub__(self, other):\n        if not isinstance(other, Set):\n            if not isinstance(other, Iterable):\n                return NotImplemented\n            other = self._from_iterable(other)\n        return self._from_iterable(value for value in other\n                                   if value not in self)\n\n    def __xor__(self, other):\n        if not isinstance(other, Set):\n            if not isinstance(other, Iterable):\n                return NotImplemented\n            other = self._from_iterable(other)\n        return (self - other) | (other - self)\n\n    __rxor__ = __xor__\n\n    def _hash(self):\n        \"\"\"Compute the hash value of a set.\n\n        Note that we don't define __hash__: not all sets are hashable.\n        But if you define a hashable set type, its __hash__ should\n        call this function.\n\n        This must be compatible __eq__.\n\n        All sets ought to compare equal if they contain the same\n        elements, regardless of how they are implemented, and\n        regardless of the order of the elements; so there's not much\n        freedom for __eq__ or __hash__.  We match the algorithm used\n        by the built-in frozenset type.\n        \"\"\"\n        MAX = sys.maxsize\n        MASK = 2 * MAX + 1\n        n = len(self)\n        h = 1927868237 * (n + 1)\n        h &= MASK\n        for x in self:\n            hx = hash(x)\n            h ^= (hx ^ (hx << 16) ^ 89869747)  * 3644798167\n            h &= MASK\n        h = h * 69069 + 907133923\n        h &= MASK\n        if h > MAX:\n            h -= MASK + 1\n        if h == -1:\n            h = 590923713\n        return h\n\nSet.register(frozenset)\n\n\nclass MutableSet(Set):\n    \"\"\"A mutable set is a finite, iterable container.\n\n    This class provides concrete generic implementations of all\n    methods except for __contains__, __iter__, __len__,\n    add(), and discard().\n\n    To override the comparisons (presumably for speed, as the\n    semantics are fixed), all you have to do is redefine __le__ and\n    then the other operations will automatically follow suit.\n    \"\"\"\n\n    __slots__ = ()\n\n    @abstractmethod\n    def add(self, value):\n        \"\"\"Add an element.\"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def discard(self, value):\n        \"\"\"Remove an element.  Do not raise an exception if absent.\"\"\"\n        raise NotImplementedError\n\n    def remove(self, value):\n        \"\"\"Remove an element. If not a member, raise a KeyError.\"\"\"\n        if value not in self:\n            raise KeyError(value)\n        self.discard(value)\n\n    def pop(self):\n        \"\"\"Return the popped value.  Raise KeyError if empty.\"\"\"\n        it = iter(self)\n        try:\n            value = next(it)\n        except StopIteration:\n            raise KeyError from None\n        self.discard(value)\n        return value\n\n    def clear(self):\n        \"\"\"This is slow (creates N new iterators!) but effective.\"\"\"\n        try:\n            while True:\n                self.pop()\n        except KeyError:\n            pass\n\n    def __ior__(self, it):\n        for value in it:\n            self.add(value)\n        return self\n\n    def __iand__(self, it):\n        for value in (self - it):\n            self.discard(value)\n        return self\n\n    def __ixor__(self, it):\n        if it is self:\n            self.clear()\n        else:\n            if not isinstance(it, Set):\n                it = self._from_iterable(it)\n            for value in it:\n                if value in self:\n                    self.discard(value)\n                else:\n                    self.add(value)\n        return self\n\n    def __isub__(self, it):\n        if it is self:\n            self.clear()\n        else:\n            for value in it:\n                self.discard(value)\n        return self\n\nMutableSet.register(set)\n\n\n### MAPPINGS ###\n\n\nclass Mapping(Collection):\n\n    __slots__ = ()\n\n    \"\"\"A Mapping is a generic container for associating key/value\n    pairs.\n\n    This class provides concrete generic implementations of all\n    methods except for __getitem__, __iter__, and __len__.\n\n    \"\"\"\n\n    @abstractmethod\n    def __getitem__(self, key):\n        raise KeyError\n\n    def get(self, key, default=None):\n        'D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.'\n        try:\n            return self[key]\n        except KeyError:\n            return default\n\n    def __contains__(self, key):\n        try:\n            self[key]\n        except KeyError:\n            return False\n        else:\n            return True\n\n    def keys(self):\n        \"D.keys() -> a set-like object providing a view on D's keys\"\n        return KeysView(self)\n\n    def items(self):\n        \"D.items() -> a set-like object providing a view on D's items\"\n        return ItemsView(self)\n\n    def values(self):\n        \"D.values() -> an object providing a view on D's values\"\n        return ValuesView(self)\n\n    def __eq__(self, other):\n        if not isinstance(other, Mapping):\n            return NotImplemented\n        return dict(self.items()) == dict(other.items())\n\n    __reversed__ = None\n\nMapping.register(mappingproxy)\n\n\nclass MappingView(Sized):\n\n    __slots__ = '_mapping',\n\n    def __init__(self, mapping):\n        self._mapping = mapping\n\n    def __len__(self):\n        return len(self._mapping)\n\n    def __repr__(self):\n        return '{0.__class__.__name__}({0._mapping!r})'.format(self)\n\n\nclass KeysView(MappingView, Set):\n\n    __slots__ = ()\n\n    @classmethod\n    def _from_iterable(self, it):\n        return set(it)\n\n    def __contains__(self, key):\n        return key in self._mapping\n\n    def __iter__(self):\n        yield from self._mapping\n\nKeysView.register(dict_keys)\n\n\nclass ItemsView(MappingView, Set):\n\n    __slots__ = ()\n\n    @classmethod\n    def _from_iterable(self, it):\n        return set(it)\n\n    def __contains__(self, item):\n        key, value = item\n        try:\n            v = self._mapping[key]\n        except KeyError:\n            return False\n        else:\n            return v is value or v == value\n\n    def __iter__(self):\n        for key in self._mapping:\n            yield (key, self._mapping[key])\n\nItemsView.register(dict_items)\n\n\nclass ValuesView(MappingView, Collection):\n\n    __slots__ = ()\n\n    def __contains__(self, value):\n        for key in self._mapping:\n            v = self._mapping[key]\n            if v is value or v == value:\n                return True\n        return False\n\n    def __iter__(self):\n        for key in self._mapping:\n            yield self._mapping[key]\n\nValuesView.register(dict_values)\n\n\nclass MutableMapping(Mapping):\n\n    __slots__ = ()\n\n    \"\"\"A MutableMapping is a generic container for associating\n    key/value pairs.\n\n    This class provides concrete generic implementations of all\n    methods except for __getitem__, __setitem__, __delitem__,\n    __iter__, and __len__.\n\n    \"\"\"\n\n    @abstractmethod\n    def __setitem__(self, key, value):\n        raise KeyError\n\n    @abstractmethod\n    def __delitem__(self, key):\n        raise KeyError\n\n    __marker = object()\n\n    def pop(self, key, default=__marker):\n        '''D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\n          If key is not found, d is returned if given, otherwise KeyError is raised.\n        '''\n        try:\n            value = self[key]\n        except KeyError:\n            if default is self.__marker:\n                raise\n            return default\n        else:\n            del self[key]\n            return value\n\n    def popitem(self):\n        '''D.popitem() -> (k, v), remove and return some (key, value) pair\n           as a 2-tuple; but raise KeyError if D is empty.\n        '''\n        try:\n            key = next(iter(self))\n        except StopIteration:\n            raise KeyError from None\n        value = self[key]\n        del self[key]\n        return key, value\n\n    def clear(self):\n        'D.clear() -> None.  Remove all items from D.'\n        try:\n            while True:\n                self.popitem()\n        except KeyError:\n            pass\n\n    def update(self, other=(), /, **kwds):\n        ''' D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.\n            If E present and has a .keys() method, does:     for k in E: D[k] = E[k]\n            If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v\n            In either case, this is followed by: for k, v in F.items(): D[k] = v\n        '''\n        if isinstance(other, Mapping):\n            for key in other:\n                self[key] = other[key]\n        elif hasattr(other, \"keys\"):\n            for key in other.keys():\n                self[key] = other[key]\n        else:\n            for key, value in other:\n                self[key] = value\n        for key, value in kwds.items():\n            self[key] = value\n\n    def setdefault(self, key, default=None):\n        'D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D'\n        try:\n            return self[key]\n        except KeyError:\n            self[key] = default\n        return default\n\nMutableMapping.register(dict)\n\n\n### SEQUENCES ###\n\n\nclass Sequence(Reversible, Collection):\n\n    \"\"\"All the operations on a read-only sequence.\n\n    Concrete subclasses must override __new__ or __init__,\n    __getitem__, and __len__.\n    \"\"\"\n\n    __slots__ = ()\n\n    @abstractmethod\n    def __getitem__(self, index):\n        raise IndexError\n\n    def __iter__(self):\n        i = 0\n        try:\n            while True:\n                v = self[i]\n                yield v\n                i += 1\n        except IndexError:\n            return\n\n    def __contains__(self, value):\n        for v in self:\n            if v is value or v == value:\n                return True\n        return False\n\n    def __reversed__(self):\n        for i in reversed(range(len(self))):\n            yield self[i]\n\n    def index(self, value, start=0, stop=None):\n        '''S.index(value, [start, [stop]]) -> integer -- return first index of value.\n           Raises ValueError if the value is not present.\n\n           Supporting start and stop arguments is optional, but\n           recommended.\n        '''\n        if start is not None and start < 0:\n            start = max(len(self) + start, 0)\n        if stop is not None and stop < 0:\n            stop += len(self)\n\n        i = start\n        while stop is None or i < stop:\n            try:\n                v = self[i]\n                if v is value or v == value:\n                    return i\n            except IndexError:\n                break\n            i += 1\n        raise ValueError\n\n    def count(self, value):\n        'S.count(value) -> integer -- return number of occurrences of value'\n        return sum(1 for v in self if v is value or v == value)\n\nSequence.register(tuple)\nSequence.register(str)\nSequence.register(range)\nSequence.register(memoryview)\n\n\nclass ByteString(Sequence):\n\n    \"\"\"This unifies bytes and bytearray.\n\n    XXX Should add all their methods.\n    \"\"\"\n\n    __slots__ = ()\n\nByteString.register(bytes)\nByteString.register(bytearray)\n\n\nclass MutableSequence(Sequence):\n\n    __slots__ = ()\n\n    \"\"\"All the operations on a read-write sequence.\n\n    Concrete subclasses must provide __new__ or __init__,\n    __getitem__, __setitem__, __delitem__, __len__, and insert().\n\n    \"\"\"\n\n    @abstractmethod\n    def __setitem__(self, index, value):\n        raise IndexError\n\n    @abstractmethod\n    def __delitem__(self, index):\n        raise IndexError\n\n    @abstractmethod\n    def insert(self, index, value):\n        'S.insert(index, value) -- insert value before index'\n        raise IndexError\n\n    def append(self, value):\n        'S.append(value) -- append value to the end of the sequence'\n        self.insert(len(self), value)\n\n    def clear(self):\n        'S.clear() -> None -- remove all items from S'\n        try:\n            while True:\n                self.pop()\n        except IndexError:\n            pass\n\n    def reverse(self):\n        'S.reverse() -- reverse *IN PLACE*'\n        n = len(self)\n        for i in range(n//2):\n            self[i], self[n-i-1] = self[n-i-1], self[i]\n\n    def extend(self, values):\n        'S.extend(iterable) -- extend sequence by appending elements from the iterable'\n        if values is self:\n            values = list(values)\n        for v in values:\n            self.append(v)\n\n    def pop(self, index=-1):\n        '''S.pop([index]) -> item -- remove and return item at index (default last).\n           Raise IndexError if list is empty or index is out of range.\n        '''\n        v = self[index]\n        del self[index]\n        return v\n\n    def remove(self, value):\n        '''S.remove(value) -- remove first occurrence of value.\n           Raise ValueError if the value is not present.\n        '''\n        del self[self.index(value)]\n\n    def __iadd__(self, values):\n        self.extend(values)\n        return self\n\nMutableSequence.register(list)\nMutableSequence.register(bytearray)  # Multiply inheriting, see ByteString\n", 1004], "C:\\Users\\002CSC744\\PycharmProjects\\APP_UI\\splash_screen\\__init__.py": ["from tkinter import *\n\n\n\ndef splash_window():\n    # Create an instance of tkinter frame\n    splash_win = Tk()\n    # Set the title of the window\n    splash_win.title(\"Splash Screen Example\")\n    # Define the size of the window or frame\n    # splash_win.geometry(\"700X200\")\n\n    #Remove border of the splash Window\n\n    splash_win.overrideredirect(True)\n    # Define the label of the window\n    splash_label = Label(splash_win, text= \"Hello World!\", fg= \"green\",\n                        font= ('Times New Roman', 40)).pack(pady=20)\n\n    splash_win.withdraw()\n    splash_win.update_idletasks()  # Update \"requested size\" from geometry manager\n\n    x = (splash_win.winfo_screenwidth() - splash_win    .winfo_reqwidth()) / 2\n    y = (splash_win.winfo_screenheight() - splash_win.winfo_reqheight()) / 2\n    splash_win.geometry(\"+%d+%d\" % (x, y))\n    splash_win.deiconify()\n\n    return splash_win\n\n\ndef mainWin():\n    splash_win.destroy()\n    win = Tk()\n    win.title(\"Main Window\")\n    win.geometry(\"700x200\")\n    win_label= Label(win, text= \"Main Window\", font= ('Helvetica', 25), fg= \"red\").pack(pady=20)\n\n\ndef static_call(splash_win):\n    # splash_win = splash_window()\n    splash_win.after(5000, mainWin)\n    mainloop()\n\n\nif __name__ == '__main__':\n    \"\"\"Splash Window is a generic call for generating Slpash Window for any APP.\n    Only need to call \"splash_win.after(time, app_main function)\" for initiate SPLASH Service\"\"\"\n    splash_win = splash_window()\n    static_call(splash_win)\n    # splash_win.after(5000, mainWin)\n    # mainloop()\n\n", 52], "C:\\Python38\\lib\\multiprocessing\\util.py": ["#\n# Module providing various facilities to other parts of the package\n#\n# multiprocessing/util.py\n#\n# Copyright (c) 2006-2008, R Oudkerk\n# Licensed to PSF under a Contributor Agreement.\n#\n\nimport os\nimport itertools\nimport sys\nimport weakref\nimport atexit\nimport threading        # we want threading to install it's\n                        # cleanup function before multiprocessing does\nfrom subprocess import _args_from_interpreter_flags\n\nfrom . import process\n\n__all__ = [\n    'sub_debug', 'debug', 'info', 'sub_warning', 'get_logger',\n    'log_to_stderr', 'get_temp_dir', 'register_after_fork',\n    'is_exiting', 'Finalize', 'ForkAwareThreadLock', 'ForkAwareLocal',\n    'close_all_fds_except', 'SUBDEBUG', 'SUBWARNING',\n    ]\n\n#\n# Logging\n#\n\nNOTSET = 0\nSUBDEBUG = 5\nDEBUG = 10\nINFO = 20\nSUBWARNING = 25\n\nLOGGER_NAME = 'multiprocessing'\nDEFAULT_LOGGING_FORMAT = '[%(levelname)s/%(processName)s] %(message)s'\n\n_logger = None\n_log_to_stderr = False\n\ndef sub_debug(msg, *args):\n    if _logger:\n        _logger.log(SUBDEBUG, msg, *args)\n\ndef debug(msg, *args):\n    if _logger:\n        _logger.log(DEBUG, msg, *args)\n\ndef info(msg, *args):\n    if _logger:\n        _logger.log(INFO, msg, *args)\n\ndef sub_warning(msg, *args):\n    if _logger:\n        _logger.log(SUBWARNING, msg, *args)\n\ndef get_logger():\n    '''\n    Returns logger used by multiprocessing\n    '''\n    global _logger\n    import logging\n\n    logging._acquireLock()\n    try:\n        if not _logger:\n\n            _logger = logging.getLogger(LOGGER_NAME)\n            _logger.propagate = 0\n\n            # XXX multiprocessing should cleanup before logging\n            if hasattr(atexit, 'unregister'):\n                atexit.unregister(_exit_function)\n                atexit.register(_exit_function)\n            else:\n                atexit._exithandlers.remove((_exit_function, (), {}))\n                atexit._exithandlers.append((_exit_function, (), {}))\n\n    finally:\n        logging._releaseLock()\n\n    return _logger\n\ndef log_to_stderr(level=None):\n    '''\n    Turn on logging and add a handler which prints to stderr\n    '''\n    global _log_to_stderr\n    import logging\n\n    logger = get_logger()\n    formatter = logging.Formatter(DEFAULT_LOGGING_FORMAT)\n    handler = logging.StreamHandler()\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n\n    if level:\n        logger.setLevel(level)\n    _log_to_stderr = True\n    return _logger\n\n\n# Abstract socket support\n\ndef _platform_supports_abstract_sockets():\n    if sys.platform == \"linux\":\n        return True\n    if hasattr(sys, 'getandroidapilevel'):\n        return True\n    return False\n\n\ndef is_abstract_socket_namespace(address):\n    if not address:\n        return False\n    if isinstance(address, bytes):\n        return address[0] == 0\n    elif isinstance(address, str):\n        return address[0] == \"\\0\"\n    raise TypeError('address type of {address!r} unrecognized')\n\n\nabstract_sockets_supported = _platform_supports_abstract_sockets()\n\n#\n# Function returning a temp directory which will be removed on exit\n#\n\ndef _remove_temp_dir(rmtree, tempdir):\n    rmtree(tempdir)\n\n    current_process = process.current_process()\n    # current_process() can be None if the finalizer is called\n    # late during Python finalization\n    if current_process is not None:\n        current_process._config['tempdir'] = None\n\ndef get_temp_dir():\n    # get name of a temp directory which will be automatically cleaned up\n    tempdir = process.current_process()._config.get('tempdir')\n    if tempdir is None:\n        import shutil, tempfile\n        tempdir = tempfile.mkdtemp(prefix='pymp-')\n        info('created temp directory %s', tempdir)\n        # keep a strong reference to shutil.rmtree(), since the finalizer\n        # can be called late during Python shutdown\n        Finalize(None, _remove_temp_dir, args=(shutil.rmtree, tempdir),\n                 exitpriority=-100)\n        process.current_process()._config['tempdir'] = tempdir\n    return tempdir\n\n#\n# Support for reinitialization of objects when bootstrapping a child process\n#\n\n_afterfork_registry = weakref.WeakValueDictionary()\n_afterfork_counter = itertools.count()\n\ndef _run_after_forkers():\n    items = list(_afterfork_registry.items())\n    items.sort()\n    for (index, ident, func), obj in items:\n        try:\n            func(obj)\n        except Exception as e:\n            info('after forker raised exception %s', e)\n\ndef register_after_fork(obj, func):\n    _afterfork_registry[(next(_afterfork_counter), id(obj), func)] = obj\n\n#\n# Finalization using weakrefs\n#\n\n_finalizer_registry = {}\n_finalizer_counter = itertools.count()\n\n\nclass Finalize(object):\n    '''\n    Class which supports object finalization using weakrefs\n    '''\n    def __init__(self, obj, callback, args=(), kwargs=None, exitpriority=None):\n        if (exitpriority is not None) and not isinstance(exitpriority,int):\n            raise TypeError(\n                \"Exitpriority ({0!r}) must be None or int, not {1!s}\".format(\n                    exitpriority, type(exitpriority)))\n\n        if obj is not None:\n            self._weakref = weakref.ref(obj, self)\n        elif exitpriority is None:\n            raise ValueError(\"Without object, exitpriority cannot be None\")\n\n        self._callback = callback\n        self._args = args\n        self._kwargs = kwargs or {}\n        self._key = (exitpriority, next(_finalizer_counter))\n        self._pid = os.getpid()\n\n        _finalizer_registry[self._key] = self\n\n    def __call__(self, wr=None,\n                 # Need to bind these locally because the globals can have\n                 # been cleared at shutdown\n                 _finalizer_registry=_finalizer_registry,\n                 sub_debug=sub_debug, getpid=os.getpid):\n        '''\n        Run the callback unless it has already been called or cancelled\n        '''\n        try:\n            del _finalizer_registry[self._key]\n        except KeyError:\n            sub_debug('finalizer no longer registered')\n        else:\n            if self._pid != getpid():\n                sub_debug('finalizer ignored because different process')\n                res = None\n            else:\n                sub_debug('finalizer calling %s with args %s and kwargs %s',\n                          self._callback, self._args, self._kwargs)\n                res = self._callback(*self._args, **self._kwargs)\n            self._weakref = self._callback = self._args = \\\n                            self._kwargs = self._key = None\n            return res\n\n    def cancel(self):\n        '''\n        Cancel finalization of the object\n        '''\n        try:\n            del _finalizer_registry[self._key]\n        except KeyError:\n            pass\n        else:\n            self._weakref = self._callback = self._args = \\\n                            self._kwargs = self._key = None\n\n    def still_active(self):\n        '''\n        Return whether this finalizer is still waiting to invoke callback\n        '''\n        return self._key in _finalizer_registry\n\n    def __repr__(self):\n        try:\n            obj = self._weakref()\n        except (AttributeError, TypeError):\n            obj = None\n\n        if obj is None:\n            return '<%s object, dead>' % self.__class__.__name__\n\n        x = '<%s object, callback=%s' % (\n                self.__class__.__name__,\n                getattr(self._callback, '__name__', self._callback))\n        if self._args:\n            x += ', args=' + str(self._args)\n        if self._kwargs:\n            x += ', kwargs=' + str(self._kwargs)\n        if self._key[0] is not None:\n            x += ', exitpriority=' + str(self._key[0])\n        return x + '>'\n\n\ndef _run_finalizers(minpriority=None):\n    '''\n    Run all finalizers whose exit priority is not None and at least minpriority\n\n    Finalizers with highest priority are called first; finalizers with\n    the same priority will be called in reverse order of creation.\n    '''\n    if _finalizer_registry is None:\n        # This function may be called after this module's globals are\n        # destroyed.  See the _exit_function function in this module for more\n        # notes.\n        return\n\n    if minpriority is None:\n        f = lambda p : p[0] is not None\n    else:\n        f = lambda p : p[0] is not None and p[0] >= minpriority\n\n    # Careful: _finalizer_registry may be mutated while this function\n    # is running (either by a GC run or by another thread).\n\n    # list(_finalizer_registry) should be atomic, while\n    # list(_finalizer_registry.items()) is not.\n    keys = [key for key in list(_finalizer_registry) if f(key)]\n    keys.sort(reverse=True)\n\n    for key in keys:\n        finalizer = _finalizer_registry.get(key)\n        # key may have been removed from the registry\n        if finalizer is not None:\n            sub_debug('calling %s', finalizer)\n            try:\n                finalizer()\n            except Exception:\n                import traceback\n                traceback.print_exc()\n\n    if minpriority is None:\n        _finalizer_registry.clear()\n\n#\n# Clean up on exit\n#\n\ndef is_exiting():\n    '''\n    Returns true if the process is shutting down\n    '''\n    return _exiting or _exiting is None\n\n_exiting = False\n\ndef _exit_function(info=info, debug=debug, _run_finalizers=_run_finalizers,\n                   active_children=process.active_children,\n                   current_process=process.current_process):\n    # We hold on to references to functions in the arglist due to the\n    # situation described below, where this function is called after this\n    # module's globals are destroyed.\n\n    global _exiting\n\n    if not _exiting:\n        _exiting = True\n\n        info('process shutting down')\n        debug('running all \"atexit\" finalizers with priority >= 0')\n        _run_finalizers(0)\n\n        if current_process() is not None:\n            # We check if the current process is None here because if\n            # it's None, any call to ``active_children()`` will raise\n            # an AttributeError (active_children winds up trying to\n            # get attributes from util._current_process).  One\n            # situation where this can happen is if someone has\n            # manipulated sys.modules, causing this module to be\n            # garbage collected.  The destructor for the module type\n            # then replaces all values in the module dict with None.\n            # For instance, after setuptools runs a test it replaces\n            # sys.modules with a copy created earlier.  See issues\n            # #9775 and #15881.  Also related: #4106, #9205, and\n            # #9207.\n\n            for p in active_children():\n                if p.daemon:\n                    info('calling terminate() for daemon %s', p.name)\n                    p._popen.terminate()\n\n            for p in active_children():\n                info('calling join() for process %s', p.name)\n                p.join()\n\n        debug('running the remaining \"atexit\" finalizers')\n        _run_finalizers()\n\natexit.register(_exit_function)\n\n#\n# Some fork aware types\n#\n\nclass ForkAwareThreadLock(object):\n    def __init__(self):\n        self._reset()\n        register_after_fork(self, ForkAwareThreadLock._reset)\n\n    def _reset(self):\n        self._lock = threading.Lock()\n        self.acquire = self._lock.acquire\n        self.release = self._lock.release\n\n    def __enter__(self):\n        return self._lock.__enter__()\n\n    def __exit__(self, *args):\n        return self._lock.__exit__(*args)\n\n\nclass ForkAwareLocal(threading.local):\n    def __init__(self):\n        register_after_fork(self, lambda obj : obj.__dict__.clear())\n    def __reduce__(self):\n        return type(self), ()\n\n#\n# Close fds except those specified\n#\n\ntry:\n    MAXFD = os.sysconf(\"SC_OPEN_MAX\")\nexcept Exception:\n    MAXFD = 256\n\ndef close_all_fds_except(fds):\n    fds = list(fds) + [-1, MAXFD]\n    fds.sort()\n    assert fds[-1] == MAXFD, 'fd too large'\n    for i in range(len(fds) - 1):\n        os.closerange(fds[i]+1, fds[i+1])\n#\n# Close sys.stdin and replace stdin with os.devnull\n#\n\ndef _close_stdin():\n    if sys.stdin is None:\n        return\n\n    try:\n        sys.stdin.close()\n    except (OSError, ValueError):\n        pass\n\n    try:\n        fd = os.open(os.devnull, os.O_RDONLY)\n        try:\n            sys.stdin = open(fd, closefd=False)\n        except:\n            os.close(fd)\n            raise\n    except (OSError, ValueError):\n        pass\n\n#\n# Flush standard streams, if any\n#\n\ndef _flush_std_streams():\n    try:\n        sys.stdout.flush()\n    except (AttributeError, ValueError):\n        pass\n    try:\n        sys.stderr.flush()\n    except (AttributeError, ValueError):\n        pass\n\n#\n# Start a program with only specified fds kept open\n#\n\ndef spawnv_passfds(path, args, passfds):\n    import _posixsubprocess\n    passfds = tuple(sorted(map(int, passfds)))\n    errpipe_read, errpipe_write = os.pipe()\n    try:\n        return _posixsubprocess.fork_exec(\n            args, [os.fsencode(path)], True, passfds, None, None,\n            -1, -1, -1, -1, -1, -1, errpipe_read, errpipe_write,\n            False, False, None)\n    finally:\n        os.close(errpipe_read)\n        os.close(errpipe_write)\n\n\ndef close_fds(*fds):\n    \"\"\"Close each file descriptor given as an argument\"\"\"\n    for fd in fds:\n        os.close(fd)\n\n\ndef _cleanup_tests():\n    \"\"\"Cleanup multiprocessing resources when multiprocessing tests\n    completed.\"\"\"\n\n    from test import support\n\n    # cleanup multiprocessing\n    process._cleanup()\n\n    # Stop the ForkServer process if it's running\n    from multiprocessing import forkserver\n    forkserver._forkserver._stop()\n\n    # Stop the ResourceTracker process if it's running\n    from multiprocessing import resource_tracker\n    resource_tracker._resource_tracker._stop()\n\n    # bpo-37421: Explicitly call _run_finalizers() to remove immediately\n    # temporary directories created by multiprocessing.util.get_temp_dir().\n    _run_finalizers()\n    support.gc_collect()\n\n    support.reap_children()\n", 489], "C:\\Python38\\lib\\multiprocessing\\process.py": ["#\n# Module providing the `Process` class which emulates `threading.Thread`\n#\n# multiprocessing/process.py\n#\n# Copyright (c) 2006-2008, R Oudkerk\n# Licensed to PSF under a Contributor Agreement.\n#\n\n__all__ = ['BaseProcess', 'current_process', 'active_children',\n           'parent_process']\n\n#\n# Imports\n#\n\nimport os\nimport sys\nimport signal\nimport itertools\nimport threading\nfrom _weakrefset import WeakSet\n\n#\n#\n#\n\ntry:\n    ORIGINAL_DIR = os.path.abspath(os.getcwd())\nexcept OSError:\n    ORIGINAL_DIR = None\n\n#\n# Public functions\n#\n\ndef current_process():\n    '''\n    Return process object representing the current process\n    '''\n    return _current_process\n\ndef active_children():\n    '''\n    Return list of process objects corresponding to live child processes\n    '''\n    _cleanup()\n    return list(_children)\n\n\ndef parent_process():\n    '''\n    Return process object representing the parent process\n    '''\n    return _parent_process\n\n#\n#\n#\n\ndef _cleanup():\n    # check for processes which have finished\n    for p in list(_children):\n        if p._popen.poll() is not None:\n            _children.discard(p)\n\n#\n# The `Process` class\n#\n\nclass BaseProcess(object):\n    '''\n    Process objects represent activity that is run in a separate process\n\n    The class is analogous to `threading.Thread`\n    '''\n    def _Popen(self):\n        raise NotImplementedError\n\n    def __init__(self, group=None, target=None, name=None, args=(), kwargs={},\n                 *, daemon=None):\n        assert group is None, 'group argument must be None for now'\n        count = next(_process_counter)\n        self._identity = _current_process._identity + (count,)\n        self._config = _current_process._config.copy()\n        self._parent_pid = os.getpid()\n        self._parent_name = _current_process.name\n        self._popen = None\n        self._closed = False\n        self._target = target\n        self._args = tuple(args)\n        self._kwargs = dict(kwargs)\n        self._name = name or type(self).__name__ + '-' + \\\n                     ':'.join(str(i) for i in self._identity)\n        if daemon is not None:\n            self.daemon = daemon\n        _dangling.add(self)\n\n    def _check_closed(self):\n        if self._closed:\n            raise ValueError(\"process object is closed\")\n\n    def run(self):\n        '''\n        Method to be run in sub-process; can be overridden in sub-class\n        '''\n        if self._target:\n            self._target(*self._args, **self._kwargs)\n\n    def start(self):\n        '''\n        Start child process\n        '''\n        self._check_closed()\n        assert self._popen is None, 'cannot start a process twice'\n        assert self._parent_pid == os.getpid(), \\\n               'can only start a process object created by current process'\n        assert not _current_process._config.get('daemon'), \\\n               'daemonic processes are not allowed to have children'\n        _cleanup()\n        self._popen = self._Popen(self)\n        self._sentinel = self._popen.sentinel\n        # Avoid a refcycle if the target function holds an indirect\n        # reference to the process object (see bpo-30775)\n        del self._target, self._args, self._kwargs\n        _children.add(self)\n\n    def terminate(self):\n        '''\n        Terminate process; sends SIGTERM signal or uses TerminateProcess()\n        '''\n        self._check_closed()\n        self._popen.terminate()\n\n    def kill(self):\n        '''\n        Terminate process; sends SIGKILL signal or uses TerminateProcess()\n        '''\n        self._check_closed()\n        self._popen.kill()\n\n    def join(self, timeout=None):\n        '''\n        Wait until child process terminates\n        '''\n        self._check_closed()\n        assert self._parent_pid == os.getpid(), 'can only join a child process'\n        assert self._popen is not None, 'can only join a started process'\n        res = self._popen.wait(timeout)\n        if res is not None:\n            _children.discard(self)\n\n    def is_alive(self):\n        '''\n        Return whether process is alive\n        '''\n        self._check_closed()\n        if self is _current_process:\n            return True\n        assert self._parent_pid == os.getpid(), 'can only test a child process'\n\n        if self._popen is None:\n            return False\n\n        returncode = self._popen.poll()\n        if returncode is None:\n            return True\n        else:\n            _children.discard(self)\n            return False\n\n    def close(self):\n        '''\n        Close the Process object.\n\n        This method releases resources held by the Process object.  It is\n        an error to call this method if the child process is still running.\n        '''\n        if self._popen is not None:\n            if self._popen.poll() is None:\n                raise ValueError(\"Cannot close a process while it is still running. \"\n                                 \"You should first call join() or terminate().\")\n            self._popen.close()\n            self._popen = None\n            del self._sentinel\n            _children.discard(self)\n        self._closed = True\n\n    @property\n    def name(self):\n        return self._name\n\n    @name.setter\n    def name(self, name):\n        assert isinstance(name, str), 'name must be a string'\n        self._name = name\n\n    @property\n    def daemon(self):\n        '''\n        Return whether process is a daemon\n        '''\n        return self._config.get('daemon', False)\n\n    @daemon.setter\n    def daemon(self, daemonic):\n        '''\n        Set whether process is a daemon\n        '''\n        assert self._popen is None, 'process has already started'\n        self._config['daemon'] = daemonic\n\n    @property\n    def authkey(self):\n        return self._config['authkey']\n\n    @authkey.setter\n    def authkey(self, authkey):\n        '''\n        Set authorization key of process\n        '''\n        self._config['authkey'] = AuthenticationString(authkey)\n\n    @property\n    def exitcode(self):\n        '''\n        Return exit code of process or `None` if it has yet to stop\n        '''\n        self._check_closed()\n        if self._popen is None:\n            return self._popen\n        return self._popen.poll()\n\n    @property\n    def ident(self):\n        '''\n        Return identifier (PID) of process or `None` if it has yet to start\n        '''\n        self._check_closed()\n        if self is _current_process:\n            return os.getpid()\n        else:\n            return self._popen and self._popen.pid\n\n    pid = ident\n\n    @property\n    def sentinel(self):\n        '''\n        Return a file descriptor (Unix) or handle (Windows) suitable for\n        waiting for process termination.\n        '''\n        self._check_closed()\n        try:\n            return self._sentinel\n        except AttributeError:\n            raise ValueError(\"process not started\") from None\n\n    def __repr__(self):\n        exitcode = None\n        if self is _current_process:\n            status = 'started'\n        elif self._closed:\n            status = 'closed'\n        elif self._parent_pid != os.getpid():\n            status = 'unknown'\n        elif self._popen is None:\n            status = 'initial'\n        else:\n            exitcode = self._popen.poll()\n            if exitcode is not None:\n                status = 'stopped'\n            else:\n                status = 'started'\n\n        info = [type(self).__name__, 'name=%r' % self._name]\n        if self._popen is not None:\n            info.append('pid=%s' % self._popen.pid)\n        info.append('parent=%s' % self._parent_pid)\n        info.append(status)\n        if exitcode is not None:\n            exitcode = _exitcode_to_name.get(exitcode, exitcode)\n            info.append('exitcode=%s' % exitcode)\n        if self.daemon:\n            info.append('daemon')\n        return '<%s>' % ' '.join(info)\n\n    ##\n\n    def _bootstrap(self, parent_sentinel=None):\n        from . import util, context\n        global _current_process, _parent_process, _process_counter, _children\n\n        try:\n            if self._start_method is not None:\n                context._force_start_method(self._start_method)\n            _process_counter = itertools.count(1)\n            _children = set()\n            util._close_stdin()\n            old_process = _current_process\n            _current_process = self\n            _parent_process = _ParentProcess(\n                self._parent_name, self._parent_pid, parent_sentinel)\n            if threading._HAVE_THREAD_NATIVE_ID:\n                threading.main_thread()._set_native_id()\n            try:\n                util._finalizer_registry.clear()\n                util._run_after_forkers()\n            finally:\n                # delay finalization of the old process object until after\n                # _run_after_forkers() is executed\n                del old_process\n            util.info('child process calling self.run()')\n            try:\n                self.run()\n                exitcode = 0\n            finally:\n                util._exit_function()\n        except SystemExit as e:\n            if not e.args:\n                exitcode = 1\n            elif isinstance(e.args[0], int):\n                exitcode = e.args[0]\n            else:\n                sys.stderr.write(str(e.args[0]) + '\\n')\n                exitcode = 1\n        except:\n            exitcode = 1\n            import traceback\n            sys.stderr.write('Process %s:\\n' % self.name)\n            traceback.print_exc()\n        finally:\n            threading._shutdown()\n            util.info('process exiting with exitcode %d' % exitcode)\n            util._flush_std_streams()\n\n        return exitcode\n\n#\n# We subclass bytes to avoid accidental transmission of auth keys over network\n#\n\nclass AuthenticationString(bytes):\n    def __reduce__(self):\n        from .context import get_spawning_popen\n        if get_spawning_popen() is None:\n            raise TypeError(\n                'Pickling an AuthenticationString object is '\n                'disallowed for security reasons'\n                )\n        return AuthenticationString, (bytes(self),)\n\n\n#\n# Create object representing the parent process\n#\n\nclass _ParentProcess(BaseProcess):\n\n    def __init__(self, name, pid, sentinel):\n        self._identity = ()\n        self._name = name\n        self._pid = pid\n        self._parent_pid = None\n        self._popen = None\n        self._closed = False\n        self._sentinel = sentinel\n        self._config = {}\n\n    def is_alive(self):\n        from multiprocessing.connection import wait\n        return not wait([self._sentinel], timeout=0)\n\n    @property\n    def ident(self):\n        return self._pid\n\n    def join(self, timeout=None):\n        '''\n        Wait until parent process terminates\n        '''\n        from multiprocessing.connection import wait\n        wait([self._sentinel], timeout=timeout)\n\n    pid = ident\n\n#\n# Create object representing the main process\n#\n\nclass _MainProcess(BaseProcess):\n\n    def __init__(self):\n        self._identity = ()\n        self._name = 'MainProcess'\n        self._parent_pid = None\n        self._popen = None\n        self._closed = False\n        self._config = {'authkey': AuthenticationString(os.urandom(32)),\n                        'semprefix': '/mp'}\n        # Note that some versions of FreeBSD only allow named\n        # semaphores to have names of up to 14 characters.  Therefore\n        # we choose a short prefix.\n        #\n        # On MacOSX in a sandbox it may be necessary to use a\n        # different prefix -- see #19478.\n        #\n        # Everything in self._config will be inherited by descendant\n        # processes.\n\n    def close(self):\n        pass\n\n\n_parent_process = None\n_current_process = _MainProcess()\n_process_counter = itertools.count(1)\n_children = set()\ndel _MainProcess\n\n#\n# Give names to some return codes\n#\n\n_exitcode_to_name = {}\n\nfor name, signum in list(signal.__dict__.items()):\n    if name[:3]=='SIG' and '_' not in name:\n        _exitcode_to_name[-signum] = f'-{name}'\n\n# For debug and leak testing\n_dangling = WeakSet()\n", 432]}, "functions": {"<lambda> (C:\\Users\\002CSC744\\PycharmProjects\\code_tracer\\venv\\lib\\site-packages\\_distutils_hack\\__init__.py:96)": ["C:\\Users\\002CSC744\\PycharmProjects\\code_tracer\\venv\\lib\\site-packages\\_distutils_hack\\__init__.py", 96], "find_spec (C:\\Users\\002CSC744\\PycharmProjects\\code_tracer\\venv\\lib\\site-packages\\_distutils_hack\\__init__.py:89)": ["C:\\Users\\002CSC744\\PycharmProjects\\code_tracer\\venv\\lib\\site-packages\\_distutils_hack\\__init__.py", 89], "find_spec (C:\\Users\\002CSC744\\PycharmProjects\\code_tracer\\venv\\lib\\site-packages\\_virtualenv.py:54)": ["C:\\Users\\002CSC744\\PycharmProjects\\code_tracer\\venv\\lib\\site-packages\\_virtualenv.py", 54], "<module> (C:\\Python38\\lib\\tkinter\\constants.py:4)": ["C:\\Python38\\lib\\tkinter\\constants.py", 4], "isstring (C:\\Python38\\lib\\sre_compile.py:595)": ["C:\\Python38\\lib\\sre_compile.py", 595], "__next (C:\\Python38\\lib\\sre_parse.py:233)": ["C:\\Python38\\lib\\sre_parse.py", 233], "__init__ (C:\\Python38\\lib\\sre_parse.py:224)": ["C:\\Python38\\lib\\sre_parse.py", 224], "__init__ (C:\\Python38\\lib\\sre_parse.py:76)": ["C:\\Python38\\lib\\sre_parse.py", 76], "tell (C:\\Python38\\lib\\sre_parse.py:286)": ["C:\\Python38\\lib\\sre_parse.py", 286], "__init__ (C:\\Python38\\lib\\sre_parse.py:111)": ["C:\\Python38\\lib\\sre_parse.py", 111], "get (C:\\Python38\\lib\\sre_parse.py:254)": ["C:\\Python38\\lib\\sre_parse.py", 254], "match (C:\\Python38\\lib\\sre_parse.py:249)": ["C:\\Python38\\lib\\sre_parse.py", 249], "groups (C:\\Python38\\lib\\sre_parse.py:81)": ["C:\\Python38\\lib\\sre_parse.py", 81], "opengroup (C:\\Python38\\lib\\sre_parse.py:84)": ["C:\\Python38\\lib\\sre_parse.py", 84], "_class_escape (C:\\Python38\\lib\\sre_parse.py:295)": ["C:\\Python38\\lib\\sre_parse.py", 295], "_uniq (C:\\Python38\\lib\\sre_parse.py:432)": ["C:\\Python38\\lib\\sre_parse.py", 432], "append (C:\\Python38\\lib\\sre_parse.py:172)": ["C:\\Python38\\lib\\sre_parse.py", 172], "__len__ (C:\\Python38\\lib\\sre_parse.py:160)": ["C:\\Python38\\lib\\sre_parse.py", 160], "__getitem__ (C:\\Python38\\lib\\sre_parse.py:164)": ["C:\\Python38\\lib\\sre_parse.py", 164], "_parse (C:\\Python38\\lib\\sre_parse.py:493)": ["C:\\Python38\\lib\\sre_parse.py", 493], "_parse_sub (C:\\Python38\\lib\\sre_parse.py:435)": ["C:\\Python38\\lib\\sre_parse.py", 435], "getwidth (C:\\Python38\\lib\\sre_parse.py:174)": ["C:\\Python38\\lib\\sre_parse.py", 174], "closegroup (C:\\Python38\\lib\\sre_parse.py:96)": ["C:\\Python38\\lib\\sre_parse.py", 96], "fix_flags (C:\\Python38\\lib\\sre_parse.py:921)": ["C:\\Python38\\lib\\sre_parse.py", 921], "parse (C:\\Python38\\lib\\sre_parse.py:937)": ["C:\\Python38\\lib\\sre_parse.py", 937], "_get_iscased (C:\\Python38\\lib\\sre_compile.py:453)": ["C:\\Python38\\lib\\sre_compile.py", 453], "_combine_flags (C:\\Python38\\lib\\sre_compile.py:65)": ["C:\\Python38\\lib\\sre_compile.py", 65], "_get_literal_prefix (C:\\Python38\\lib\\sre_compile.py:461)": ["C:\\Python38\\lib\\sre_compile.py", 461], "_get_charset_prefix (C:\\Python38\\lib\\sre_compile.py:492)": ["C:\\Python38\\lib\\sre_compile.py", 492], "<listcomp> (C:\\Python38\\lib\\sre_compile.py:413)": ["C:\\Python38\\lib\\sre_compile.py", 413], "_mk_bitmap (C:\\Python38\\lib\\sre_compile.py:411)": ["C:\\Python38\\lib\\sre_compile.py", 411], "_optimize_charset (C:\\Python38\\lib\\sre_compile.py:276)": ["C:\\Python38\\lib\\sre_compile.py", 276], "_compile_charset (C:\\Python38\\lib\\sre_compile.py:249)": ["C:\\Python38\\lib\\sre_compile.py", 249], "_compile_info (C:\\Python38\\lib\\sre_compile.py:536)": ["C:\\Python38\\lib\\sre_compile.py", 536], "_compile (C:\\Python38\\lib\\sre_compile.py:71)": ["C:\\Python38\\lib\\sre_compile.py", 71], "_code (C:\\Python38\\lib\\sre_compile.py:598)": ["C:\\Python38\\lib\\sre_compile.py", 598], "compile (C:\\Python38\\lib\\sre_compile.py:759)": ["C:\\Python38\\lib\\sre_compile.py", 759], "__new__ (C:\\Python38\\lib\\enum.py:631)": ["C:\\Python38\\lib\\enum.py", 631], "__call__ (C:\\Python38\\lib\\enum.py:313)": ["C:\\Python38\\lib\\enum.py", 313], "__and__ (C:\\Python38\\lib\\enum.py:938)": ["C:\\Python38\\lib\\enum.py", 938], "_compile (C:\\Python38\\lib\\re.py:289)": ["C:\\Python38\\lib\\re.py", 289], "compile (C:\\Python38\\lib\\re.py:250)": ["C:\\Python38\\lib\\re.py", 250], "value (C:\\Python38\\lib\\enum.py:753)": ["C:\\Python38\\lib\\enum.py", 753], "__get__ (C:\\Python38\\lib\\types.py:171)": ["C:\\Python38\\lib\\types.py", 171], "_check_for_existing_members (C:\\Python38\\lib\\enum.py:522)": ["C:\\Python38\\lib\\enum.py", 522], "__init__ (C:\\Python38\\lib\\enum.py:68)": ["C:\\Python38\\lib\\enum.py", 68], "_find_data_type (C:\\Python38\\lib\\enum.py:543)": ["C:\\Python38\\lib\\enum.py", 543], "_get_mixins_ (C:\\Python38\\lib\\enum.py:532)": ["C:\\Python38\\lib\\enum.py", 532], "_is_sunder (C:\\Python38\\lib\\enum.py:33)": ["C:\\Python38\\lib\\enum.py", 33], "__setitem__ (C:\\Python38\\lib\\enum.py:75)": ["C:\\Python38\\lib\\enum.py", 75], "__prepare__ (C:\\Python38\\lib\\enum.py:143)": ["C:\\Python38\\lib\\enum.py", 143], "_is_dunder (C:\\Python38\\lib\\enum.py:22)": ["C:\\Python38\\lib\\enum.py", 22], "_is_descriptor (C:\\Python38\\lib\\enum.py:12)": ["C:\\Python38\\lib\\enum.py", 12], "EventType (C:\\Python38\\lib\\tkinter\\__init__.py:147)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 147], "__getattr__ (C:\\Python38\\lib\\enum.py:370)": ["C:\\Python38\\lib\\enum.py", 370], "_find_new_ (C:\\Python38\\lib\\enum.py:579)": ["C:\\Python38\\lib\\enum.py", 579], "<dictcomp> (C:\\Python38\\lib\\enum.py:175)": ["C:\\Python38\\lib\\enum.py", 175], "__setattr__ (C:\\Python38\\lib\\enum.py:417)": ["C:\\Python38\\lib\\enum.py", 417], "<setcomp> (C:\\Python38\\lib\\enum.py:200)": ["C:\\Python38\\lib\\enum.py", 200], "<genexpr> (C:\\Python38\\lib\\enum.py:223)": ["C:\\Python38\\lib\\enum.py", 223], "__new__ (C:\\Python38\\lib\\enum.py:157)": ["C:\\Python38\\lib\\enum.py", 157], "Event (C:\\Python38\\lib\\tkinter\\__init__.py:191)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 191], "Variable (C:\\Python38\\lib\\tkinter\\__init__.py:320)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 320], "StringVar (C:\\Python38\\lib\\tkinter\\__init__.py:501)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 501], "IntVar (C:\\Python38\\lib\\tkinter\\__init__.py:525)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 525], "DoubleVar (C:\\Python38\\lib\\tkinter\\__init__.py:550)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 550], "BooleanVar (C:\\Python38\\lib\\tkinter\\__init__.py:571)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 571], "Misc (C:\\Python38\\lib\\tkinter\\__init__.py:621)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 621], "CallWrapper (C:\\Python38\\lib\\tkinter\\__init__.py:1877)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 1877], "XView (C:\\Python38\\lib\\tkinter\\__init__.py:1899)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 1899], "YView (C:\\Python38\\lib\\tkinter\\__init__.py:1920)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 1920], "Wm (C:\\Python38\\lib\\tkinter\\__init__.py:1941)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 1941], "Tk (C:\\Python38\\lib\\tkinter\\__init__.py:2245)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2245], "Pack (C:\\Python38\\lib\\tkinter\\__init__.py:2375)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2375], "Place (C:\\Python38\\lib\\tkinter\\__init__.py:2421)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2421], "Grid (C:\\Python38\\lib\\tkinter\\__init__.py:2472)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2472], "BaseWidget (C:\\Python38\\lib\\tkinter\\__init__.py:2527)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2527], "Widget (C:\\Python38\\lib\\tkinter\\__init__.py:2590)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2590], "Toplevel (C:\\Python38\\lib\\tkinter\\__init__.py:2598)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2598], "Button (C:\\Python38\\lib\\tkinter\\__init__.py:2628)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2628], "Canvas (C:\\Python38\\lib\\tkinter\\__init__.py:2675)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2675], "Checkbutton (C:\\Python38\\lib\\tkinter\\__init__.py:2985)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2985], "Entry (C:\\Python38\\lib\\tkinter\\__init__.py:3021)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 3021], "Frame (C:\\Python38\\lib\\tkinter\\__init__.py:3107)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 3107], "Label (C:\\Python38\\lib\\tkinter\\__init__.py:3127)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 3127], "Listbox (C:\\Python38\\lib\\tkinter\\__init__.py:3151)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 3151], "Menu (C:\\Python38\\lib\\tkinter\\__init__.py:3267)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 3267], "Menubutton (C:\\Python38\\lib\\tkinter\\__init__.py:3397)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 3397], "Message (C:\\Python38\\lib\\tkinter\\__init__.py:3404)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 3404], "Radiobutton (C:\\Python38\\lib\\tkinter\\__init__.py:3411)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 3411], "Scale (C:\\Python38\\lib\\tkinter\\__init__.py:3444)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 3444], "Scrollbar (C:\\Python38\\lib\\tkinter\\__init__.py:3483)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 3483], "Text (C:\\Python38\\lib\\tkinter\\__init__.py:3533)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 3533], "_setit (C:\\Python38\\lib\\tkinter\\__init__.py:3937)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 3937], "OptionMenu (C:\\Python38\\lib\\tkinter\\__init__.py:3951)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 3951], "Image (C:\\Python38\\lib\\tkinter\\__init__.py:3990)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 3990], "PhotoImage (C:\\Python38\\lib\\tkinter\\__init__.py:4056)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 4056], "BitmapImage (C:\\Python38\\lib\\tkinter\\__init__.py:4140)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 4140], "Spinbox (C:\\Python38\\lib\\tkinter\\__init__.py:4160)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 4160], "LabelFrame (C:\\Python38\\lib\\tkinter\\__init__.py:4338)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 4338], "PanedWindow (C:\\Python38\\lib\\tkinter\\__init__.py:4362)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 4362], "<module> (C:\\Python38\\lib\\tkinter\\__init__.py:1)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 1], "_get_bothseps (C:\\Python38\\lib\\ntpath.py:34)": ["C:\\Python38\\lib\\ntpath.py", 34], "splitdrive (C:\\Python38\\lib\\ntpath.py:124)": ["C:\\Python38\\lib\\ntpath.py", 124], "split (C:\\Python38\\lib\\ntpath.py:180)": ["C:\\Python38\\lib\\ntpath.py", 180], "basename (C:\\Python38\\lib\\ntpath.py:214)": ["C:\\Python38\\lib\\ntpath.py", 214], "_splitext (C:\\Python38\\lib\\genericpath.py:121)": ["C:\\Python38\\lib\\genericpath.py", 121], "splitext (C:\\Python38\\lib\\ntpath.py:203)": ["C:\\Python38\\lib\\ntpath.py", 203], "__init__ (C:\\Python38\\lib\\tkinter\\__init__.py:1881)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 1881], "_register (C:\\Python38\\lib\\tkinter\\__init__.py:1513)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 1513], "wm_protocol (C:\\Python38\\lib\\tkinter\\__init__.py:2189)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2189], "_loadtk (C:\\Python38\\lib\\tkinter\\__init__.py:2282)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2282], "check_str (C:\\Python38\\lib\\os.py:734)": ["C:\\Python38\\lib\\os.py", 734], "encodekey (C:\\Python38\\lib\\os.py:740)": ["C:\\Python38\\lib\\os.py", 740], "__getitem__ (C:\\Python38\\lib\\os.py:670)": ["C:\\Python38\\lib\\os.py", 670], "__contains__ (C:\\Python38\\lib\\_collections_abc.py:664)": ["C:\\Python38\\lib\\_collections_abc.py", 664], "join (C:\\Python38\\lib\\ntpath.py:77)": ["C:\\Python38\\lib\\ntpath.py", 77], "isfile (C:\\Python38\\lib\\genericpath.py:27)": ["C:\\Python38\\lib\\genericpath.py", 27], "readprofile (C:\\Python38\\lib\\tkinter\\__init__.py:2318)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2318], "__init__ (C:\\Python38\\lib\\tkinter\\__init__.py:2250)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2250], "wm_title (C:\\Python38\\lib\\tkinter\\__init__.py:2224)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2224], "_getboolean (C:\\Python38\\lib\\tkinter\\__init__.py:1445)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 1445], "wm_overrideredirect (C:\\Python38\\lib\\tkinter\\__init__.py:2172)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2172], "_cnfmerge (C:\\Python38\\lib\\tkinter\\__init__.py:101)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 101], "_setup (C:\\Python38\\lib\\tkinter\\__init__.py:2530)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2530], "<listcomp> (C:\\Python38\\lib\\tkinter\\__init__.py:2569)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2569], "_stringify (C:\\Python38\\lib\\tkinter\\__init__.py:61)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 61], "_options (C:\\Python38\\lib\\tkinter\\__init__.py:1468)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 1468], "__init__ (C:\\Python38\\lib\\tkinter\\__init__.py:2560)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2560], "__init__ (C:\\Python38\\lib\\tkinter\\__init__.py:3130)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 3130], "pack_configure (C:\\Python38\\lib\\tkinter\\__init__.py:2380)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2380], "wm_withdraw (C:\\Python38\\lib\\tkinter\\__init__.py:2237)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2237], "update_idletasks (C:\\Python38\\lib\\tkinter\\__init__.py:1316)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 1316], "winfo_screenwidth (C:\\Python38\\lib\\tkinter\\__init__.py:1219)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 1219], "winfo_reqwidth (C:\\Python38\\lib\\tkinter\\__init__.py:1157)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 1157], "winfo_screenheight (C:\\Python38\\lib\\tkinter\\__init__.py:1195)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 1195], "winfo_reqheight (C:\\Python38\\lib\\tkinter\\__init__.py:1152)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 1152], "wm_geometry (C:\\Python38\\lib\\tkinter\\__init__.py:2041)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2041], "wm_deiconify (C:\\Python38\\lib\\tkinter\\__init__.py:2010)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2010], "splash_window (C:\\Users\\002CSC744\\PycharmProjects\\APP_UI\\splash_screen\\__init__.py:5)": ["C:\\Users\\002CSC744\\PycharmProjects\\APP_UI\\splash_screen\\__init__.py", 5], "after (C:\\Python38\\lib\\tkinter\\__init__.py:800)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 800], "_get_default_root (C:\\Python38\\lib\\tkinter\\__init__.py:291)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 291], "destroy (C:\\Python38\\lib\\tkinter\\__init__.py:632)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 632], "destroy (C:\\Python38\\lib\\tkinter\\__init__.py:2577)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2577], "destroy (C:\\Python38\\lib\\tkinter\\__init__.py:2308)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 2308], "mainWin (C:\\Users\\002CSC744\\PycharmProjects\\APP_UI\\splash_screen\\__init__.py:31)": ["C:\\Users\\002CSC744\\PycharmProjects\\APP_UI\\splash_screen\\__init__.py", 31], "deletecommand (C:\\Python38\\lib\\tkinter\\__init__.py:643)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 643], "callit (C:\\Python38\\lib\\tkinter\\__init__.py:812)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 812], "__call__ (C:\\Python38\\lib\\tkinter\\__init__.py:1887)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 1887], "mainloop (C:\\Python38\\lib\\tkinter\\__init__.py:601)": ["C:\\Python38\\lib\\tkinter\\__init__.py", 601], "static_call (C:\\Users\\002CSC744\\PycharmProjects\\APP_UI\\splash_screen\\__init__.py:39)": ["C:\\Users\\002CSC744\\PycharmProjects\\APP_UI\\splash_screen\\__init__.py", 39], "<module> (C:\\Users\\002CSC744\\PycharmProjects\\APP_UI\\splash_screen\\__init__.py:1)": ["C:\\Users\\002CSC744\\PycharmProjects\\APP_UI\\splash_screen\\__init__.py", 1], "info (C:\\Python38\\lib\\multiprocessing\\util.py:52)": ["C:\\Python38\\lib\\multiprocessing\\util.py", 52], "debug (C:\\Python38\\lib\\multiprocessing\\util.py:48)": ["C:\\Python38\\lib\\multiprocessing\\util.py", 48], "<lambda> (C:\\Python38\\lib\\multiprocessing\\util.py:284)": ["C:\\Python38\\lib\\multiprocessing\\util.py", 284], "<listcomp> (C:\\Python38\\lib\\multiprocessing\\util.py:291)": ["C:\\Python38\\lib\\multiprocessing\\util.py", 291], "_run_finalizers (C:\\Python38\\lib\\multiprocessing\\util.py:268)": ["C:\\Python38\\lib\\multiprocessing\\util.py", 268], "current_process (C:\\Python38\\lib\\multiprocessing\\process.py:37)": ["C:\\Python38\\lib\\multiprocessing\\process.py", 37], "_cleanup (C:\\Python38\\lib\\multiprocessing\\process.py:61)": ["C:\\Python38\\lib\\multiprocessing\\process.py", 61], "active_children (C:\\Python38\\lib\\multiprocessing\\process.py:43)": ["C:\\Python38\\lib\\multiprocessing\\process.py", 43], "<lambda> (C:\\Python38\\lib\\multiprocessing\\util.py:282)": ["C:\\Python38\\lib\\multiprocessing\\util.py", 282], "sub_debug (C:\\Python38\\lib\\multiprocessing\\util.py:44)": ["C:\\Python38\\lib\\multiprocessing\\util.py", 44]}}}